hist(data, breaks = c(0:30) * max(data + 10^-1)/30, freq = FALSE,
xlim = range(x), xlab = expression(Discharge ~ "(" * m^{3} ~ s^{-1} *")"),
ylab = "Density", main = "",col = "lightgrey")
#axis(1,cex.axis=1.5);axis(2,cex.axis=1.5)
dens <- density(data, from = 0)
lines(dens$x, dens$y, col = "black")
abline(v = censoring, col = "lightgrey")
if (any(method == "pwm")) {
lines(x, dextgp.pwm, col = "red", lty = 2)
}
if (any(method == "mle")) {
lines(x, dextgp.mle, col = "blue")
}
}
if(QQplot){
if (any(method == "pwm")) {
plot(data, qextgp.pwm, asp = 1, xlab = "Empirical quantiles",
ylab = "Fitted quantiles", ylim = range(qextgps,
na.rm = TRUE), type = "n")
}
else {
if (any(method == "mle")) {
plot(qextgp.mle, data, xlab = "Theoretical Mixture quantiles",
ylab = "Empirical quantiles", type = "n",yaxt="n",xaxt="n"
,lwd=3,col=1,cex.lab=1.5,
,xlim = c(0,50),ylim=c(0,50))
axis(1,cex.axis=1.5);axis(2,cex.axis=1.5)
}
}
if (confint) {
if (any(method == "pwm")) {
polygon(x = c(sort(data), sort(data, decreasing = TRUE)),
y = c(q.pwm.L, q.pwm.U[length(q.pwm.U):1]),
col = rgb(1, 0, 0, alpha = 0.1), lty = 2, border = rgb(1,
0, 0, alpha = 0.5))
}
if (any(method == "mle")) {
polygon(x = c(sort(data), sort(data, decreasing = TRUE)),
y = c(q.mle.L, q.mle.U[length(q.mle.U):1]),
col = rgb(0, 0, 1, alpha = 0.1), lty = 1, border = rgb(0,
0, 1, alpha = 0.5))
}
}
if (any(method == "pwm")) {
lines(sort(data), qextgp.pwm, lty = 2, type = "b",
pch = 20, col = "red")
}
if (any(method == "mle")) {
lines(qextgp.mle, sort(data), lty = 1, type = "b",
pch = 1,xlim = c(0,50),ylim=c(0,50),yaxt="n",xaxt="n")
axis(1,cex.axis=1.5);axis(2,cex.axis=1.5)
}
abline(0, 1)
}
return(list(fit = fits, confint = CIs))
}
modifiedfit.extgp(InPut, model=1, method = 'mle', init = c(1, gp.fit(InPut, 0.3)$est),FittedModel = FALSE,QQplot = TRUE)
pdf("/Users/jlee/Documents/DownscaleLinearMapping/QQplot_Obs_eGPD.pdf",8,8)
modifiedfit.extgp(InPut, model=1, method = 'mle', init = c(1, gp.fit(InPut, 0.3)$est),FittedModel = FALSE,QQplot = TRUE)
dev.off()
dev.off()
#'
#' @description
#' Creates an arbitrary positive definite matrix as an example that will be converted to a variogram matrix for the Husler-Reiss distribution.
#' The function draws uniform random samples U[0,1] and defines a matrix A. The multiplication of t(A)*A provides a positive definite matrix with all positive eigenvalues.
#' @param A An integer for the dimension of a positive definite matrix
#'
#' @return A dxd positive definite matrix.
#' @export
#'
#' @examples
CovPD <- function(d){
A <- matrix(runif(d^2)*2-1, ncol=d)
Sigma <- t(A) %*% A
if(all(eigen(Sigma)$values>0)){
return(Sigma)
}
}
#'
#' @description
#' Converts a covariance matrix to a variogram matrix that will be used for the Husler-Reiss distribution.
#'
#' @param Sigma A positive definite covariance matrix.
#'
#' @return A variogram matrix induced by the covariance matrix.
#' @export
#'
#' @examples
Cov2Vario <- function(Sigma){
d=dim(Sigma)[1]
Variogram=matrix(rep(NA,d^2),d,d)
for(i in 1:d){
for(j in i:d){
Variogram[i,j]=Sigma[i,i]+Sigma[j,j]-2*Sigma[i,j]
}
}
Variogram[!upper.tri(Variogram)]=0
Variogram=t(Variogram)+Variogram
return(Variogram)
}
CovPD(d = 5)
set.seed(123)
CovPD(d = 5)
set.seed(123)
CovPD(d = 5)
CovMtx=CovPD(d = 5)
Cov2Vario(Sigma = CovMtx)
Vario=Cov2Vario(Sigma = CovMtx)
set.seed(123)
CovMtx=CovPD(d = 4)
Vario=Cov2Vario(Sigma = CovMtx)
Vario
CovMtx
Vario[1,2]
matrix(c(Vario[1,2],
,0.5(Vario[1,2]+Vario[2,4]-Vario[1,4])
,0.5(Vario[1,2]+Vario[3,2]-Vario[1,3])
,0
,Vario[2,4]
,0.5(Vario[3,2]+Vario[2,4]-Vario[3,4])
,0
,0
,Vario[3,2]),3,3,byrow = T)
matrix(c(Vario[1,2],0.5(Vario[1,2]+Vario[2,4]-Vario[1,4]),0.5(Vario[1,2]+Vario[3,2]-Vario[1,3])
,0,Vario[2,4],0.5(Vario[3,2]+Vario[2,4]-Vario[3,4]),0,0,Vario[3,2]),3,3,byrow = T)
matrix(c(Vario[1,2],0.5*(Vario[1,2]+Vario[2,4]-Vario[1,4]),0.5*(Vario[1,2]+Vario[3,2]-Vario[1,3])
,0,Vario[2,4],0.5*(Vario[3,2]+Vario[2,4]-Vario[3,4]),0,0,Vario[3,2]),3,3,byrow = T)
matrix(c(Vario[1,2],0.5*(Vario[1,2]+Vario[2,4]-Vario[1,4]),0.5*(Vario[1,2]+Vario[3,2]-Vario[1,3])
,0.5*(Vario[1,2]+Vario[2,4]-Vario[1,4]),Vario[2,4],0.5*(Vario[3,2]+Vario[2,4]-Vario[3,4])
,0.5*(Vario[1,2]+Vario[3,2]-Vario[1,3]),0.5*(Vario[3,2]+Vario[2,4]-Vario[3,4]),Vario[3,2]),3,3,byrow = T)
Cov_k2=matrix(c(Vario[1,2],0.5*(Vario[1,2]+Vario[2,4]-Vario[1,4]),0.5*(Vario[1,2]+Vario[3,2]-Vario[1,3])
,0.5*(Vario[1,2]+Vario[2,4]-Vario[1,4]),Vario[2,4],0.5*(Vario[3,2]+Vario[2,4]-Vario[3,4])
,0.5*(Vario[1,2]+Vario[3,2]-Vario[1,3]),0.5*(Vario[3,2]+Vario[2,4]-Vario[3,4]),Vario[3,2]),3,3,byrow = T)
Cor_k1=cov2cor(Cov_k2)
Cor_k1
Cor_k1[1:2,1:2]-Cor_k1[1:2,3]%*%Cor_k1[3,1:2]
Cor_k1[1:2,3]
Cor_k1[3,1:2]
Cor_k1[1:2,1:2]-t(Cor_k1[1:2,3])%*%Cor_k1[3,1:2]
Cor_k1[1:2,3]
Cor_k1[1:2,1:2]-Cor_k1[1:2,3]%*%t(Cor_k1[1:2,3])
Cond_k1=Cor_k1[1:2,1:2]-Cor_k1[1:2,3]%*%t(Cor_k1[1:2,3])
CondCor_k1=cov2cor(Cond_k1)
CondCor_k1
Cov_k3=matrix(c(Vario[1,3],0.5*(Vario[1,3]+Vario[3,4]-Vario[1,4]),0.5*(Vario[1,3]+Vario[3,2]-Vario[1,2])
,0.5*(Vario[1,3]+Vario[2,3]-Vario[1,2]),Vario[4,3],0.5*(Vario[4,3]+Vario[2,3]-Vario[2,4])
,0.5*(Vario[1,3]+Vario[2,3]-Vario[1,2]),0.5*(Vario[4,3]+Vario[2,3]-Vario[2,4]),Vario[3,2]),3,3,byrow = T)
Cov_k3
Cov_k3=matrix(c(Vario[1,3],0.5*(Vario[1,3]+Vario[3,4]-Vario[1,4]),0.5*(Vario[1,3]+Vario[3,2]-Vario[1,2])
,0.5*(Vario[1,3]+Vario[3,4]-Vario[1,4]),Vario[4,3],0.5*(Vario[4,3]+Vario[2,3]-Vario[2,4])
,0.5*(Vario[1,3]+Vario[2,3]-Vario[1,2]),0.5*(Vario[4,3]+Vario[2,3]-Vario[2,4]),Vario[3,2]),3,3,byrow = T)
Cov_k3
Cor_k3=cov2cor(Cov_k3)
Cond_k3=Cor_k3[1:2,1:2]-Cor_k3[1:2,3]%*%t(Cor_k3[1:2,3])
CondCor_k3=cov2cor(Cond_k3)
CondCor_k3
CondCor_k1
choose(31,2)
0.05/465
qnorm(0.05/465)
summary(RunoffCo)
View(RunoffCo)
load(file = "/Users/jlee/Documents/DownscaleLinearMapping/theo_quan.Rdata")
load(file = "/Users/jlee/Documents/DownscaleLinearMapping/theo_quan_mod.Rdata")
load(file = "/Users/jlee/Documents/DownscaleLinearMapping/theo_quan_mod_f.Rdata")
##  QQ-plot
##  1. Obs
qqplot(x = theo_quan,y = Emp_eq,main="",xlim=c(0,50),ylim=c(0,50),xlab="Fitted Mixture quantile",ylab="Empirical quantile"
,cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(a=0,b=1)
pdf("/Users/jlee/Documents/DownscaleLinearMapping/QQplot_Obs.pdf",8,8)
##  QQ-plot
##  1. Obs
qqplot(x = theo_quan,y = Emp_eq,main="",xlim=c(0,50),ylim=c(0,50),xlab="Fitted Mixture quantile",ylab="Empirical quantile"
,cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(a=0,b=1)
dev.off()
dev.off()
pdf("/Users/jlee/Documents/DownscaleLinearMapping/QQplot_Mod.pdf",8,8)
##  2. Mod
qqplot(x = theo_quan_mod,y = Emp_eq,main="",xlim=c(0,25),ylim=c(0,25),xlab="Fitted Mixture quantile",ylab="Empirical quantile"
,cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(a=0,b=1)
dev.off()
pdf("/Users/jlee/Documents/DownscaleLinearMapping/QQplot_Mod_f.pdf",8,8)
##  3. Mod_f
qqplot(x = theo_quan_mod_f,y = Emp_eq,main="",xlim=c(0,25),ylim=c(0,25),xlab="Fitted Mixture quantile",ylab="Empirical quantile"
,cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(a=0,b=1)
dev.off()
##  Save input info by implementing MLE.out
InputDat=RunoffCo[,2]
Thres=quantile(x = InputDat,0.95)
Delta=quantile(x = InputDat,0.96)
####  Prob sets
p_eq=1:length(InputDat)/(length(InputDat)+1)
length(p_eq)
####  Empirical quantile
Emp_eq=quantile(x = InputDat,probs = p_eq)
pdf("/Users/jlee/Documents/DownscaleLinearMapping/QQplot_Obs.pdf",8,8)
##  QQ-plot
##  1. Obs
qqplot(x = theo_quan,y = Emp_eq,main="",xlim=c(0,50),ylim=c(0,50),xlab="Fitted Mixture quantile",ylab="Empirical quantile"
,cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(a=0,b=1)
dev.off()
##  2. Mod
InputDat=RunoffCo[,3]
Thres=7.525825;Delta=7.88642
####  Prob sets
p_eq=1:length(InputDat)/(length(InputDat)+1)
length(p_eq)
####  Empirical quantile
Emp_eq=quantile(x = InputDat,probs = p_eq)
pdf("/Users/jlee/Documents/DownscaleLinearMapping/QQplot_Mod.pdf",8,8)
##  2. Mod
qqplot(x = theo_quan_mod,y = Emp_eq,main="",xlim=c(0,25),ylim=c(0,25),xlab="Fitted Mixture quantile",ylab="Empirical quantile"
,cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(a=0,b=1)
dev.off()
##  3. Mod_f
InputDat=RunoffCo[,4]
Thres=7.649125;Delta=8.21658
####  Prob sets
p_eq=1:length(InputDat)/(length(InputDat)+1)
length(p_eq)
####  Empirical quantile
Emp_eq=quantile(x = InputDat,probs = p_eq)
pdf("/Users/jlee/Documents/DownscaleLinearMapping/QQplot_Mod_f.pdf",8,8)
##  3. Mod_f
qqplot(x = theo_quan_mod_f,y = Emp_eq,main="",xlim=c(0,25),ylim=c(0,25),xlab="Fitted Mixture quantile",ylab="Empirical quantile"
,cex.lab=1.5, cex.axis=1.5, cex.main=1.5, cex.sub=1.5)
abline(a=0,b=1)
dev.off()
1-(r24-r23*r43)^2-(r14-r13*r43)^2+(r13-r13*r43)^2*(r24-r23*r43)^2
r14=0.1
r13=0.2
r43=0.3
r24=0.4
r23=0.5
1-(r24-r23*r43)^2-(r14-r13*r43)^2+(r13-r13*r43)^2*(r24-r23*r43)^2
1-(r23-r24*r43)^2-(r13-r14*r43)^2+(r13-r14*r43)^2*(r23-r24*r43)^2
nu.3=-(r13*r23)
de.3=1-(r24-r23*r43)^2-(r14-r13*r43)^2+(r13-r13*r43)^2*(r24-r23*r43)^2
nu.4=-(r14*r24)
de.4=1-(r23-r24*r43)^2-(r13-r14*r43)^2+(r13-r14*r43)^2*(r23-r24*r43)^2
nu.3/sqrt(de.3)
nu.4/sqrt(de.4)
nu1=r12-r14*r23 - (r13-r14*r34)*(r23-r24*r34)
r12=0.1
r14=0.2
r24=0.3
r13=0.4
r34=0.5
r23=0.6
nu1=r12-r14*r23 - (r13-r14*r34)*(r23-r24*r34)
de1=sqrt((1-(r12-r14*r34)^2)(1-(r23-r24*r34)^2))
de1=sqrt((1-(r12-r14*r34)^2)*(1-(r23-r24*r34)^2))
nu1/de1
nu2=r12-r13*r23 - (r14-r13*r34)*(r24-r23*r34)
de2=sqrt((1-(r14-r13*r34)^2)*(1-(r24-r23*r34)^2))
nu2/de2
nu1=r12-r14*r24 - (r13-r14*r34)*(r23-r24*r34)
de1=sqrt((1-(r13-r14*r34)^2)*(1-(r23-r24*r34)^2))
nu1/de1
nu2=r12-r13*r23 - (r14-r13*r34)*(r24-r23*r34)
de2=sqrt((1-(r14-r13*r34)^2)*(1-(r24-r23*r34)^2))
nu2/de2
nu1=r12-r14*r24 - (r13-r14*r34)*(r23-r24*r34)
de1=sqrt((1-(r13-r14*r34)^2)*(1-(r23-r24*r34)^2))
nu1/de1
nu2=r12-r13*r23 - (r14-r13*r34)*(r24-r23*r34)
de2=sqrt((1-(r14-r13*r34)^2)*(1-(r24-r23*r34)^2))
nu2/de2
R=matrix(c(1,0.1,0.1,0.1
,0.1,1,0.1,0.1
,0.1,0.1,1,0.1
,0.1,0.1,0.1,1),nrow = 4,byrow = T)
R
r12=R[1,2]
r14=R[1,4]
r24=R[2,4]
r13=R[1,3]
r34=R[3,4]
r23=R[2,3]
nu1=r12-r14*r24 - (r13-r14*r34)*(r23-r24*r34)
de1=sqrt((1-(r13-r14*r34)^2)*(1-(r23-r24*r34)^2))
nu1/de1
nu2=r12-r13*r23 - (r14-r13*r34)*(r24-r23*r34)
de2=sqrt((1-(r14-r13*r34)^2)*(1-(r24-r23*r34)^2))
nu2/de2
R=matrix(c(1,0.1,0.2,0.3
,0.1,1,0.1,0.1
,0.3,0.1,1,0.1
,0.4,0.1,0.1,1),nrow = 4,byrow = T)
R
R=matrix(c(1,0.1,0.2,0.3
,0.1,1,0.1,0.1
,0.2,0.1,1,0.1
,0.3,0.1,0.1,1),nrow = 4,byrow = T)
R
r12=R[1,2]
r14=R[1,4]
r24=R[2,4]
r13=R[1,3]
r34=R[3,4]
r23=R[2,3]
nu1=r12-r14*r24 - (r13-r14*r34)*(r23-r24*r34)
de1=sqrt((1-(r13-r14*r34)^2)*(1-(r23-r24*r34)^2))
nu1/de1
nu2=r12-r13*r23 - (r14-r13*r34)*(r24-r23*r34)
de2=sqrt((1-(r14-r13*r34)^2)*(1-(r24-r23*r34)^2))
nu2/de2
R
CovMtx=CovPD(d = 4)
CovMtx
cov2cor(CovMtx)
R=cov2cor(CovMtx)
r12=R[1,2]
r14=R[1,4]
r24=R[2,4]
r13=R[1,3]
r34=R[3,4]
r23=R[2,3]
nu1=r12-r14*r24 - (r13-r14*r34)*(r23-r24*r34)
de1=sqrt((1-(r13-r14*r34)^2)*(1-(r23-r24*r34)^2))
nu1/de1
nu2=r12-r13*r23 - (r14-r13*r34)*(r24-r23*r34)
de2=sqrt((1-(r14-r13*r34)^2)*(1-(r24-r23*r34)^2))
nu2/de2
#'
#' @description
#' Creates an arbitrary positive definite matrix as an example that will be converted to a variogram matrix for the Husler-Reiss distribution.
#' The function draws uniform random samples U[0,1] and defines a matrix A. The multiplication of t(A)*A provides a positive definite matrix with all positive eigenvalues.
#' @param A An integer for the dimension of a positive definite matrix
#'
#' @return A dxd positive definite matrix.
#' @export
#'
#' @examples
CovPD <- function(d){
A <- matrix(runif(d^2)*2-1, ncol=d)
Sigma <- t(A) %*% A
if(all(eigen(Sigma)$values>0)){
return(Sigma)
}
}
#'
#' @description
#' Converts a covariance matrix to a variogram matrix that will be used for the Husler-Reiss distribution.
#'
#' @param Sigma A positive definite covariance matrix.
#'
#' @return A variogram matrix induced by the covariance matrix.
#' @export
#'
#' @examples
Cov2Vario <- function(Sigma){
d=dim(Sigma)[1]
Variogram=matrix(rep(NA,d^2),d,d)
for(i in 1:d){
for(j in i:d){
Variogram[i,j]=Sigma[i,i]+Sigma[j,j]-2*Sigma[i,j]
}
}
Variogram[!upper.tri(Variogram)]=0
Variogram=t(Variogram)+Variogram
return(Variogram)
}
Sig=CovPD(4)
set.seed(1234)
Sig=CovPD(4)
Sig
GammaMtx=Cov2Vario(Sigma = Sig)
GammaMtx
SetC=c(1,2)
SetD=c(3,4)
J=2
GammaMtx=Cov2Vario(Sigma = Sig)
SetC=c(1,2)
SetD=c(3,4)
J=2
Gam=GammaMtx
##  Calculate a conditional covariance matrix
conMtx=Gam[1:2,1:2]-Gam[1:2,-(1:2)]%*%solve(Gam[-(1:2),-(1:2)])%*%Gam[-(1:2),1:2]
const=1/rep(1,J)%*%solve(Gam[-(1:2),-(1:2)])%*%rep(1,J)
const=as.numeric(const)
b=rep(1,2)-Gam[1:2,-(1:2)]%*%solve(Gam[-(1:2),-(1:2)])%*%rep(1,J)
SigIgivenJ=-0.5*(conMtx+const*b%*%t(b))
cov2cor(SigIgivenJ)[1,2]
set.seed(457)
GammaMtx=Cov2Vario(Sigma = CovPD(d=5))
cov.mat=Gamma2Sigma(Gamma, k = 3)
library(graphicalExtremes)
cov.mat=Gamma2Sigma(Gamma, k = 3)
cov.mat=Gamma2Sigma(GammaMtx, k = 3)
cov.mat
SetC=c(1,2)
SetD=c(3,4)
J=2
Gam=GammaMtx
##  Calculate a conditional covariance matrix
conMtx=Gam[1:2,1:2]-Gam[1:2,-(1:2)]%*%solve(Gam[-(1:2),-(1:2)])%*%Gam[-(1:2),1:2]
const=1/rep(1,J)%*%solve(Gam[-(1:2),-(1:2)])%*%rep(1,J)
const=as.numeric(const)
b=rep(1,2)-Gam[1:2,-(1:2)]%*%solve(Gam[-(1:2),-(1:2)])%*%rep(1,J)
set.seed(457)
GammaMtx=Cov2Vario(Sigma = CovPD(d=5))
Gam=GammaMtx
Gam
set.seed(457)
GammaMtx=Cov2Vario(Sigma = CovPD(d=4))
Gam=GammaMtx
cov.mat=Gamma2Sigma(GammaMtx, k = 3)
SetC=c(1,2)
SetD=c(3,4)
J=2
##  Calculate a conditional covariance matrix
conMtx=Gam[1:2,1:2]-Gam[1:2,-(1:2)]%*%solve(Gam[-(1:2),-(1:2)])%*%Gam[-(1:2),1:2]
const=1/rep(1,J)%*%solve(Gam[-(1:2),-(1:2)])%*%rep(1,J)
const=as.numeric(const)
b=rep(1,2)-Gam[1:2,-(1:2)]%*%solve(Gam[-(1:2),-(1:2)])%*%rep(1,J)
SigIgivenJ=-0.5*(conMtx+const*b%*%t(b))
cov2cor(SigIgivenJ)[1,2]
cov.mat
cov.mat[3,3]^(-1)
cov.mat[1:2,1:2]-cov.mat[3,3]^(-1)*t(cov.mat[1:2,3,1:2,3])%*%cov.mat[1:2,3,1:2,3]
t(cov.mat[1:2,3,1:2,3])%*%cov.mat[1:2,3,1:2,3]
cov.mat[1:2,1:2]-cov.mat[3,3]^(-1)*cov.mat[1:2,3,1:2,3]%*%t(cov.mat[1:2,3,1:2,3])
cov.mat[1:2,3,1:2,3]
cov.mat[1:2,3]%*%t(cov.mat[1:2,3])
cov.mat[1:2,3]
cov.mat[1:2,1:2]-cov.mat[3,3]^(-1)*cov.mat[1:2,3]%*%t(cov.mat[1:2,3])
SigIgivenJ
cov2cor(SigIgivenJ)[1,2]
CondCov=cov.mat[1:2,1:2]-cov.mat[3,3]^(-1)*cov.mat[1:2,3]%*%t(cov.mat[1:2,3])
cov2cor(CondCov)
cov2cor(SigIgivenJ)[1,2]
cov2cor(SigIgivenJ)[1,2]
cov2cor(CondCov)
CondCov
SigIgivenJ
Gam
matrix(diag(c(1,1,1,1)))
matrix(diag(c(1,1,1,1)),4,4)
matrix(rep(1,16),4,4)
Phi=matrix(diag(c(1,1,1,1)),4,4)-(1/4)*matrix(rep(1,16),4,4)
Phi
(-0.5)*Gam
Phi%*%(-0.5)*Gam%*%Phi
Phi
Phi%*%((-0.5)*Gam)%*%Phi
SigmaG=Phi%*%((-0.5)*Gam)%*%Phi
SigG=Phi%*%((-0.5)*Gam)%*%Phi
SigG
set.seed(457)
Gam=Cov2Vario(Sigma = CovPD(d=3))
Gam
Phi=matrix(diag(c(1,1,1)),3,3)-(1/3)*matrix(rep(1,12),3,3)
SigG=Phi%*%((-0.5)*Gam)%*%Phi
Phi=matrix(diag(c(1,1,1)),3,3)-(1/3)*matrix(rep(1,9),3,3)
SigG=Phi%*%((-0.5)*Gam)%*%Phi
SigG[1:2,1:2]-(1/Sig[3,3])*SigG[1:2,3]%*%SigG[3,1:2]
(1/Sig[3,3])
SigG[1:2,3]%*%SigG[3,1:2]
SigG[1:2,1:2]-(1/Sig[3,3])*t(SigG[1:2,3])%*%SigG[3,1:2]
t(SigG[1:2,3])%*%SigG[3,1:2]
t(SigG[1:2,3])
SigG[3,1:2]
SigG[1:2,3]%*%t(SigG[3,1:2])
CondSig=SigG[1:2,1:2]-(1/Sig[3,3])*SigG[1:2,3]%*%t(SigG[3,1:2])
CondSig
cov2cor(CondSig)
Gam
cov.mat=Gamma2Sigma(Gam, k = 3)
cov2cor(cov.mat)
cov2cor(CondSig)
cov.mat=Gamma2Sigma(Gam, k = 2)
cov2cor(cov.mat)
cov2cor(CondSig)[1,2]
Gamma2Sigma(Gam, k = 3)
Gam
cov.mat=Gamma2Sigma(Gam, k = 3)
cov2cor(cov.mat)[1,2]
cov2cor(CondSig)[1,2]
7.189175/sqrt(2)
##  Tukey's procedure
library(agricolae)
choose(31,2)
qtukey(p = 0.95,nmeans = choose(31,2),df = 94*465-465) #df=N-k
qtukey(p = 0.95,nmeans = choose(31,2),df = 94*465-465)/sqrt(2) #df=N-k
#round(Zmtx,4)
#(abs(Zmtx)<1.96)
#Zmtx[Zmtx<1.96]
qnorm(p = 0.025/choose(31,2),mean = 0,sd = 1,lower.tail = FALSE)
qnorm(p = 0.025/choose(31,2),mean = 0,sd = 1,lower.tail = FALSE)*sqrt(2)
qtukey(p = 0.95,nmeans = choose(31,2),df = 94*465-465)/sqrt(2) #df=N-k
qtukey(p = 0.95,nmeans = 5,df = 30)
qtukey(p = 0.95,nmeans = 5,df = 30)/sqrt(2)
qtukey(p = 0.95,nmeans = choose(31,2),df = 94*465-465)/sqrt(2) #df=N-k
0.05/choose(31,2)/2
qnorm(p = 0.05/choose(31,2)/2,mean = 0,sd = 1,lower.tail = FALSE)
#round(Zmtx,4)
#(abs(Zmtx)<1.96)
#Zmtx[Zmtx<1.96]
qnorm(p = 0.025/choose(31,2),mean = 0,sd = 1,lower.tail = FALSE)
qnorm(p = 0.05/choose(31,2)/2,mean = 0,sd = 1,lower.tail = FALSE)
qt(0.05/choose(31,2)/2,df = 94*465-465,lower.tail = F)
qt(0.05/choose(31,2)/2,df = 94*465-31,lower.tail = F)
qtukey(p = 0.95,nmeans = choose(31,2),df = 94*465-31)/sqrt(2) #df=N-k
qtukey(p = 0.95,nmeans = 31,df = 94*465-31)/sqrt(2) #df=N-k
setwd("/Users/jlee/Desktop/PTC")
