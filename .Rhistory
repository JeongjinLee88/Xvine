BoxOut1K02=XVineBoxplot(N = 1000, qt = 0.02, ite = ite, XVS = XVS, RankT = T)
StrMtx <- matrix(c(1, 1, 2, 2, 4,
0, 2, 1, 3, 2,
0, 0, 3, 1, 3,
0, 0, 0, 4, 1,
0, 0, 0, 0, 5),5,byrow = T)
ParMtx <- matrix(c(0, 1.5, 2, 2.5, 2,
0, 0, 2, 2.5, 0.7,
0, 0, 0, 0.4, -0.3,
0, 0, 0, 0, 0.1,
0, 0, 0, 0, 0),5,byrow = T)
FamMtx <- matrix(c(0, 1, 2, 3, 4,
0, 0, 3, 4, 1,
0, 0, 0, 3, 1,
0, 0, 0, 0, 1,
0, 0, 0, 0, 0),5,byrow = T)
XVS=XVineSpec(M = StrMtx, Mmod = FamMtx, Mpar = ParMtx)
BoxOut1K02=XVineBoxplot(N = 1000, qt = 0.02, ite = ite, XVS = XVS, RankT = T)
start <- Sys.time()
BoxOut1K05=XVineBoxplot(N = 1000, qt = 0.05, ite = ite, XVS = XVS, RankT = T)
print( Sys.time() - start )
BoxOut1K1=XVineBoxplot(N = 1000, qt = 0.1, ite = ite, XVS = XVS, RankT = T)
load_all()
BoxPar1K=XVineBoxPlotEachPar(BoxOut1 = BoxOut1K02$MLE_WithoutFamSel,BoxOut2 = BoxOut1K05$MLE_WithoutFamSel,BoxOut3 = BoxOut1K1$MLE_WithoutFamSel,
RowInd = 1,ColInd = 2,XVS = XVS)
BoxPar1K$BoxOnePar+labs(title="",x="", y = "") +
scale_x_discrete(labels=c("k=40","k=100","k=200"))
check()
usethis::use_import_from("ggplot2","scale_fill_manual")
check()
usethis::use_import_from("ggplot2","scale_fill_manual")
check()
load_all()
check()
XvinePa50dim
XVinePa50dim=XvinePa50dim
##  Exported data
usethis::use_data(XVinePa50dim)
##  Exported data
usethis::use_data(XVinePa50dim,overwrite = TRUE)
use_r("XVinePa50dim")
##  Exported data
usethis::use_data(XVinePa50dim)
head(XVinePa50dim)
str(XVinePa50dim)
is.matrix(XVinePa50dim)
is.data.frame(XVinePa50dim)
use_r("XVineFitOut")
use_r("XVineTrunOut")
load_all()
?XVinePa50dim
??XVinePa50dim
XVinePa50dim
load_all()
?XVinePa50dim
load("~/Documents/Xvine/data/XVinePa50dim.rda")
load_all()
install()
?XVinePa50dim
?XVine::XVinePa50dim
Xvine::XVinePa50dim
?Xvine::XVinePa50dim
??Xvine::XVinePa50dim
load_all()
?XVine::XVinePa50dim
?XVinePa50dim
XVinePa50dim
use_r("data")
load_all()
?XVinePa50dim
XVinePa50dim
load_all()
?XVinePa50dim
XVinePa50dim
XVinePa50dim
devtools::document()
rename_files("XVinePa50dim","data")
load_all()
?data
rename_files("data","XvineData")
rename_files("XvineData","XVineData")
XVineFitOut
str(XVineFitOut)
devtools::document()
pkgload::dev_help('XVinePa50dim')
save(XVineFitOut,file = "/Users/jlee/Desktop/XVine/Rdata/XVineFitOut.Rdata")
save(XVineTrunOut,file = "/Users/jlee/Desktop/XVine/Rdata/XVineTrunOut.Rdata")
?XVinePa50dim
?XVineData
XVineData
?XVineData
load_all()
check()
pkgdown::build_site()
library(Xvine)
library(graphicalExtremes)
FlightTest <- drop(graphicalExtremes::getFlightDelayData('delays', 'tcCluster', 'tcTest'))
library(Xvine)
library(graphicalExtremes)
library(VineCopula)
library(graphicalExtremes)
FlightTrain <- drop(graphicalExtremes::getFlightDelayData('delays', 'tcCluster', 'tcTrain'))
FlightTest <- drop(graphicalExtremes::getFlightDelayData('delays', 'tcCluster', 'tcTest'))
FlightDelay=rbind(FlightTrain,FlightTest)
FlightDelay
HRXVineVarioFlightOut=XVineModelFit(data = FlightDelay, N = 3600, XVS = NULL
, Rank = TRUE, Rank_chiL = FALSE, Rank_chi3 = FALSE
, Chi3_graph = FALSE, Rank_Vario = TRUE, Vario_graph = TRUE
, MST1_HR=TRUE, quan=0.13, tcfamset = c(1), pcfamset = c(0,1)
, selectioncrit = "AIC", trunclevel = 7, progress = TRUE
, treecritT1 = "variogram", treecritT2 = "tau", effsampsize = 10
, tau_threshold = 0.05, weights = NA, cores=1)
HRXVineVarioFlightOut=XVineModelFit(data = FlightDelay, N = 3600, XVS = NULL
, Rank = TRUE, Rank_chiL = TRUE, Rank_chi3 = TRUE
, Chi3_graph = TRUE, Rank_Vario = TRUE, Vario_graph = TRUE
, MST1_HR=TRUE, quan=0.13, tcfamset = c(1), pcfamset = c(0,1)
, selectioncrit = "AIC", trunclevel = 7, progress = TRUE
, treecritT1 = "variogram", treecritT2 = "tau", effsampsize = 10
, tau_threshold = 0.05, weights = NA, cores=1)
HRXVineVarioFlightOut$ChiLPlot
HRXVineVarioFlightOut$VarioPlot
dim(FlightDelay)
FlightTrain
summary(FlightTrain)
dim(FlightTrain)
dimnames(FlightTrain)
dimnames(FlightTrain)[[1]]
summary(dimnames(FlightTrain)[[1]])
dimnames(FlightTrain)[[1]][1]
dimnames(FlightTrain)[[1]][1764]
dim(FlightTrain)
1764*0.95
1764*0.05
# Get IATAs from Texas cluster
IATAs <- getFlightDelayData('IATAs', 'tcCluster')
# Plot airports + connections (indicating number of flights by thickness)
plotFlights(
IATAs,
useAirportNFlights = TRUE,
useConnectionNFlights = TRUE
)
# Use train-test-split and threshold p from article
matEst <- drop(getFlightDelayData('delays', 'tcCluster', 'tcTrain'))
matVal <- drop(getFlightDelayData('delays', 'tcCluster', 'tcTest'))
p <- 0.95
# Compute the empirical extremal correlation matrix
emp_chi_mat <- emp_chi(matEst, p = p)
# Utility function to plot fitted parameters against true/empirical ones
plot_fitted_params <- function(G0, G1, xlab = 'Empirical', ylab = 'Fitted'){
return(
ggplot()
+ geom_point(aes(
x = G0[upper.tri(G0)],
y = G1[upper.tri(G1)]
))
+ geom_abline(slope = 1, intercept = 0)
+ xlab(xlab)
+ ylab(ylab)
+ theme(
axis.text.x = element_text(color = "black",face="bold", size=14),
axis.text.y = element_text(face="bold", size =14),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
panel.background = element_rect(fill = "white",
colour = "white",
linewidth = 0.5, linetype = "solid"),
panel.grid.major = element_line(linewidth = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(linewidth = 0.25, linetype = 'solid',
colour = "grey"),
plot.margin = margin(1, 0.5, 1, 0.5, "cm"))
+ scale_x_continuous(n.breaks = 5,limits = c(0.15,0.8))
+ scale_y_continuous(limits=c(0.15,0.8))
)
}
model_fit <- fmpareto_graph_HR(
data = FlightDelay,
graph = flight_graph,
p = p,
method = "vario"
)
# Compute undirected flights per connection between selected airports
nYears <- dim(flights$flightCounts)[3]
flightsPerConnection <- apply(flights$flightCounts[IATAs,IATAs,], c(1, 2), sum)
model_fit <- fmpareto_graph_HR(
data = FlightDelay,
graph = flight_graph,
p = p,
method = "vario"
)
# Compute undirected flights per connection between selected airports
nYears <- dim(flights$flightCounts)[3]
flightsPerConnection <- apply(flights$flightCounts[IATAs,IATAs,], c(1, 2), sum)
library(graphicalExtremes)
flights=graphicalExtremes::flights
# Compute undirected flights per connection between selected airports
nYears <- dim(flights$flightCounts)[3]
flightsPerConnection <- apply(flights$flightCounts[IATAs,IATAs,], c(1, 2), sum)
flightsPerConnectionUD <- flightsPerConnection + t(flightsPerConnection)
# Make flight graph from adjacency matrix
A <- 1 * (flightsPerConnectionUD > nYears * 12)
flight_graph <- graph_from_adjacency_matrix(A, diag = FALSE, mode = "undirected")
flight_graph <- graphicalExtremes::graph_from_adjacency_matrix(A, diag = FALSE, mode = "undirected")
flight_graph <- igraph::graph_from_adjacency_matrix(A, diag = FALSE, mode = "undirected")
# Plot flight graph
plotFlights(IATAs, graph = flight_graph, clipMap = 1.3, xyRatio = 1)
model_fit <- fmpareto_graph_HR(
data = FlightDelay,
graph = flight_graph,
p = p,
method = "vario"
)
# Plot fitted parameters
ChiFlight_Domain=plot_fitted_params(emp_chi_mat, Gamma2chi(model_fit))
# Fit the model
model_fit <- fmpareto_graph_HR(
data = matEst,
graph = flight_graph,
p = p,
method = "vario"
)
# Compute likelihood/ICs
flights_loglik_graph <- loglik_HR(
data = matVal,
p = p,
graph = flight_graph,
Gamma = model_fit
)
# 3. Fit the general model
rholist <- seq(0,0.4,by=0.05)
flights_eglearn_fit <- eglearn(matEst, p = p, rholist = rholist, complete_Gamma = TRUE)
# Compute likelihood/ICs
flights_loglik <- sapply(seq_along(rholist), FUN = function(j) {
loglik_HR(
data = matVal,
p = p,
Gamma = flights_eglearn_fit$Gamma[[j]],
graph = flights_eglearn_fit$graph[[j]]
)
})
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
xlab("rho") +
ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
library(ggplot2)
best_index <- which.max(flights_loglik['loglik',])
best_index
cat('Best rho =', rholist[best_index], '\n')
#Best rho = 0.1
cat('Corresponding test-loglikelihood =', flights_loglik['loglik', best_index])
best_graph <- flights_eglearn_fit$graph[[best_index]]
best_Gamma <- flights_eglearn_fit$Gamma[[best_index]]
FlightEGlearn=plotFlightsN(IATAs, graph = best_graph, clipMap = 1, xyRatio = 1)
plot_fitted_params(emp_chi_mat, Gamma2chi(best_Gamma))
plot_fitted_params
G0=emp_chi_mat;G1=Gamma2chi(best_Gamma)
ggplot()
ggplot()+ geom_point(aes(
x = G0[upper.tri(G0)],
y = G1[upper.tri(G1)]
))
+ geom_abline(slope = 1, intercept = 0)
ggplot()+ geom_point(aes(
x = G0[upper.tri(G0)],
y = G1[upper.tri(G1)]
))+ geom_abline(slope = 1, intercept = 0)+ theme(
axis.text.x = element_text(color = "black",face="bold", size=14),
axis.text.y = element_text(face="bold", size =14),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
panel.background = element_rect(fill = "white",
colour = "white",
linewidth = 0.5, linetype = "solid"),
panel.grid.major = element_line(linewidth = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(linewidth = 0.25, linetype = 'solid',
colour = "grey"),
plot.margin = margin(1, 0.5, 1, 0.5, "cm"))+ scale_x_continuous(n.breaks = 5,limits = c(0.15,0.8))+
scale_y_continuous(limits=c(0.15,0.8))
ggplot()+ geom_point(aes(
x = G0[upper.tri(G0)],
y = G1[upper.tri(G1)]
))+ geom_abline(slope = 1, intercept = 0)+ theme(
axis.text.x = element_text(color = "black",face="bold", size=14),
axis.text.y = element_text(face="bold", size =14),
axis.title.x = element_text(color="black", size=14, face="bold"),
axis.title.y = element_text(color="black", size=14, face="bold"),
panel.background = element_rect(fill = "white",
colour = "white",
linewidth = 0.5, linetype = "solid"),
panel.grid.major = element_line(linewidth = 0.5, linetype = 'solid',
colour = "grey"),
panel.grid.minor = element_line(linewidth = 0.25, linetype = 'solid',
colour = "grey"),
plot.margin = margin(1, 0.5, 1, 0.5, "cm"))+ scale_x_continuous(n.breaks = 5,limits = c(0.1,0.8))+
scale_y_continuous(limits=c(0.3,0.8))
ggplot()+ geom_point(aes(
x = G0[upper.tri(G0)],
y = G1[upper.tri(G1)]
))+ geom_abline(slope = 1, intercept = 0)
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
xlab("rho") +
ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
xlab("rho") +
ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
xlab("rho") +
ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
ggplot2::xlab("rho") +
ggplot2::ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
ggplot2::xlab("rho") +
ggplot2::ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
ggplot2::sec.axis = sec_axis(
ggplot2:::sec.axis
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
ggplot2::xlab("rho") +
ggplot2::ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = ggplot2::sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
flights_loglik
rholist
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
ggplot2::xlab("rho") +
ggplot2::ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = ggplot2::sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
rlang::last_trace()
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot(mapping = aes(x = rholist, y = flights_loglik['loglik', ]))
ggplot(mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
ggplot(mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted")
ggplot(
mapping = aes(x = rholist, y = flights_loglik['loglik', ])) +
ggplot2::geom_line() +
geom_point(shape = 21, size = 3, stroke = 1, fill = "white") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_graph['loglik']), lty = "dashed") +
ggplot2::geom_hline(aes(yintercept = flights_loglik_tree['loglik']), lty = "dotted") +
ggplot2::xlab("rho") +
ggplot2::ylab("Log-likelihood") +
scale_x_continuous(
breaks = rholist,
labels = round(rholist, 3),
sec.axis = ggplot2::sec_axis(
trans = ~., breaks = rholist,
labels = sapply(
flights_eglearn_fit$graph,
igraph::gsize
),
name = "Number of edges"
)
)
##  After rho is obtained, fit the entire data set into 'eglearn'
flights_eglearn_fit <- eglearn(FlightDelay, p = p, rholist = rholist, complete_Gamma = TRUE)
# Compute likelihood/ICs
flights_loglik <- sapply(seq_along(rholist), FUN = function(j) {
loglik_HR(
data = matVal,
p = p,
Gamma = flights_eglearn_fit$Gamma[[j]],
graph = flights_eglearn_fit$graph[[j]]
)
})
best_index <- which.max(flights_loglik['loglik',])
cat('Best rho =', rholist[best_index], '\n')
flights_loglik['loglik',]
##  After rho is obtained, we use the entire data set to find empirical pairwise tail dependence?
emp_chi_mat <- emp_chi(FlightDelay, p = p)
flights_loglik <- sapply(seq_along(rholist), FUN = function(j) {
loglik_HR(
data = FlightDelay,
p = p,
Gamma = flights_eglearn_fit$Gamma[[j]],
graph = flights_eglearn_fit$graph[[j]]
)
})
best_index <- which.max(flights_loglik['loglik',])
best_index
cat('Best rho =', rholist[best_index], '\n')
flights_loglik['loglik',]
