[{"path":"https://jeongjinlee88.github.io/Xvine/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 Xvine authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/articles/XvineWorkflow.html","id":"load-required-packages-","dir":"Articles","previous_headings":"","what":"1. Load required packages.","title":"XvineWorkflow","text":"X-Vine package requires packages: VineCopula graphicalExtremes.","code":"library(Xvine) library(VineCopula)"},{"path":"https://jeongjinlee88.github.io/Xvine/articles/XvineWorkflow.html","id":"x-vine-specification-","dir":"Articles","previous_headings":"","what":"2. X-Vine specification.","title":"XvineWorkflow","text":"X-Vine specification \\((\\mathcal{V},\\mathcal{R},\\mathcal{C})\\) consists three components; vine tree structure matrix, family matrix bivariate parametric (tail) copula families, associated parameter matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/articles/XvineWorkflow.html","id":"simulation-from-x-vine-models-","dir":"Articles","previous_headings":"","what":"3. Simulation from X-Vine models.","title":"XvineWorkflow","text":"Given X-Vine specification \\((\\mathcal{V},\\mathcal{R},\\mathcal{C})\\), function XVineSim generate random samples \\(\\boldsymbol{Z}^{(j)}\\sim R(\\boldsymbol{z})\\mathbb{}(Z^{(j)}<1)\\) \\(j=1,\\ldots,d\\).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/articles/XvineWorkflow.html","id":"simulation-from-multivariate-pareto-distribution-","dir":"Articles","previous_headings":"","what":"4. Simulation from multivariate Pareto distribution.","title":"XvineWorkflow","text":"simulate X-vine multivariate Pareto distribution \\(\\boldsymbol{Y}_1,\\ldots,\\boldsymbol{Y}_n\\), function ParetoSim follows exact simulation multivariate Pareto distribution \\(\\boldsymbol{Y}\\), using X-vine specification. can easily switch multivariate Pareto samples inverted-Pareto samples taking reciprocal \\(\\boldsymbol{Z}_i=1/\\boldsymbol{Y}_i\\).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/articles/XvineWorkflow.html","id":"sequential-parameter-estimation-for-x-vine-models-","dir":"Articles","previous_headings":"","what":"5. Sequential Parameter Estimation for X-Vine models.","title":"XvineWorkflow","text":"order implement sequential parameter estimation, sufficient use structure matrix diagonal elements put increasing order. , use first structure matrix permuted structure matrices define corresponding max matrix find appropriate arguments conditional bivariate copula densities. Given vine tree structure selected bivariate parametric families, implement maximum likelihood methods estimate parameters calculate empirical dependence measures edge tree sequentially. function XVineSeqEst returns list three components: matrix parameter estimates edge tree stored Params. matrix dependence measures stored DepMeasure. matrix effective sample sizes edge tree stored EffectSamp. code , use either multivariate inverted-Pareto samples limiting distribution rank-transformed data.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/articles/XvineWorkflow.html","id":"compare-the-matrix-of-parameter-estimates-with-the-specified-parameter-values","dir":"Articles","previous_headings":"0.0.5 5. Sequential Parameter Estimation for X-Vine models.","what":"Compare the matrix of parameter estimates with the specified parameter values","title":"XvineWorkflow","text":"","code":"round(SeqEstOut$Params,2) # Parameter estimates #>      [,1] [,2] [,3] [,4]  [,5] #> [1,]    0 1.42 2.00 2.53  2.04 #> [2,]    0 0.00 1.58 2.32  0.68 #> [3,]    0 0.00 0.00 0.34 -0.31 #> [4,]    0 0.00 0.00 0.00  0.10 #> [5,]    0 0.00 0.00 0.00  0.00 round(XVS$pmat[,,1],2) # Parameter values #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    0  1.5    2  2.5  2.0 #> [2,]    0  0.0    2  2.5  0.7 #> [3,]    0  0.0    0  0.4 -0.3 #> [4,]    0  0.0    0  0.0  0.1 #> [5,]    0  0.0    0  0.0  0.0"},{"path":"https://jeongjinlee88.github.io/Xvine/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jeongjin Lee. Author, maintainer. Anna Kiriliouk. Author. Johan Segers. Author.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lee J, Kiriliouk , Segers J (2024). Xvine: Statistical Modelling Multivariate Extremes via Vine Structures. https://github.com/JeongjinLee88/Xvine, https://jeongjinlee88.github.io/Xvine/.","code":"@Manual{,   title = {Xvine: Statistical Modelling for Multivariate Extremes via Vine Structures},   author = {Jeongjin Lee and Anna Kiriliouk and Johan Segers},   year = {2024},   note = {https://github.com/JeongjinLee88/Xvine, https://jeongjinlee88.github.io/Xvine/}, }"},{"path":"https://jeongjinlee88.github.io/Xvine/index.html","id":"x-vine-models-for-multivariate-extremes","dir":"","previous_headings":"","what":"Statistical Modelling for Multivariate Extremes via Vine Structures","title":"Statistical Modelling for Multivariate Extremes via Vine Structures","text":"Xvine package designed analyze extremal dependence multivariate extremes using graphical structure regular vines, described Kiriliouk et al. (2023). modelling approach provides flexibility enables exploration sparsity. Computationally, package employs recursive approaches based bivariate building blocks. key components contain simulation X-vine models, sequential parameter estimation, selection bivariate parametric families, vine structure selection.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Statistical Modelling for Multivariate Extremes via Vine Structures","text":"GitHub version can downloaded via:","code":"#install.packages(\"devtools\") devtools::install_github(\"JeongjinLee88/Xvine\")"},{"path":"https://jeongjinlee88.github.io/Xvine/index.html","id":"workflow","dir":"","previous_headings":"","what":"Workflow","title":"Statistical Modelling for Multivariate Extremes via Vine Structures","text":"X-vine specification Simulation Pareto distribution Sequential parameter estimation via recursive approaches Parametric family selection Vine structure selection","code":"XVineSpec(M = StrMtx, Mmod = FamMtx, Mpar = ParMtx) Dat_P=ParetoSim(n = 2000, XVS = XVS) # Pareto scale XVineSeqEst(data = Dat_P, Rank = T, qt = 0.05, XVS=XVS, method = 'mle')"},{"path":[]},{"path":"https://jeongjinlee88.github.io/Xvine/reference/CondTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Bivariate tail copula with the second argument being conditioned — CondTC","title":"Bivariate tail copula with the second argument being conditioned — CondTC","text":"CondTC() evaluates univariate distribution bivariate tail copula given one arguments less 1, \\(\\Lambda_{1|2}(u_1=x_1|x_2;\\theta)\\) \\(0< x_2 <1\\).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/CondTC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bivariate tail copula with the second argument being conditioned — CondTC","text":"","code":"CondTC(x1, x2, par, family)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/CondTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bivariate tail copula with the second argument being conditioned — CondTC","text":"x1 numeric vector first argument bivariate tail copula. x2 numeric vector second argument bivariate tail copula. par numeric value parameter values. family numeric vector indicating list bivariate tail copulas. available tail copula families : 1=Husler-Reiss 2=Negative logistic 3=Logistic 4=Dirichlet","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/CondTC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bivariate tail copula with the second argument being conditioned — CondTC","text":"numeric vector bivariate tail copula fixed argument.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/CondTC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Bivariate tail copula with the second argument being conditioned — CondTC","text":"Kiriliouk, ., Lee, J., & Segers, J. (2023). X-Vine Models Multivariate Extremes. arXiv preprint arXiv:2312.15205.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/InvTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile function of a bivariate tail copula — InvTC","title":"Quantile function of a bivariate tail copula — InvTC","text":"Conditioning second argument bivariate tail copula less 1, \\(x_1 < 1\\), function InvTC() computes quantiles bivariate tail copula, \\(r^{-1}_{2|1}(w_2|u_1=x_1;\\theta)\\) \\(0<w_2<1\\). available tail copula families : 1=Husler-Reiss 2=Negative logistic 3=Logistic 4=Dirichlet details explicit form tail copula densities, refer Appendix F.1 Kiriliouk, ., Lee, J., & Segers, J. (2023).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/InvTC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile function of a bivariate tail copula — InvTC","text":"","code":"InvTC(w2, u1, par, family)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/InvTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile function of a bivariate tail copula — InvTC","text":"w2 numeric vector first argument bivariate tail copula. u1 numeric vector second argument conditioned \\(u_1 < 1\\) bivariate tail copula. par numeric parameter values. family numeric vector indicating list tail copula families.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/InvTC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile function of a bivariate tail copula — InvTC","text":"numeric vector quantile values.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/InvTC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quantile function of a bivariate tail copula — InvTC","text":"Kiriliouk, ., Lee, J., & Segers, J. (2023). X-Vine Models Multivariate Extremes. arXiv preprint arXiv:2312.15205.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiInvPa.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood function for bivariate inverted-Pareto density — LL.BiInvPa","title":"Log-likelihood function for bivariate inverted-Pareto density — LL.BiInvPa","text":"LL.BiInvPa calculates negative log-likelihood bivariate inverted-Pareto density. details inverted-Pareto distribution, refer Kiriliouk, ., Lee, J., & Segers, J. (2023).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiInvPa.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood function for bivariate inverted-Pareto density — LL.BiInvPa","text":"","code":"LL.BiInvPa(par, x, family)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiInvPa.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood function for bivariate inverted-Pareto density — LL.BiInvPa","text":"par Numeric; parameter bivariate inverted-Pareto densities x \\(N\\times 2\\) data matrix bivariate inverted-Pareto distribution family integer; indicates type bivariate tail copula families. Possible tail copula families include: 1=Husler-Reiss 2=Negative Logistic 3=Logistic 4=Dirichlet","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiInvPa.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood function for bivariate inverted-Pareto density — LL.BiInvPa","text":"Numeric; negative log-likelihood value","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiInvPa.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Log-likelihood function for bivariate inverted-Pareto density — LL.BiInvPa","text":"Kiriliouk, ., Lee, J., & Segers, J. (2023). X-Vine Models Multivariate Extremes. arXiv preprint arXiv:2312.15205.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Log-likelihood function for bivariate tail copula densities on product space — LL.BiTC","title":"Log-likelihood function for bivariate tail copula densities on product space — LL.BiTC","text":"LL.BiTC calculates negative log-likelihood bivariate tail copula density \\(r\\) product space uniform margins. bivariate tail copula \\(r(x_1,x_2)\\) \\(x_2<1\\) corresponds bivariate inverted-Pareto density, normalizing constant can ignored 1. function passed function mleBiTC() finding ML estimates.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiTC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Log-likelihood function for bivariate tail copula densities on product space — LL.BiTC","text":"","code":"LL.BiTC(par, x, family)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Log-likelihood function for bivariate tail copula densities on product space — LL.BiTC","text":"par Numeric; parameter bivariate tail copulas x \\(N\\times 2\\) data matrix bivariate inverted-Pareto distribution second column less 1 family integer; indicates type bivariate tail copula families. Possible tail copula families include: 1=Husler-Reiss 2=Negative Logistic 3=Logistic 4=Dirichlet","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/LL.BiTC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Log-likelihood function for bivariate tail copula densities on product space — LL.BiTC","text":"Numeric; negative log-likelihood value","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParRangeTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Range of parameters for tail copula families — ParRangeTC","title":"Range of parameters for tail copula families — ParRangeTC","text":"ParRangeTC specifies proper range parameters tail copula families. range specification helps convergence Optimize command.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParRangeTC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Range of parameters for tail copula families — ParRangeTC","text":"","code":"ParRangeTC(family)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParRangeTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Range of parameters for tail copula families — ParRangeTC","text":"family Integer; indicates type bivariate tail copula densities. Possible tail copula families include: 1=Husler-Reiss 2=Negative Logistic 3=Logistic 4=Dirichlet","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParRangeTC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Range of parameters for tail copula families — ParRangeTC","text":"numeric vector; specifies range parameter corresponding tail copula density","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation from multivariate Pareto distribution — ParetoSim","title":"Simulation from multivariate Pareto distribution — ParetoSim","text":"ParetoSim() generates multivariate Pareto random samples Pareto margins rejection sampling. Drawing uniform samples \\(k \\{1,\\ldots,d}\\), \\(k\\)th conditioning index 'k' passed function XVineSim() calculate extremal function. details X-vine simulation algorithm, refer Kiriliouk, ., Lee, J., & Segers, J. (2023). details exact simulation algorithm, refer Engelke, S., & Hitz, . S. (2020).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation from multivariate Pareto distribution — ParetoSim","text":"","code":"ParetoSim(n, XVS)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation from multivariate Pareto distribution — ParetoSim","text":"n Integer; number d-dimensional observations generate XVS list three matrix components conditioning variable: reproduced structure matrices family matrices parameter matrices details specification argument XVS, see XVineSpec().","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation from multivariate Pareto distribution — ParetoSim","text":"\\(n\\times d\\) data matrix multivariate Pareto samples Pareto margins.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoSim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation from multivariate Pareto distribution — ParetoSim","text":"Kiriliouk, ., Lee, J., & Segers, J. (2023). X-Vine Models Multivariate Extremes. arXiv preprint arXiv:2312.15205. Engelke, S., & Hitz, . S. (2020). Graphical models extremes. Journal Royal Statistical Society Series B: Statistical Methodology, 82(4), 871-932.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation from multivariate Pareto distribution — ParetoSim","text":"","code":"##  A 5-dim X-vine model StrMtx <- matrix(c(1, 1, 2, 2, 4,                   0, 2, 1, 3, 2,                   0, 0, 3, 1, 3,                   0, 0, 0, 4, 1,                   0, 0, 0, 0, 5),5,byrow = TRUE)                    ParMtx <- matrix(c(0, 1.5, 2, 2.5, 2,                    0, 0, 2, 2.5, 0.7,                    0, 0, 0, 0.4, -0.3,                    0, 0, 0, 0, 0.1,                    0, 0, 0, 0, 0),5,byrow = TRUE)                     FamMtx <- matrix(c(0, 1, 2, 3, 4,                    0, 0, 3, 4, 1,                    0, 0, 0, 3, 1,                    0, 0, 0, 0, 1,                    0, 0, 0, 0, 0),5,byrow = TRUE)                     ##  X-Vine specification XVS=XVineSpec(M = StrMtx, Mmod = FamMtx, Mpar = ParMtx) ##  Generate multivariate Pareto random samples Dat_P=ParetoSim(n = 5000, XVS = XVS)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoTransRank.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform to multivariate Pareto samples via rank transformation — ParetoTransRank","title":"Transform to multivariate Pareto samples via rank transformation — ParetoTransRank","text":"ParetoTransRank transforms original data multivariate Pareto samples suitable margins (default: Pareto margins) via rank transformation.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoTransRank.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform to multivariate Pareto samples via rank transformation — ParetoTransRank","text":"","code":"ParetoTransRank(data, u_quan, scaleType = \"U\")"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoTransRank.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform to multivariate Pareto samples via rank transformation — ParetoTransRank","text":"data \\(n\\times d\\) data matrix u_quan numeric quantile, set lower enough quantile \\(u_{quan}\\(0,1)\\) scaleType character specifying type scales generated samples (default uniform scale: scaleType=\"U\"). possible scales: scaleType=\"P\": Pareto scale scaleType=\"E\": Exponential scale","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoTransRank.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Transform to multivariate Pareto samples via rank transformation — ParetoTransRank","text":"\\(N\\times d\\) pseudo-observations inverted Pareto distribution (default)","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoTransRank.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Transform to multivariate Pareto samples via rank transformation — ParetoTransRank","text":"Let \\(\\boldsymbol(X)_{}, =1,\\ldots,n\\) independent samples unkown distribution \\(F\\). Transform uniform margin via rank transformation \\(\\widehat{U}_{,j}=1-(rank_{,j}-0.5)/n\\), \\(rank_{,j}=\\sum_{s=1}^{n}\\mathbb{}(X_{s,j}\\le X_{,j})\\) maximal rank \\(X_{,j}\\) among \\(X_{1,j},\\ldots,X_{n,j}\\). scaled points \\((n/k)\\widehat{U}_i\\) \\(=1,\\ldots,n\\) \\(\\min\\widehat{U}_i<k/n\\) pseudo-observations inverted multivariate Pareto distribution. set \\(k\\\\{1,\\ldots,n\\}\\) \\(k\\) large \\(k/n\\) small. take reciprocal rescaled samples, Pareto scales. take negative log rescaled samples, exponential scales.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/ParetoTransRank.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform to multivariate Pareto samples via rank transformation — ParetoTransRank","text":"","code":"StrMtx <- matrix(c(1, 1, 2, 2, 4,              0, 2, 1, 3, 2,              0, 0, 3, 1, 3,              0, 0, 0, 4, 1,              0, 0, 0, 0, 5),5,byrow = TRUE) ParMtx <- matrix(c(0, 1.5, 2, 2.5, 2,                   0, 0, 2, 2.5, 0.7,                   0, 0, 0, 0.4, -0.3,                   0, 0, 0, 0, 0.1,                   0, 0, 0, 0, 0),5,byrow = TRUE) FamMtx <- matrix(c(0, 1, 2, 3, 4,                 0, 0, 3, 4, 1,                 0, 0, 0, 3, 1,                 0, 0, 0, 0, 1,                 0, 0, 0, 0, 0),5,byrow = TRUE) ## X-Vine specification (Vine structure, Bivariate parametric families, Parameters) XVS=XVineSpec(M = StrMtx, Mmod = FamMtx, Mpar = ParMtx) ##  Multivariate Pareto samples Dat_P=ParetoSim(n = 5000, XVS = XVS) # Pareto scale ##  Transform to pseudo-observations for inverted Pareto distribution Dat_U=ParetoTransRank(data = Dat_P, u_quan = 0.2, scaleType = \"U\") Dat_U #>           [,1]   [,2]   [,3]   [,4]   [,5] #>    [1,] 0.6705 0.7795 0.5045 0.6685 0.4025 #>    [2,] 1.1145 4.7915 0.8445 4.1625 4.4035 #>    [3,] 0.0695 0.1005 0.1265 0.0755 0.1395 #>    [4,] 0.7805 2.5135 0.8605 1.0925 4.5565 #>    [5,] 0.5445 0.7075 2.6865 1.1435 0.3465 #>    [6,] 1.9465 0.7025 0.6585 0.5855 0.2305 #>    [7,] 0.5535 0.5375 0.5685 0.8215 0.9335 #>    [8,] 0.7035 1.4365 0.9015 1.2375 2.3275 #>    [9,] 1.3175 0.3425 0.6805 0.5055 0.4175 #>   [10,] 0.6545 2.8895 0.8725 2.9155 2.7475 #>   [11,] 0.9955 0.8945 0.5965 0.8975 0.9835 #>   [12,] 3.0705 2.9965 3.1155 1.2635 0.7845 #>   [13,] 2.2445 1.5405 3.2095 1.1055 0.8365 #>   [14,] 1.3905 0.8925 3.5125 4.1825 0.4955 #>   [15,] 0.5845 0.4555 0.3725 0.3285 0.7175 #>   [16,] 0.6075 0.8495 0.8365 1.0415 1.9145 #>   [17,] 3.8535 2.3225 4.5495 4.3735 0.6135 #>   [18,] 1.2435 0.6535 0.6975 1.3175 1.4895 #>   [19,] 0.0745 0.0825 0.0515 0.0645 0.0635 #>   [20,] 1.2825 1.8015 2.2975 0.8655 1.6145 #>   [21,] 4.8415 1.9775 4.5505 4.0435 0.8775 #>   [22,] 1.0655 0.9565 2.0035 2.0935 0.9045 #>   [23,] 1.3345 0.3755 0.3775 0.3665 0.1985 #>   [24,] 0.5325 0.9665 0.9735 0.8195 1.7015 #>   [25,] 0.4015 0.1855 0.1755 0.2155 0.0915 #>   [26,] 0.0815 0.2595 0.1215 0.2465 0.0935 #>   [27,] 1.3875 0.2865 1.2345 0.9425 0.2505 #>   [28,] 0.7585 1.6085 0.8455 2.8805 2.9135 #>   [29,] 0.9745 1.4585 1.0185 1.5105 1.5095 #>   [30,] 0.9445 1.7055 0.8395 1.1995 0.7155 #>   [31,] 3.7325 0.8015 3.1475 3.6915 1.6255 #>   [32,] 0.2635 0.3235 0.1855 0.2145 0.2515 #>   [33,] 2.9285 0.8255 4.3415 3.7725 2.4705 #>   [34,] 0.8695 0.6645 0.4365 0.6805 0.6015 #>   [35,] 2.5825 1.5565 3.4455 3.7505 0.3945 #>   [36,] 4.0635 3.8425 4.5655 2.9715 0.9745 #>   [37,] 4.4095 3.0595 4.6725 4.5645 0.9395 #>   [38,] 1.6735 0.5675 0.7875 1.0105 2.0795 #>   [39,] 0.3615 3.1985 0.6695 3.1615 4.5765 #>   [40,] 1.5535 0.6825 3.1305 3.4325 0.5745 #>   [41,] 0.6165 0.9075 1.0905 1.9415 3.1985 #>   [42,] 1.1215 0.4745 0.6575 0.7525 0.2915 #>   [43,] 1.2715 0.7215 0.6145 0.5965 1.5455 #>   [44,] 0.9505 0.7625 1.1145 0.4125 0.5735 #>   [45,] 2.5125 0.7525 1.0485 0.4875 0.6615 #>   [46,] 0.7405 1.8205 1.4085 3.7155 3.7915 #>   [47,] 3.6725 0.6795 0.9355 1.0795 1.5675 #>   [48,] 3.2385 0.6245 3.3565 1.5325 0.3085 #>   [49,] 0.5795 1.7045 0.9565 1.5895 0.7665 #>   [50,] 0.2445 0.1715 0.3245 0.2615 0.1105 #>   [51,] 0.0205 0.0125 0.0115 0.0065 0.0295 #>   [52,] 1.0565 3.4475 1.7985 0.7145 1.8775 #>   [53,] 0.0195 0.1265 0.0295 0.0315 0.6715 #>   [54,] 0.6435 0.8235 0.8485 0.4735 1.2265 #>   [55,] 0.4895 0.3455 0.4145 0.4665 1.0815 #>   [56,] 0.4865 0.9795 0.5135 0.6405 2.0665 #>   [57,] 0.6905 0.4985 0.4245 0.2835 0.6665 #>   [58,] 4.4985 0.6955 1.3395 1.2555 1.9545 #>   [59,] 0.5135 0.3795 0.8185 0.7245 0.7555 #>   [60,] 0.9465 1.1405 0.5565 1.0655 1.1705 #>   [61,] 0.5505 0.0935 0.2135 0.1765 0.1755 #>   [62,] 0.8235 0.6565 0.5175 1.0305 2.1965 #>   [63,] 0.0945 0.3085 0.1345 0.1525 0.1265 #>   [64,] 2.3305 1.3095 0.8675 0.2085 0.3075 #>   [65,] 3.3495 1.0095 1.4545 1.0915 0.4675 #>   [66,] 0.5945 0.2085 0.2305 0.3385 0.4475 #>   [67,] 0.9125 0.4945 0.9695 0.7115 1.9275 #>   [68,] 2.3165 0.4425 0.2375 0.3085 0.6165 #>   [69,] 0.6475 1.4645 1.0225 1.0405 1.6585 #>   [70,] 0.3075 1.4085 0.3135 0.5925 0.7585 #>   [71,] 0.7335 0.5725 1.4505 0.9915 0.4355 #>   [72,] 2.4115 0.7945 0.7455 0.8125 2.0245 #>   [73,] 0.5105 0.3075 0.4505 0.4675 0.1935 #>   [74,] 1.7815 0.3395 0.2015 0.1615 0.0845 #>   [75,] 1.2365 2.6245 0.9675 1.3555 4.1435 #>   [76,] 0.3965 0.9895 0.3755 0.1945 1.6525 #>   [77,] 0.9185 3.7025 1.3745 2.6355 4.0995 #>   [78,] 2.8055 3.0985 4.8355 4.1245 0.7195 #>   [79,] 0.9985 0.2685 0.2595 0.2215 0.3175 #>   [80,] 4.7175 0.7815 3.1665 3.4165 3.5195 #>   [81,] 0.7455 0.4675 0.8625 0.8985 0.3515 #>   [82,] 0.0155 0.0025 0.0015 0.0045 0.0045 #>   [83,] 0.7525 0.2975 0.2815 0.2755 0.2015 #>   [84,] 0.0435 0.1065 0.0875 0.0105 0.2985 #>   [85,] 2.5785 0.9235 0.9885 0.9795 1.6605 #>   [86,] 3.1045 0.9765 1.3835 2.2795 2.9745 #>   [87,] 0.3235 0.2955 0.3545 0.2125 0.5665 #>   [88,] 0.7215 1.8445 0.7915 1.8675 3.7305 #>   [89,] 0.1675 2.0085 0.6365 0.2445 1.3945 #>   [90,] 0.3415 2.3525 0.5325 2.0765 4.3585 #>   [91,] 0.2915 0.6115 0.4765 0.4935 0.5585 #>   [92,] 0.5025 0.6545 0.3865 0.6255 1.7725 #>   [93,] 0.1525 0.0585 0.0645 0.1195 0.1465 #>   [94,] 0.3625 1.0455 0.6095 0.5655 0.5725 #>   [95,] 0.7265 4.9665 2.1395 4.9425 4.9955 #>   [96,] 2.0765 3.2535 4.0735 2.9355 0.6145 #>   [97,] 1.7485 3.8025 3.6415 1.9605 0.6995 #>   [98,] 0.9675 3.9495 2.9865 3.1165 3.5445 #>   [99,] 0.2285 0.3065 0.3825 0.5095 0.3635 #>  [100,] 2.1795 0.9515 1.0095 1.2035 2.5045 #>  [101,] 2.7925 1.5435 2.2925 1.0765 0.9025 #>  [102,] 0.1295 0.4225 0.1885 0.3405 0.7075 #>  [103,] 0.6585 0.6125 0.5725 0.6015 0.9915 #>  [104,] 2.1755 0.5135 0.8555 0.9985 0.6075 #>  [105,] 3.0455 0.9755 1.1735 1.4185 1.0005 #>  [106,] 0.6205 1.0345 0.8015 1.0045 4.0725 #>  [107,] 0.4835 0.9225 1.1005 0.6295 1.7035 #>  [108,] 3.2795 0.6895 2.7525 1.6765 1.0045 #>  [109,] 1.6795 0.9995 0.7015 0.9185 0.6695 #>  [110,] 0.0665 0.1295 0.0795 0.0855 0.5715 #>  [111,] 3.5945 0.7425 3.9635 4.2055 2.5275 #>  [112,] 0.6085 0.2295 0.2775 0.3275 0.1655 #>  [113,] 0.3985 1.2075 0.4875 1.4795 1.1955 #>  [114,] 0.5435 2.4465 0.9085 0.4895 3.7005 #>  [115,] 1.3125 1.3355 0.8565 1.4525 1.8475 #>  [116,] 0.4255 0.9545 0.6405 0.8905 3.2365 #>  [117,] 0.2785 0.2825 0.4205 0.2175 0.6095 #>  [118,] 1.8075 0.6765 1.0625 1.1205 0.8275 #>  [119,] 0.5175 3.2495 1.1505 1.1455 3.6745 #>  [120,] 0.7615 0.4145 0.3335 0.2695 0.5855 #>  [121,] 0.3845 0.7595 0.5195 0.3595 0.2045 #>  [122,] 4.6425 3.4005 4.4675 2.9815 0.9535 #>  [123,] 0.0655 0.0225 0.0325 0.0545 0.0225 #>  [124,] 1.3155 0.3745 1.5475 0.7815 0.8255 #>  [125,] 0.7565 0.7155 0.5495 0.8505 0.4635 #>  [126,] 0.2085 0.0555 0.1155 0.1415 0.1945 #>  [127,] 0.4085 0.3385 0.2455 0.3955 1.4525 #>  [128,] 0.3325 3.3085 0.7315 1.7495 3.3365 #>  [129,] 3.4845 2.0895 2.4715 0.8095 2.8335 #>  [130,] 0.7715 4.3185 2.1955 3.1005 4.7075 #>  [131,] 0.7545 4.7275 1.5445 4.7555 4.8545 #>  [132,] 3.3885 1.3805 3.3105 2.8815 0.7825 #>  [133,] 4.7865 3.5295 4.8455 4.5215 0.3035 #>  [134,] 3.2465 3.1685 2.1735 0.9965 2.3355 #>  [135,] 0.4555 3.0875 0.6895 2.5535 4.1645 #>  [136,] 3.7465 1.5025 3.7295 2.5195 0.8225 #>  [137,] 0.3035 0.2715 0.2735 0.3455 0.2265 #>  [138,] 2.6615 1.0015 1.0255 1.5455 0.9245 #>  [139,] 2.2895 1.1915 1.2935 1.8485 0.7885 #>  [140,] 0.1795 3.0125 0.5455 0.9235 2.2455 #>  [141,] 4.1495 1.1485 3.3895 1.6805 0.5875 #>  [142,] 1.1045 0.5555 0.3855 0.4365 1.3185 #>  [143,] 2.8035 0.2795 1.7265 1.2765 0.9215 #>  [144,] 1.9495 0.4475 0.7995 0.7545 0.6485 #>  [145,] 0.5745 4.9525 1.2295 4.8105 4.9035 #>  [146,] 0.5875 0.9115 0.9945 0.4275 0.6565 #>  [147,] 0.2795 3.5065 0.7085 2.8255 3.0705 #>  [148,] 0.6875 2.1365 1.1455 1.0515 0.9035 #>  [149,] 1.5285 0.8975 2.8645 1.2545 0.6555 #>  [150,] 0.6145 0.7935 0.7575 0.5435 0.8095 #>  [151,] 1.5845 2.3845 1.0455 0.9305 0.7875 #>  [152,] 0.0245 0.0245 0.0575 0.0485 0.0275 #>  [153,] 3.8715 0.3345 1.1355 1.2715 2.3255 #>  [154,] 3.7945 0.8055 1.6095 1.6045 0.9585 #>  [155,] 0.9385 0.4205 2.7215 3.0585 0.1895 #>  [156,] 0.8465 1.1895 0.4535 0.1345 0.3785 #>  [157,] 2.9355 0.1585 0.4375 0.8425 0.5095 #>  [158,] 1.0525 1.6295 1.2095 0.8795 2.1905 #>  [159,] 0.4765 4.7195 1.2865 2.2385 4.9775 #>  [160,] 1.2305 0.7895 0.5315 0.4965 0.8535 #>  [161,] 1.8605 0.4965 1.9985 1.7245 1.0905 #>  [162,] 0.7985 3.1515 2.3675 0.3965 3.1045 #>  [163,] 0.0085 0.1215 0.0315 0.0295 0.3335 #>  [164,] 4.4855 0.3045 1.1405 0.9435 0.5225 #>  [165,] 0.3765 0.6395 0.4115 0.1905 0.6515 #>  [166,] 0.4905 2.5905 0.7855 2.1465 4.2925 #>  [167,] 0.2945 0.3305 0.4125 0.2605 0.1975 #>  [168,] 0.6335 3.5155 1.3555 0.3895 2.2875 #>  [169,] 2.6715 0.1175 0.4165 0.5865 0.0875 #>  [170,] 0.9275 2.0445 0.9855 2.1325 4.0565 #>  [171,] 3.7255 1.0965 3.0855 2.8555 0.4995 #>  [172,] 0.8665 4.2675 2.1905 2.5765 3.9025 #>  [173,] 0.8125 1.0935 2.0055 1.2265 0.9595 #>  [174,] 0.9375 4.1845 1.9035 0.7055 3.4615 #>  [175,] 0.3025 1.2335 0.7075 0.5805 0.8815 #>  [176,] 1.0745 1.1315 0.8665 0.9845 1.7435 #>  [177,] 1.4085 0.9165 1.6115 0.7705 1.0775 #>  [178,] 0.7485 3.8985 1.2335 1.6285 3.8195 #>  [179,] 1.2355 0.1675 0.2315 0.2115 0.2835 #>  [180,] 1.8965 0.6725 1.1205 1.0545 1.0495 #>  [181,] 0.5055 2.0205 0.7745 0.8185 4.7355 #>  [182,] 2.0655 4.8995 4.7775 0.4845 3.1695 #>  [183,] 0.8005 3.7235 1.0585 2.7235 4.5085 #>  [184,] 3.0205 0.5505 1.9125 1.7715 0.5335 #>  [185,] 3.2335 0.5665 1.3075 1.5245 0.2465 #>  [186,] 0.8195 0.2895 0.9465 0.6235 0.3695 #>  [187,] 3.2835 0.9025 4.0975 4.7805 1.5205 #>  [188,] 0.0535 0.2925 0.0735 0.2255 0.4615 #>  [189,] 0.2535 2.6405 0.7155 0.2165 1.0255 #>  [190,] 0.6305 4.2305 1.1555 1.6215 2.9435 #>  [191,] 3.6485 0.9655 3.0155 4.3405 1.7855 #>  [192,] 0.5165 3.6965 0.9895 1.7335 3.6965 #>  [193,] 0.5145 2.7135 0.5435 1.1155 2.2125 #>  [194,] 4.6945 1.6885 0.8965 1.3525 2.7635 #>  [195,] 0.0065 0.0055 0.0495 0.0325 0.0015 #>  [196,] 0.6505 2.1895 0.8465 3.2735 3.7015 #>  [197,] 2.8605 0.9985 1.1035 3.2965 1.0545 #>  [198,] 2.8225 2.4105 3.3135 0.6755 2.7985 #>  [199,] 0.4655 1.7065 0.4615 0.4355 1.5325 #>  [200,] 0.7755 2.2425 1.3035 3.9925 4.4965 #>  [201,] 0.0845 0.0395 0.0545 0.0705 0.0185 #>  [202,] 0.0365 0.0155 0.0105 0.0155 0.0675 #>  [203,] 1.0415 0.9335 1.1225 1.5315 0.9085 #>  [204,] 1.8735 1.1455 0.8065 1.1845 0.9995 #>  [205,] 0.6985 3.3995 1.2225 1.2355 4.4025 #>  [206,] 1.6665 1.3415 0.6725 1.6585 1.5005 #>  [207,] 3.5585 0.6585 1.8165 2.8025 1.1085 #>  [208,] 0.1105 0.6075 0.1725 0.3945 2.3805 #>  [209,] 0.7945 0.2015 0.2925 0.2355 0.3495 #>  [210,] 0.7675 0.1255 0.2345 0.1895 0.3765 #>  [211,] 0.8735 4.1085 3.8285 2.4045 1.5555 #>  [212,] 3.4275 1.4655 0.9765 1.3675 1.3045 #>  [213,] 2.3175 1.2595 0.9725 0.8645 1.4075 #>  [214,] 0.1875 0.1455 0.3505 0.5425 0.3195 #>  [215,] 0.4535 1.4255 0.3935 0.5725 2.9515 #>  [216,] 0.7905 0.6155 0.7025 0.7995 1.4795 #>  [217,] 0.4055 1.6845 0.6485 0.2535 0.8995 #>  [218,] 0.8745 0.7115 0.9065 0.5995 0.5525 #>  [219,] 0.0895 0.0855 0.1465 0.1505 0.0385 #>  [220,] 0.2825 3.6695 0.6925 1.8605 3.2125 #>  [221,] 1.3675 3.5415 1.7625 0.7315 1.8965 #>  [222,] 0.8085 1.3595 0.4305 0.8525 2.3925 #>  [223,] 0.1805 1.0905 0.6835 0.1465 0.4525 #>  [224,] 4.4545 1.2275 1.9885 1.7155 0.5915 #>  [225,] 0.0715 0.0205 0.0455 0.0355 0.0065 #>  [226,] 0.7125 1.3375 0.5955 1.2965 1.4645 #>  [227,] 1.0005 0.2185 0.6315 0.5355 0.4235 #>  [228,] 0.7995 3.2785 1.0325 1.2425 4.2585 #>  [229,] 0.5755 3.4085 0.7645 2.7535 2.6105 #>  [230,] 0.8165 0.8725 1.1715 2.7335 2.6465 #>  [231,] 0.4695 3.2715 0.8595 2.8865 4.6245 #>  [232,] 0.4485 0.4835 0.5155 0.6135 2.9445 #>  [233,] 0.7145 2.8085 1.4125 0.9615 3.2275 #>  [234,] 4.5605 2.7225 4.9005 4.9125 0.4165 #>  [235,] 4.8035 3.5205 4.7145 4.0045 0.8185 #>  [236,] 0.7505 0.7555 0.3675 0.3335 0.5515 #>  [237,] 4.9815 0.9705 2.1185 2.8825 2.7285 #>  [238,] 0.0025 0.0135 0.0055 0.0145 0.0145 #>  [239,] 1.4595 3.8255 1.4425 0.9195 3.2715 #>  [240,] 0.1785 0.1275 0.1325 0.2495 0.1525 #>  [241,] 0.3365 0.3905 0.1805 0.2635 1.0705 #>  [242,] 0.6625 0.3115 0.3695 1.0275 1.5765 #>  [243,] 1.1595 1.3165 0.6965 0.8275 1.2945 #>  [244,] 2.4995 1.2325 1.8175 0.9895 0.4685 #>  [245,] 0.5765 0.6965 0.4725 1.2095 1.3645 #>  [246,] 0.2865 1.8855 0.7945 0.8285 2.6985 #>  [247,] 2.0705 0.5585 0.9915 1.0985 0.5765 #>  [248,] 0.5595 2.9585 1.2085 3.2005 3.6215 #>  [249,] 2.4575 0.3435 0.7625 1.1545 1.1345 #>  [250,] 0.4685 0.8645 0.5665 0.4645 1.1315 #>  [251,] 1.9715 1.4455 1.8405 1.1725 0.6745 #>  [252,] 0.2065 0.3705 0.2385 0.2965 0.5085 #>  [253,] 0.8975 0.5995 0.7595 0.4945 0.8215 #>  [254,] 0.0515 0.0325 0.0365 0.0305 0.0395 #>  [255,] 0.8615 4.9955 0.9185 4.7635 4.9545 #>  [256,] 0.0755 0.0815 0.0625 0.0815 0.0575 #>  [257,] 0.6155 2.8385 0.7355 1.8265 4.1135 #>  [258,] 0.3245 0.0655 0.1085 0.1715 0.4205 #>  [259,] 0.6615 1.1755 0.6935 0.8205 0.6625 #>  [260,] 0.5345 3.8735 1.3305 0.5035 1.2685 #>  [261,] 0.7515 0.1635 2.5445 2.8295 0.3645 #>  [262,] 1.2685 0.3015 0.4325 0.2855 0.1475 #>  [263,] 0.4935 2.3625 0.9875 0.3655 3.2065 #>  [264,] 0.3575 0.1105 0.1095 0.1565 0.2255 #>  [265,] 0.0185 0.0145 0.0095 0.0195 0.0285 #>  [266,] 0.8535 4.1885 1.6645 3.2295 4.4975 #>  [267,] 4.5085 1.8435 2.9675 3.0065 0.8785 #>  [268,] 3.0545 0.6805 0.9315 1.0875 0.7005 #>  [269,] 0.9685 0.9195 1.6355 1.0175 2.5915 #>  [270,] 0.4615 1.8815 0.6455 1.1195 3.4845 #>  [271,] 1.1315 0.2465 0.2845 0.3445 0.1115 #>  [272,] 0.4045 1.6905 0.5305 2.1425 1.8555 #>  [273,] 2.8725 2.1355 1.6675 1.5055 0.9575 #>  [274,] 0.7595 1.4535 0.7005 0.9365 2.0775 #>  [275,] 2.4215 0.9605 1.3265 1.5765 0.8695 #>  [276,] 1.7595 0.6985 1.1155 0.7735 0.6455 #>  [277,] 1.1425 1.4015 1.6515 1.7345 0.8615 #>  [278,] 1.1245 0.5625 0.4925 0.2235 0.5435 #>  [279,] 4.8495 1.3265 4.1315 3.9155 0.5495 #>  [280,] 0.5975 3.2255 1.3725 0.5765 2.0735 #>  [281,] 2.8645 0.9355 2.7775 2.8365 0.7925 #>  [282,] 1.4015 0.6885 1.3015 0.8375 3.4915 #>  [283,] 0.9795 1.7385 1.0815 2.3695 1.6845 #>  [284,] 3.6755 1.3325 2.0775 1.9735 0.4665 #>  [285,] 3.4805 2.2705 2.1565 2.4805 0.7935 #>  [286,] 0.4165 0.3975 2.0335 2.0585 0.4155 #>  [287,] 0.7205 0.7465 0.4645 0.7895 1.2545 #>  [288,] 1.5395 0.6325 2.6635 3.0775 0.6845 #>  [289,] 0.9065 0.6045 1.7235 1.1855 0.6245 #>  [290,] 0.5905 0.3365 0.4885 0.7485 0.3155 #>  [291,] 0.9905 0.4755 1.8265 2.9775 0.6655 #>  [292,] 0.2345 1.0685 0.3405 1.0145 2.6355 #>  [293,] 1.1965 1.7605 0.9575 1.3115 1.4235 #>  [294,] 0.8185 3.4755 1.6435 1.1385 3.8165 #>  [295,] 3.0005 1.3855 2.4155 1.4915 0.9785 #>  [296,] 0.6865 1.4605 1.3025 2.2905 1.7785 #>  [297,] 1.2535 1.8225 1.1245 1.5135 0.7365 #>  [298,] 0.7155 3.6825 1.0055 3.4245 3.3165 #>  [299,] 1.4725 1.7825 1.9675 1.1915 0.4555 #>  [300,] 1.3495 2.2395 1.8835 0.8755 2.9685 #>  [301,] 0.6405 3.3405 0.9285 1.3025 3.2325 #>  [302,] 0.1145 0.6405 0.2615 0.2365 0.9795 #>  [303,] 0.4585 0.4815 0.4295 0.3035 0.6885 #>  [304,] 0.6575 4.1445 1.2605 3.6985 3.7775 #>  [305,] 0.1685 1.6365 0.2175 1.0675 3.9955 #>  [306,] 1.0455 1.2035 0.6755 0.5485 1.8115 #>  [307,] 2.5255 3.1015 2.2985 0.9515 3.6835 #>  [308,] 3.9575 3.3275 4.6485 3.7255 0.3445 #>  [309,] 4.5005 3.7325 4.5515 4.5295 0.9775 #>  [310,] 1.9585 0.4465 2.1075 1.2845 0.1055 #>  [311,] 0.2685 0.2255 0.2715 0.0795 0.1485 #>  [312,] 1.7495 1.7845 0.7435 0.4995 3.1535 #>  [313,] 0.2455 0.5395 0.3295 0.6245 2.2955 #>  [314,] 2.6955 1.2385 1.1055 1.0945 0.7425 #>  [315,] 0.1575 0.0075 0.0075 0.0035 0.0205 #>  [316,] 0.3705 0.9105 0.4565 0.6585 1.1015 #>  [317,] 0.3305 1.1055 0.5395 0.7095 1.5135 #>  [318,] 0.7025 0.2435 0.2875 0.3025 0.5065 #>  [319,] 1.7745 0.6365 0.7665 0.5185 1.7795 #>  [320,] 0.4885 0.2705 0.2205 0.4565 1.1655 #>  [321,] 1.4385 0.2455 0.6705 0.7745 0.5035 #>  [322,] 3.0195 0.5845 1.6745 1.8845 0.7535 #>  [323,] 0.2315 2.7405 0.3475 1.4035 3.6465 #>  [324,] 2.7295 1.6155 1.8465 0.7045 0.4285 #>  [325,] 0.2765 0.7285 1.1565 0.4595 0.2755 #>  [326,] 0.9865 1.9145 1.6345 2.1675 3.5145 #>  [327,] 0.3135 0.0685 0.2065 0.2475 0.1385 #>  [328,] 0.6265 0.6385 2.3355 0.4155 0.1225 #>  [329,] 2.1595 0.5485 1.5845 1.7105 0.9605 #>  [330,] 1.9625 1.3945 1.7345 1.2525 0.6115 #>  [331,] 1.6525 0.7415 0.4155 0.4905 1.3595 #>  [332,] 0.8725 0.2115 1.1585 1.3035 0.2675 #>  [333,] 1.6605 0.8185 1.0955 1.9615 0.5425 #>  [334,] 4.8605 1.8715 4.9285 4.8935 0.8355 #>  [335,] 0.8875 1.4445 1.2765 1.8855 0.6605 #>  [336,] 0.7915 3.1445 0.9155 2.2175 4.7365 #>  [337,] 0.7345 0.5355 0.5145 0.6835 0.7185 #>  [338,] 1.9125 0.6475 0.5185 0.5745 0.2615 #>  [339,] 2.2945 0.8395 4.0495 4.7115 1.2805 #>  [340,] 2.4715 1.2965 2.0025 2.0005 0.6445 #>  [341,] 2.2545 0.8325 1.3065 0.9885 0.6425 #>  [342,] 0.3525 0.6685 0.7145 0.2315 0.2285 #>  [343,] 0.3795 3.2585 0.6075 2.1995 3.4495 #>  [344,] 0.9775 2.4215 1.0575 0.6975 3.8315 #>  [345,] 3.0115 2.8275 2.9735 3.6235 0.8715 #>  [346,] 0.1945 0.1655 0.2165 0.1835 0.1645 #>  [347,] 2.8555 0.6625 1.8875 2.2215 1.7565 #>  [348,] 0.3475 0.8165 0.4085 0.2185 1.3235 #>  [349,] 1.1365 0.1435 0.3275 0.3345 0.1255 #>  [350,] 0.6835 0.6665 0.4075 0.3195 0.6475 #>  [351,] 0.6045 1.2615 0.7715 0.4785 3.1725 #>  [352,] 4.0065 0.1145 0.5275 0.6085 0.3795 #>  [353,] 0.5065 0.4455 0.8345 0.5605 0.5055 #>  [354,] 0.5925 0.6735 0.3765 0.7265 0.7225 #>  [355,] 2.5165 0.5415 0.6905 0.5505 1.0605 #>  [356,] 0.0645 0.0975 0.0595 0.0685 0.2905 #>  [357,] 0.8625 2.2505 0.5985 0.9295 0.6205 #>  [358,] 0.1345 0.0635 0.0745 0.0975 0.0705 #>  [359,] 0.0295 0.0045 0.0035 0.0115 0.0255 #>  [360,] 2.8585 1.7005 2.2595 1.6505 0.6045 #>  [361,] 4.2225 2.2525 4.1025 3.7005 0.9225 #>  [362,] 0.4415 1.0795 0.6105 0.4075 0.1235 #>  [363,] 0.2185 0.5305 0.3005 0.4095 0.9505 #>  [364,] 0.2885 0.0365 0.0925 0.1085 0.0525 #>  [365,] 2.3065 0.8045 2.7485 2.1855 2.1385 #>  [366,] 0.5285 2.1855 0.5075 2.8885 3.1315 #>  [367,] 3.2985 0.2515 0.6675 0.5475 0.2085 #>  [368,] 1.4335 0.7245 1.6875 1.1475 0.4035 #>  [369,] 0.4125 0.2905 0.3225 0.1685 0.1965 #>  [370,] 1.2745 0.4035 0.9005 0.6095 0.6025 #>  [371,] 0.6565 0.3565 0.3995 0.5905 0.2395 #>  [372,] 4.7595 0.8095 2.9345 3.4175 0.8835 #>  [373,] 1.1605 2.2285 0.9205 0.3055 2.7555 #>  [374,] 3.1185 0.4535 1.7815 3.0245 1.2855 #>  [375,] 0.2325 0.2625 0.1825 0.2405 0.2645 #>  [376,] 2.3095 0.8935 1.0695 0.8255 0.7905 #>  [377,] 0.9665 4.4665 1.6035 1.5655 3.7975 #>  [378,] 0.5455 0.9695 0.6945 0.2915 0.7485 #>  [379,] 1.1915 0.2585 4.6685 4.7905 3.2655 #>  [380,] 0.7315 2.1425 1.4145 2.9445 2.3365 #>  [381,] 1.6155 2.3385 1.3865 1.6305 0.4835 #>  [382,] 4.2215 0.9325 2.0645 2.3235 0.6295 #>  [383,] 0.8065 1.2405 0.8955 0.4725 1.8245 #>  [384,] 3.9025 0.5535 1.8065 3.5965 1.0715 #>  [385,] 0.0735 0.2355 0.0935 0.0985 0.2435 #>  [386,] 0.4785 0.0985 0.2785 0.2205 0.1425 #>  [387,] 0.1855 0.8405 0.4065 0.2595 1.3145 #>  [388,] 0.4095 0.3105 0.5235 0.5005 0.3325 #>  [389,] 4.5775 1.3185 3.7215 3.9385 0.5805 #>  [390,] 2.9035 2.6585 1.5335 0.9495 1.8295 #>  [391,] 0.2485 2.6455 0.3585 0.7255 3.8355 #>  [392,] 3.6575 4.0705 2.9965 0.8365 1.3375 #>  [393,] 0.9425 3.9435 1.7315 1.5535 2.1225 #>  [394,] 0.8985 0.3805 0.5645 2.6625 3.5975 #>  [395,] 0.1775 0.0565 0.1485 0.4385 0.2525 #>  [396,] 4.1055 3.4975 4.7015 4.8745 0.8525 #>  [397,] 1.5235 0.8985 2.4985 0.9535 0.5785 #>  [398,] 0.9945 4.8975 1.2555 4.0245 4.9845 #>  [399,] 3.5375 0.8605 1.4165 1.0225 0.7945 #>  [400,] 2.4325 0.2965 1.0145 1.5845 1.1055 #>  [401,] 0.8715 0.7295 0.4935 0.3255 0.8735 #>  [402,] 0.4365 0.4785 0.3365 0.2805 1.2535 #>  [403,] 0.7535 2.5625 0.9555 0.4505 1.0995 #>  [404,] 0.6605 0.2565 0.8245 0.7755 0.2935 #>  [405,] 0.7085 0.4055 0.3325 0.1965 2.0635 #>  [406,] 0.2925 3.4465 0.6295 0.3525 3.8775 #>  [407,] 0.0425 0.1395 0.0835 0.1595 0.1015 #>  [408,] 0.1245 1.4825 0.2425 0.3485 1.2005 #>  [409,] 2.2255 3.3915 3.2775 0.4265 3.4775 #>  [410,] 3.1725 0.8445 1.6475 0.7985 0.7395 #>  [411,] 0.8795 1.5865 1.1265 1.4395 2.2485 #>  [412,] 1.1685 0.3225 1.0615 0.7025 0.4515 #>  [413,] 2.0065 0.4335 0.4755 0.4255 0.3135 #>  [414,] 1.0605 0.9015 1.0445 1.0825 2.4085 #>  [415,] 0.9755 0.4705 0.4865 0.5895 0.8745 #>  [416,] 1.0765 0.8895 0.6565 0.9385 0.7545 #>  [417,] 4.1985 0.5755 1.1385 2.0185 2.2435 #>  [418,] 0.8965 0.3485 1.6005 1.8345 0.5565 #>  [419,] 3.9745 0.8485 4.1395 4.2325 1.0325 #>  [420,] 4.5165 2.1055 4.2605 3.4525 0.5305 #>  [421,] 0.3405 2.0725 0.5975 2.4095 3.1615 #>  [422,] 2.5075 1.4135 1.5105 1.6655 0.6265 #>  [423,] 3.9085 3.1705 3.6855 2.0345 0.7715 #>  [424,] 0.4225 0.6255 0.5595 0.7505 0.4565 #>  [425,] 1.1645 0.6225 0.8305 2.6515 1.3125 #>  [426,] 0.0765 0.3145 0.1505 0.1935 0.1535 #>  [427,] 1.8375 0.3265 0.8495 0.8025 0.6065 #>  [428,] 1.0885 0.7985 1.0395 0.5935 1.3335 #>  [429,] 0.6935 3.0255 1.1945 0.7645 4.5825 #>  [430,] 0.9035 0.9715 0.7905 1.4665 3.4355 #>  [431,] 2.5795 0.9125 3.8475 3.2785 0.3845 #>  [432,] 1.6225 0.9805 1.6405 1.7875 1.9855 #>  [433,] 0.9205 1.1015 0.9505 0.9785 0.6005 #>  [434,] 0.3675 0.7455 0.3685 0.8715 0.8145 #>  [435,] 2.0645 0.9255 3.0475 3.5875 0.4655 #>  [436,] 4.8865 0.4315 1.3515 1.1905 0.6055 #>  [437,] 0.5635 0.0485 0.0665 0.1015 0.0345 #>  [438,] 3.9415 0.6305 1.2105 1.0235 0.8405 #>  [439,] 3.5305 0.7545 3.1335 0.9585 0.5185 #>  [440,] 0.6995 0.6035 0.8375 0.5345 0.6535 #>  [441,] 0.8765 2.2565 1.3985 1.6925 2.5325 #>  [442,] 0.7735 0.4185 0.5255 0.4185 0.5105 #>  [443,] 1.3525 0.5895 1.0135 1.1215 1.4805 #>  [444,] 0.2855 3.0235 0.4635 1.2645 4.6825 #>  [445,] 0.6855 3.7725 1.4575 3.1365 4.8135 #>  [446,] 0.5525 0.1095 0.1775 0.2055 0.1355 #>  [447,] 2.0005 1.0755 0.7975 0.8335 1.2875 #>  [448,] 0.3595 1.7365 0.6445 2.0415 3.5585 #>  [449,] 3.7845 1.6145 4.3785 4.2545 0.7695 #>  [450,] 1.6145 0.2735 0.3945 0.3325 0.1825 #>  [451,] 0.3425 0.5385 0.4355 0.5265 1.7715 #>  [452,] 0.1755 0.3215 0.1635 0.5325 0.4915 #>  [453,] 0.4295 1.4685 0.5475 1.8315 1.2225 #>  [454,] 0.7475 2.5895 0.9035 1.4195 4.0665 #>  [455,] 1.4265 1.3315 0.8155 1.1115 3.0275 #>  [456,] 0.3535 0.4375 0.2545 0.0945 0.2805 #>  [457,] 1.3465 1.3645 2.1765 1.4575 0.9885 #>  [458,] 1.0355 0.1225 0.2515 0.2995 0.4415 #>  [459,] 0.3145 4.5705 0.7365 2.7285 4.7685 #>  [460,] 3.4425 0.9865 1.6975 1.6715 1.4345 #>  [461,] 0.5485 4.7655 1.3525 3.0845 4.6875 #>  [462,] 4.5805 1.5745 3.3305 1.9035 0.9875 #>  [463,] 3.1405 0.7275 2.8065 1.7045 0.7985 #>  [464,] 1.8485 1.3445 1.1415 1.1955 0.3365 #>  [465,] 4.4595 0.5885 3.2665 3.9975 0.6705 #>  [466,] 1.6695 0.6915 1.3215 1.4825 1.2415 #>  [467,] 0.2565 0.3155 0.3195 0.2795 0.1775 #>  [468,] 0.6185 1.3255 1.3905 2.7595 2.1325 #>  [469,] 0.0075 0.0345 0.0125 0.0285 0.1605 #>  [470,] 1.2275 0.1915 0.4025 0.2245 0.1445 #>  [471,] 0.4505 2.4235 0.9935 0.7275 1.3165 #>  [472,] 3.7855 0.3025 1.6125 1.6475 0.4865 #>  [473,] 0.5575 3.3265 1.7785 0.8935 1.1665 #>  [474,] 2.6045 1.6045 2.1055 4.2935 0.6465 #>  [475,] 2.6995 1.9795 1.7875 2.2225 0.9555 #>  [476,] 0.4105 1.1295 0.4975 0.6365 2.2375 #>  [477,] 0.5095 0.5655 0.5285 0.6355 2.4115 #>  [478,] 4.5655 2.4685 3.8395 3.0215 0.6405 #>  [479,] 1.3935 0.4925 1.5805 1.3165 0.7625 #>  [480,] 0.6715 3.7205 1.1485 4.1745 3.4185 #>  [481,] 0.1325 1.3895 0.3305 0.0745 2.7265 #>  [482,] 0.5425 2.7915 0.9755 2.2315 3.2955 #>  [483,] 4.9425 0.8795 4.0555 4.5465 3.2775 #>  [484,] 2.1405 0.9215 3.5745 3.9875 1.4355 #>  [485,] 0.7365 2.6495 1.0825 2.8565 3.6265 #>  [486,] 0.1645 0.1405 0.3605 0.2775 0.1885 #>  [487,] 0.7275 2.2115 1.5075 1.6275 3.1555 #>  [488,] 3.8125 0.6465 4.4325 4.6515 2.6695 #>  [489,] 2.8805 1.1725 1.6305 2.3765 0.8845 #>  [490,] 0.2895 1.0655 0.3105 0.4175 1.7495 #>  [491,] 0.7395 3.3135 0.9395 3.6275 3.5645 #>  [492,] 0.2475 0.1475 0.1245 0.1755 0.0455 #>  [493,] 4.4165 0.7845 1.0595 1.1255 0.9905 #>  [494,] 1.7425 0.5345 0.8875 1.1805 0.5025 #>  [495,] 2.8275 2.0395 4.0065 4.4625 0.7735 #>  [496,] 0.6485 1.5845 1.1755 0.7155 0.8125 #>  [497,] 0.3855 1.7445 0.7505 1.1175 3.0265 #>  [498,] 0.3805 1.6935 0.7515 0.8775 2.0845 #>  [499,] 0.1255 0.9685 0.2235 0.1805 1.1245 #>  [500,] 0.6955 0.3685 0.4705 0.5085 0.3095 #>  [501,] 0.5075 0.4175 0.6335 0.2075 0.1285 #>  [502,] 0.2835 3.9105 0.4945 0.8515 3.7295 #>  [503,] 0.1585 0.7495 0.2415 0.2015 1.8465 #>  [504,] 0.3005 2.4425 0.4495 0.3215 3.6755 #>  [505,] 0.1995 0.3955 0.1935 0.1555 0.2475 #>  [506,] 0.9885 0.4415 1.2745 0.4885 0.7965 #>  [507,] 0.4315 3.4095 0.9435 1.2285 3.9755 #>  [508,] 4.1115 2.6085 2.7705 0.7205 0.5015 #>  [509,] 2.4935 3.8105 3.2255 0.5585 2.6575 #>  [510,] 0.3495 0.8385 0.6035 0.3905 1.9625 #>  [511,] 0.7665 0.0795 0.2665 0.2395 0.2335 #>  [512,] 0.0095 0.0535 0.0135 0.0235 0.0375 #>  [513,] 4.4885 1.5045 3.8495 3.3365 0.9475 #>  [514,] 1.1005 0.2195 0.2945 0.3435 0.2665 #>  [515,] 2.4645 0.5735 0.8385 0.6905 0.9375 #>  [516,] 4.6495 3.0465 3.8935 2.8445 0.8765 #>  [517,] 2.9585 1.1255 1.1165 1.0705 0.6335 #>  [518,] 0.6815 1.7595 1.1805 1.3185 0.8265 #>  [519,] 2.1155 0.7715 1.5665 1.6985 0.8155 #>  [520,] 1.9945 3.0375 4.5545 2.4355 0.9955 #>  [521,] 0.4465 1.0495 0.8655 0.8105 0.6035 #>  [522,] 2.0015 0.5695 0.9825 0.9835 0.6365 #>  [523,] 0.4335 1.6715 0.4055 1.3155 3.2625 #>  [524,] 0.3265 0.0955 0.2055 0.3135 0.1135 #>  [525,] 0.2995 0.8695 0.4485 2.2565 1.2765 #>  [526,] 1.4785 0.9445 0.6665 0.5495 2.8675 #>  [527,] 0.2695 0.1685 0.1765 0.5715 0.3265 #>  [528,] 3.1215 0.2645 0.3165 1.2745 0.2035 #>  [529,] 0.2615 0.0615 0.1395 0.1485 0.0865 #>  [530,] 0.8045 0.2235 0.4555 0.2335 0.2125 #>  [531,] 0.0235 0.1525 0.0395 0.0425 0.1295 #>  [532,] 2.7885 2.8865 2.9025 0.8855 2.7855 #>  [533,] 3.5935 0.4015 0.5545 0.7365 0.7605 #>  [534,] 1.5835 0.3635 0.3125 0.3705 1.0585 #>  [535,] 0.8895 2.3155 1.7105 1.2915 1.8485 #>  [536,] 2.2725 0.6495 0.5795 0.7425 0.1595 #>  [537,] 0.1005 0.0095 0.2035 0.4395 0.0195 #>  [538,] 0.8585 4.1225 1.3165 1.6415 3.9735 #>  [539,] 0.0275 0.2805 0.0555 0.1125 0.4385 #>  [540,] 0.0475 0.0695 0.0355 0.0475 0.0585 #>  [541,] 0.1725 0.8125 0.2395 0.3095 1.3535 #>  [542,] 2.1715 0.2885 0.3435 0.4585 0.2855 #>  [543,] 0.7495 2.2845 1.1825 0.5535 2.6595 #>  [544,] 2.3995 4.3375 2.4215 0.5415 4.7115 #>  [545,] 0.4215 2.1595 0.9495 0.8805 3.5805 #>  [546,] 1.0715 1.2575 0.6415 1.4445 2.3135 #>  [547,] 4.3665 0.4495 0.8645 0.9605 0.3985 #>  [548,] 4.2385 1.5535 3.4785 4.1475 0.4225 #>  [549,] 0.8805 2.1885 1.2885 0.8955 0.3295 #>  [550,] 2.5815 0.6945 3.0015 1.6245 1.2235 #>  [551,] 0.8865 0.2545 1.1695 1.6495 0.3485 #>  [552,] 0.2425 0.2325 1.0035 0.6155 0.1665 #>  [553,] 2.9115 0.2745 1.8765 2.1085 0.4065 #>  [554,] 1.6505 0.5775 1.6805 1.4515 0.8945 #>  [555,] 0.5825 0.2935 0.4095 0.1375 0.0365 #>  [556,] 4.3965 0.9535 1.5045 2.1485 1.3285 #>  [557,] 3.8415 2.9535 3.1895 0.8315 1.1595 #>  [558,] 0.1615 1.7395 0.2885 1.3845 1.2095 #>  [559,] 0.9005 0.8025 1.2735 1.2565 1.1185 #>  [560,] 4.7405 1.5465 0.9775 1.0345 2.4675 #>  [561,] 4.2155 1.1775 3.1015 3.8465 0.9845 #>  [562,] 0.1555 0.1605 0.1435 0.1325 0.2955 #>  [563,] 0.7465 2.2065 1.4435 1.4495 2.8855 #>  [564,] 1.2545 0.7785 0.8005 0.8015 0.7705 #>  [565,] 0.5245 0.7705 1.1895 1.2245 0.6315 #>  [566,] 0.6065 2.9165 0.9965 0.9745 4.6365 #>  [567,] 4.6145 0.8205 3.4705 4.1075 2.3475 #>  [568,] 0.4445 0.3185 0.4005 0.3505 0.1735 #>  [569,] 2.8685 1.2165 0.7415 1.7815 3.6515 #>  [570,] 2.4375 0.9005 1.5915 2.8645 1.1615 #>  [571,] 0.7975 1.5855 0.7925 1.4695 1.5285 #>  [572,] 0.9965 0.5085 0.8255 0.9525 0.8545 #>  [573,] 3.0865 0.4165 1.8745 1.4005 0.2245 #>  [574,] 0.9585 0.8335 1.4465 0.9475 1.7285 #>  [575,] 0.9895 2.1395 1.5545 1.4885 3.0655 #>  [576,] 0.1625 1.4345 0.2685 0.1915 1.4105 #>  [577,] 1.9105 0.9775 1.4555 1.2135 1.4485 #>  [578,] 4.5695 2.8735 3.9185 3.7735 0.8015 #>  [579,] 4.4045 0.8585 2.7715 3.4275 2.1505 #>  [580,] 0.1075 0.6285 0.1965 0.1785 0.5415 #>  [581,] 0.0675 0.0105 0.0705 0.0265 0.0085 #>  [582,] 1.2285 0.2855 0.3285 0.5515 0.5845 #>  [583,] 2.2135 1.4935 2.4925 0.7935 0.7815 #>  [584,] 0.6195 4.1295 1.0305 1.3055 3.8795 #>  [585,] 0.7815 0.2075 0.3555 0.9115 0.3225 #>  [586,] 0.4405 0.8145 0.4775 0.4115 1.1295 #>  [587,] 0.3345 3.2675 0.8025 3.4065 3.2315 #>  [588,] 0.7845 0.2995 0.6245 0.7885 0.7835 #>  [589,] 0.5315 0.9575 0.3665 0.6415 2.2965 #>  [590,] 0.8905 3.1885 1.7965 2.4505 1.2165 #>  [591,] 3.4935 0.7175 2.5935 2.4485 1.9575 #>  [592,] 3.3165 1.9345 1.9475 0.9315 1.2295 #>  [593,] 0.1135 0.5715 0.1225 0.9735 1.0825 #>  [594,] 3.6225 1.6835 4.1695 3.9565 0.9185 #>  [595,] 2.6755 0.1825 0.2215 0.1825 0.1685 #>  [596,] 1.5015 1.2415 0.9055 1.2595 1.5105 #>  [597,] 0.7055 0.5065 0.3985 0.2865 0.4295 #>  [598,] 3.0895 0.5185 0.8415 1.5395 1.1865 #>  [599,] 0.4135 1.0375 0.5895 0.4615 2.7535 #>  [600,] 2.0275 2.0855 1.6455 0.5615 3.2675 #>  [601,] 3.3075 1.0595 4.3565 4.1095 0.6755 #>  [602,] 3.7645 0.9185 0.8835 1.0845 0.5265 #>  [603,] 3.7225 1.6025 1.4615 1.7895 0.8905 #>  [604,] 0.3905 3.6045 1.2005 0.5105 2.2385 #>  [605,] 1.8355 0.2305 0.8045 0.8665 0.5635 #>  [606,] 0.7785 0.1955 0.1425 0.1745 0.8115 #>  [607,] 1.2035 1.3745 1.3405 1.1035 0.8325 #>  [608,] 0.1545 0.0595 0.0825 0.0655 0.0245 #>  [609,] 0.3455 0.7375 0.4575 0.4835 0.2005 #>  [610,] 0.8855 3.1075 1.4335 1.7475 4.5355 #>  [611,] 0.7135 3.5345 1.6225 1.8475 3.9685 #>  [612,] 0.3095 3.5045 0.8615 0.3995 2.1365 #>  [613,] 4.3265 1.6215 3.1525 3.0405 0.9945 #>  [614,] 0.2745 1.1885 0.4015 1.1295 3.7595 #>  [615,] 1.4255 0.9495 1.0495 1.5125 0.5345 #>  [616,] 1.2465 0.6525 0.4405 0.4235 1.2845 #>  [617,] 0.6975 1.6965 1.6015 2.6215 1.5405 #>  [618,] 0.1185 1.6455 0.2365 0.3845 0.9265 #>  [619,] 1.9435 2.9355 0.9705 0.8035 3.3985 #>  [620,] 1.4175 1.3435 0.8195 1.0855 1.0895 #>  [621,] 4.4775 0.3915 0.9265 0.6815 0.5045 #>  [622,] 4.5705 1.3235 1.7735 2.8345 0.9325 #>  [623,] 1.5105 1.9935 1.6685 3.2235 0.9155 #>  [624,] 1.6285 0.8225 1.2695 0.9545 0.4275 #>  [625,] 0.8325 2.7485 1.3145 1.2335 2.3995 #>  [626,] 4.3835 1.4855 1.8575 1.3455 0.5285 #>  [627,] 0.6285 1.6395 0.7835 1.7025 0.5255 #>  [628,] 3.3155 0.7915 0.6285 0.5625 0.5575 #>  [629,] 1.6005 1.3845 2.0085 1.3825 0.5475 #>  [630,] 0.1025 1.4735 0.2115 0.4655 2.7385 #>  [631,] 3.1285 2.1445 1.9095 0.9635 1.4535 #>  [632,] 0.3775 1.1815 0.7615 1.3665 3.4875 #>  [633,] 3.3355 1.2745 1.4675 0.9575 1.6475 #>  [634,] 0.0315 0.0015 0.0085 0.0025 0.0025 #>  [635,] 0.3645 1.1025 0.4965 0.7185 0.9545 #>  [636,] 0.1595 0.0255 0.0985 0.0455 0.0115 #>  [637,] 2.1215 0.8295 1.1795 1.0935 0.9525 #>  [638,] 1.0905 1.0035 0.7565 0.8965 1.6555 #>  [639,] 3.3915 2.2895 4.6975 4.4415 0.9415 #>  [640,] 0.5295 3.2135 1.6295 1.2055 3.1495 #>  [641,] 1.1285 0.1835 0.1835 0.1355 0.2605 #>  [642,] 0.8775 0.6265 0.4605 0.8405 0.2975 #>  [643,] 0.4235 0.4525 0.5385 0.3375 1.4785 #>  [644,] 0.2755 0.5175 0.3625 0.3605 1.1425 #>  [645,] 0.6015 3.0485 0.6955 1.2855 4.3525 #>  [646,] 0.8355 0.8715 2.5975 2.4245 1.0655 #>  [647,] 0.0325 0.1245 0.0385 0.0875 0.2745 #>  [648,] 1.4005 2.1565 2.8165 0.7515 2.9175 #>  [649,] 0.6105 2.1935 0.7675 1.6735 3.4435 #>  [650,] 1.0485 1.2545 0.9685 1.2455 2.7755 #>  [651,] 0.3585 1.5935 0.7235 0.4755 1.6165 #>  [652,] 3.6445 0.5565 2.6935 2.1365 0.2535 #>  [653,] 2.9635 1.6545 1.3755 1.4765 0.8415 #>  [654,] 2.2105 2.7155 2.4705 2.7175 0.8575 #>  [655,] 4.1085 0.5605 0.8105 0.7005 1.1065 #>  [656,] 3.5105 1.6125 2.0185 0.9125 0.6435 #>  [657,] 0.2555 0.1545 0.1605 0.1705 0.3355 #>  [658,] 0.6695 4.9105 1.3685 3.2345 4.5895 #>  [659,] 3.2295 0.4865 0.6915 0.4225 1.2015 #>  [660,] 0.0635 0.0875 0.0475 0.0405 0.0695 #>  [661,] 0.3685 0.5575 0.4675 0.3795 1.0205 #>  [662,] 0.7705 4.1305 1.4375 1.3905 3.2745 #>  [663,] 3.6655 0.8745 0.7895 1.0315 1.9035 #>  [664,] 4.6175 1.4435 1.9555 0.8165 0.7955 #>  [665,] 0.6135 0.3735 0.6555 1.0025 0.8435 #>  [666,] 2.7525 0.6015 0.5105 1.7165 2.3715 #>  [667,] 4.8705 3.0455 3.8135 3.8285 0.6675 #>  [668,] 3.6035 0.6515 1.2375 2.3385 2.8615 #>  [669,] 0.8245 4.5075 1.6255 4.3765 4.6955 #>  [670,] 3.0425 0.7195 3.1655 3.1335 0.5965 #>  [671,] 1.0245 1.6055 1.5225 0.7385 0.4725 #>  [672,] 2.3275 1.0615 2.2255 1.9575 0.7785 #>  [673,] 3.1885 0.9425 2.6525 2.0365 0.7065 #>  [674,] 1.2925 0.6345 0.7635 1.1045 0.8635 #>  [675,] 1.4995 1.7405 1.5565 1.3205 0.8925 #>  [676,] 0.1065 0.0675 0.0805 0.0935 0.0405 #>  [677,] 1.4635 0.4125 0.6115 0.7875 0.3315 #>  [678,] 0.7555 0.2945 0.9425 1.1305 0.4735 #>  [679,] 3.4355 1.8215 2.3565 0.8245 3.8305 #>  [680,] 3.4705 0.6935 0.9545 1.2605 0.9855 #>  [681,] 3.4065 2.5385 2.9695 2.0685 0.6495 #>  [682,] 0.9855 0.3175 0.5245 0.6785 0.3805 #>  [683,] 3.8705 0.4065 0.8175 1.8455 1.2585 #>  [684,] 0.4915 0.3375 0.7125 0.6175 0.4645 #>  [685,] 3.9195 2.6605 3.4975 0.7065 0.9465 #>  [686,] 2.5755 3.2055 3.3445 0.8865 1.5345 #>  [687,] 1.5065 3.7455 3.6365 0.6535 3.2055 #>  [688,] 0.0265 0.0195 0.0895 0.0535 0.0035 #>  [689,] 0.7095 1.8675 0.7335 1.1735 1.2315 #>  [690,] 1.0315 0.7655 1.5855 0.7555 0.4785 #>  [691,] 1.2635 3.4245 2.0535 0.7825 2.7525 #>  [692,] 1.1565 1.0605 3.4995 1.9095 0.3235 #>  [693,] 0.8075 0.2285 0.3495 0.3495 0.2625 #>  [694,] 0.1695 0.0895 0.1555 0.0695 0.0535 #>  [695,] 3.0225 0.3415 0.7135 0.3295 0.7465 #>  [696,] 2.8355 4.0065 3.6555 2.3655 0.9895 #>  [697,] 3.4645 0.7615 1.3085 1.6325 1.2335 #>  [698,] 0.2395 0.8305 0.5905 0.5665 0.2685 #>  [699,] 0.4755 2.0095 1.1065 1.7285 3.5625 #>  [700,] 0.2575 0.3945 0.2525 0.3935 0.6725 #>  [701,] 0.1195 1.9365 0.3485 0.4295 1.9735 #>  [702,] 4.1345 0.7385 1.1885 0.9285 0.5175 #>  [703,] 1.1935 4.8355 2.8385 0.7465 3.5135 #>  [704,] 0.2585 3.0765 0.2755 2.3435 3.9105 #>  [705,] 2.2265 0.4935 1.0715 1.2785 0.8165 #>  [706,] 1.2735 1.4425 0.9145 0.7195 1.2715 #>  [707,] 0.3565 0.5445 0.4175 0.5045 1.9785 #>  [708,] 0.4645 0.6845 0.5375 0.6875 0.5645 #>  [709,] 4.8975 0.9815 1.2435 1.7635 4.0135 #>  [710,] 2.5275 0.6705 0.4385 0.8675 1.0455 #>  [711,] 0.1165 0.1025 0.1065 0.0775 0.2995 #>  [712,] 0.1765 2.8245 0.2965 1.1665 1.6745 #>  [713,] 4.2175 1.1275 1.9015 2.5475 0.5985 #>  [714,] 0.5695 0.0885 0.1355 0.1365 0.3025 #>  [715,] 1.7165 0.9395 0.9815 1.8215 3.5205 #>  [716,] 0.2975 0.3615 0.4785 0.2295 0.3685 #>  [717,] 4.4225 3.6015 3.7535 0.6505 3.2355 #>  [718,] 2.1415 0.5465 0.6625 1.0425 0.3415 #>  [719,] 1.0175 0.3665 0.4715 0.4335 1.0195 #>  [720,] 1.0915 1.2185 0.9125 1.3485 1.3475 #>  [721,] 2.9975 1.0355 0.7655 0.9935 0.6575 #>  [722,] 3.3045 1.5275 0.8275 1.0215 1.6505 #>  [723,] 3.4045 0.4485 0.7705 0.7965 0.6945 #>  [724,] 0.8755 2.4965 1.7645 1.4635 1.2655 #>  [725,] 2.6365 3.0165 2.8735 1.3975 0.9645 #>  [726,] 2.8535 1.5765 1.9485 0.9145 1.3215 #>  [727,] 0.4195 1.0265 0.5555 0.4425 0.9685 #>  [728,] 0.6035 3.9845 1.1075 3.8705 4.2945 #>  [729,] 3.7135 1.8315 4.2455 3.5775 0.9355 #>  [730,] 3.1395 2.9145 2.0525 1.4315 0.9715 #>  [731,] 0.6915 0.3585 0.3925 0.4695 0.5835 #>  [732,] 1.0105 0.7775 0.9835 0.6705 0.7355 #>  [733,] 2.9725 0.5295 3.5815 3.9495 1.6725 #>  [734,] 0.1665 0.2315 0.2045 0.2225 0.2405 #>  [735,] 0.7745 3.7795 1.8815 0.8265 3.1135 #>  [736,] 2.8755 1.1745 1.3205 0.8765 0.7245 #>  [737,] 0.5585 4.1805 1.4215 2.4575 3.9445 #>  [738,] 1.6645 0.2415 0.5715 0.3565 0.5545 #>  [739,] 0.4385 0.3245 0.3065 0.2825 0.7995 #>  [740,] 3.0745 1.2705 3.7385 3.3675 0.2495 #>  [741,] 0.3155 0.7735 0.2835 0.1205 1.2825 #>  [742,] 2.4805 0.6295 1.9005 3.8995 1.0805 #>  [743,] 0.7855 0.2105 1.3255 1.8735 0.5825 #>  [744,] 1.3965 2.7535 1.2235 0.7685 4.7465 #>  [745,] 2.9445 1.3485 1.1955 0.8435 1.9665 #>  [746,] 0.6275 1.6725 1.0115 1.9795 2.9095 #>  [747,] 0.1475 0.1385 0.3185 0.1995 0.1195 #>  [748,] 1.2495 0.4435 0.8785 1.0065 1.2055 #>  [749,] 2.9665 0.5805 1.6535 1.0295 0.8555 #>  [750,] 0.3915 0.5125 0.4995 0.2685 0.6525 #>  [751,] 0.0175 0.0445 0.0205 0.0505 0.0325 #>  [752,] 0.9635 4.4215 1.4705 0.9015 3.6035 #>  [753,] 0.9875 0.2815 1.0735 0.9645 0.2595 #>  [754,] 0.3045 0.7675 0.5605 0.1655 0.1075 #>  [755,] 3.4755 0.8705 2.8555 2.6975 1.6865 #>  [756,] 0.6525 3.1035 1.4785 1.0575 1.4025 #>  [757,] 2.2335 0.9965 0.9365 0.8945 0.8035 #>  [758,] 1.9995 0.8175 1.5265 2.8985 0.5885 #>  [759,] 1.0975 0.4235 1.3955 1.4345 0.4795 #>  [760,] 2.7065 1.5165 2.9305 2.3485 0.8105 #>  [761,] 0.2035 0.4645 0.6375 0.2375 0.2025 #>  [762,] 0.0725 0.0475 0.0465 0.0185 0.0165 #>  [763,] 2.3955 1.4565 1.3575 0.2675 0.7415 #>  [764,] 0.8955 4.6115 1.9155 4.0635 4.9005 #>  [765,] 0.7185 1.6925 2.2545 1.3885 2.4315 #>  [766,] 0.5375 3.4905 0.6745 1.8965 2.0955 #>  [767,] 0.2125 0.4765 0.3645 0.4135 0.2355 #>  [768,] 0.4515 3.1545 1.2015 1.0605 1.9085 #>  [769,] 0.5785 0.5985 0.6355 0.4865 0.5445 #>  [770,] 2.8005 1.0635 1.1855 2.0705 0.7805 #>  [771,] 0.6795 0.4395 0.3615 0.3065 0.3725 #>  [772,] 0.1715 1.7835 0.2095 0.6325 2.4735 #>  [773,] 0.2235 0.1285 1.4205 1.5175 0.0925 #>  [774,] 1.0675 3.1555 1.5675 0.6745 3.0035 #>  [775,] 0.6125 3.4175 1.2325 0.8235 2.1735 #>  [776,] 0.9525 4.7085 2.4445 2.8735 4.3645 #>  [777,] 1.3025 0.3815 0.8865 0.4825 0.1765 #>  [778,] 0.2675 0.6085 0.3375 0.3175 0.4145 #>  [779,] 0.3185 0.2125 0.1445 0.2765 0.5315 #>  [780,] 2.6665 0.4285 2.3935 4.2245 0.6545 #>  [781,] 0.2365 0.6235 0.2705 0.1865 1.8215 #>  [782,] 0.8365 1.7085 1.0105 1.2385 3.8135 #>  [783,] 0.3665 2.4415 1.0335 2.0965 1.2115 #>  [784,] 2.6595 2.2465 2.2945 0.8485 4.6125 #>  [785,] 0.4275 0.1165 1.7255 1.2925 0.3455 #>  [786,] 0.0785 0.0305 0.1295 0.1105 0.0105 #>  [787,] 0.1925 0.1235 0.9105 0.3615 0.1175 #>  [788,] 0.7575 2.8935 1.2075 3.0285 3.6905 #>  [789,] 1.8765 0.5515 0.9995 1.8195 0.3855 #>  [790,] 0.1895 2.9175 0.3265 2.1175 2.8755 #>  [791,] 2.4915 0.8565 0.9445 0.7285 2.2745 #>  [792,] 0.2775 1.5215 0.5775 0.5825 1.0075 #>  [793,] 0.5365 0.3405 0.6015 0.5335 0.3425 #>  [794,] 0.1305 0.3575 0.1365 0.1955 0.1555 #>  [795,] 3.5565 0.8375 1.2255 1.4865 0.9735 #>  [796,] 0.3435 0.6555 0.2985 0.3575 1.4605 #>  [797,] 0.8595 2.9115 0.8585 1.6125 4.3385 #>  [798,] 4.3445 0.6875 0.9595 2.0285 1.9615 #>  [799,] 1.5205 1.2845 1.3475 0.4165 1.2555 #>  [800,] 0.1455 0.1645 0.1565 0.1215 0.0995 #>  [801,] 0.3715 4.2615 0.7195 0.9925 3.1035 #>  [802,] 0.9815 0.4085 0.3885 0.3785 0.4255 #>  [803,] 0.5915 1.0055 0.6635 1.5925 0.7795 #>  [804,] 1.0125 1.8355 1.6795 1.7085 0.3395 #>  [805,] 1.5855 0.4075 0.5845 0.5975 0.4365 #>  [806,] 0.6925 0.4355 0.7545 1.1285 0.5505 #>  [807,] 1.6535 2.7985 2.5925 0.7805 3.9765 #>  [808,] 2.9995 0.7905 1.8425 3.4445 2.5825 #>  [809,] 0.9615 0.7645 0.5915 0.5645 1.1765 #>  [810,] 0.6365 2.2095 2.2195 1.4895 1.8155 #>  [811,] 0.4715 0.7305 1.2535 0.6695 0.4545 #>  [812,] 0.2355 0.7835 0.5735 0.1695 0.3165 #>  [813,] 0.6345 2.1335 1.4015 1.3045 4.1125 #>  [814,] 0.0885 2.5485 0.1595 0.2515 3.3265 #>  [815,] 0.4925 4.4395 1.7665 0.8145 3.7275 #>  [816,] 0.5685 0.1845 0.3205 0.3835 0.2275 #>  [817,] 0.5395 0.9625 0.6595 2.4305 1.6685 #>  [818,] 4.0375 4.8685 4.8205 0.8825 4.3715 #>  [819,] 0.0995 0.0185 0.0335 0.0835 0.0805 #>  [820,] 2.8625 1.3575 2.1095 1.8115 0.9205 #>  [821,] 0.2465 0.0715 0.0725 0.2455 0.2565 #>  [822,] 0.0345 0.1305 0.0405 0.0825 0.1435 #>  [823,] 0.6745 1.1875 0.8125 1.5745 0.9295 #>  [824,] 3.4595 3.0855 3.9775 0.9045 1.0085 #>  [825,] 4.2925 0.8085 1.8925 1.9635 2.0535 #>  [826,] 2.4535 0.6215 2.4015 2.8265 1.0365 #>  [827,] 0.3055 0.7345 0.3575 0.4575 2.3755 #>  [828,] 4.3285 2.7185 3.5345 3.7965 0.4195 #>  [829,] 3.1265 0.7325 1.0245 1.0245 0.3345 #>  [830,] 0.9355 1.2245 1.1095 0.8535 3.1305 #>  [831,] 0.3975 1.2725 2.2515 0.4975 0.7655 #>  [832,] 2.3395 3.7765 3.8575 0.8085 1.3455 #>  [833,] 0.8105 4.9345 1.6265 4.2585 4.9695 #>  [834,] 2.7805 1.4755 1.0805 0.9805 2.7845 #>  [835,] 0.3695 1.3755 0.6345 0.3555 1.0065 #>  [836,] 4.3495 1.0325 0.8825 1.1695 2.6365 #>  [837,] 0.9535 0.3465 0.5125 0.5025 0.3925 #>  [838,] 4.8025 3.3925 4.8975 4.5625 0.6385 #>  [839,] 2.8115 1.8885 1.3655 0.4925 4.2805 #>  [840,] 2.3775 0.6175 0.7485 1.2535 0.8065 #>  [841,] 3.6255 0.4005 0.4415 0.5215 1.3625 #>  [842,] 0.1055 3.0715 0.1945 0.8615 2.0905 #>  [843,] 1.5825 1.1925 4.5945 4.7835 0.9435 #>  [844,] 0.1235 0.2395 0.1415 0.1475 0.1165 #>  [845,] 0.3165 0.3555 0.3085 0.2955 0.2725 #>  [846,] 0.5615 0.5745 0.6175 0.6655 0.4585 #>  [847,] 0.7375 0.5785 1.9285 1.1075 0.1675 #>  [848,] 4.8425 0.9065 1.9075 1.5835 1.6875 #>  [849,] 1.8875 0.2775 3.7255 4.2685 1.6315 #>  [850,] 0.8445 1.8045 2.0865 1.1495 1.9435 #>  [851,] 0.2225 0.8475 0.4235 0.3145 0.7145 #>  [852,] 1.2855 2.4535 1.5035 0.9345 2.7995 #>  [853,] 0.4635 0.2335 0.2725 0.2065 0.1125 #>  [854,] 0.4995 4.5215 1.0685 4.8125 4.7485 #>  [855,] 0.5015 0.0355 0.0785 0.0725 0.0155 #>  [856,] 0.0115 0.0315 0.0195 0.0385 0.0445 #>  [857,] 1.0035 0.8135 0.5995 0.4745 1.0645 #>  [858,] 3.3725 1.8295 4.4525 4.4425 0.8915 #>  [859,] 0.2435 2.7945 0.4805 1.5715 3.8955 #>  [860,] 1.6965 0.4255 0.7605 0.4405 0.3905 #>  [861,] 1.0555 0.8965 2.1405 2.2465 0.6595 #>  [862,] 2.9055 1.9305 1.3105 0.9955 1.3765 #>  [863,] 1.7315 0.3125 1.0125 0.8155 0.3145 #>  [864,] 1.6895 1.1205 0.6655 0.8845 1.5435 #>  [865,] 3.5865 1.0925 2.0275 3.5075 0.5365 #>  [866,] 0.0455 0.0415 0.0265 0.0255 0.0905 #>  [867,] 1.6515 0.9675 1.1295 0.9855 3.1775 #>  [868,] 0.9415 4.8675 1.6995 3.6575 4.6935 #>  [869,] 0.3205 0.4345 0.3035 0.3265 3.7955 #>  [870,] 4.2195 1.1075 0.9335 2.2845 3.0935 #>  [871,] 0.3395 0.4725 0.3535 0.3735 0.3665 #>  [872,] 1.4125 0.3005 1.0945 0.3825 0.2415 #>  [873,] 0.8555 3.1995 0.8995 1.1185 4.1395 #>  [874,] 0.8635 3.0805 1.4355 1.1795 2.6295 #>  [875,] 4.5255 0.8775 3.0935 4.4855 1.2975 #>  [876,] 4.0835 0.9145 1.1235 2.8455 1.7075 #>  [877,] 0.1635 0.1695 0.1785 0.1445 0.1155 #>  [878,] 1.0195 2.1025 1.0525 0.5375 1.4205 #>  [879,] 0.7885 3.8785 2.3895 0.8045 4.3425 #>  [880,] 0.8845 0.1355 0.5085 0.3815 0.5655 #>  [881,] 0.3485 0.0115 0.0345 0.0205 0.0055 #>  [882,] 2.0265 0.9405 1.1595 0.9055 0.3595 #>  [883,] 0.4115 0.5055 0.2855 0.1515 0.5125 #>  [884,] 0.5475 1.6485 0.7825 0.9765 1.1145 #>  [885,] 0.0255 0.0665 0.0305 0.0515 0.0715 #>  [886,] 3.7785 0.4625 2.7195 2.7395 0.3375 #>  [887,] 4.7435 2.1125 2.2895 2.1815 0.6985 #>  [888,] 1.4695 0.1925 0.4275 0.4795 0.2695 #>  [889,] 0.1485 0.2535 0.1005 0.2285 1.1155 #>  [890,] 0.7685 3.3875 1.2415 3.4075 4.6725 #>  [891,] 1.7015 0.4155 0.4395 0.1645 0.1275 #>  [892,] 0.3735 0.0605 0.2645 0.3675 0.1495 #>  [893,] 4.5045 1.2625 3.8845 3.9945 0.4095 #>  [894,] 3.7875 1.0075 1.6175 1.0185 0.3835 #>  [895,] 3.5275 1.3695 2.0305 1.2805 0.8625 #>  [896,] 2.2295 0.3095 0.6855 0.6305 0.5455 #>  [897,] 3.5215 0.4635 0.3735 0.5915 0.6085 #>  [898,] 4.8825 0.8575 0.7845 1.0965 1.5585 #>  [899,] 3.9775 2.3265 4.7265 4.6435 0.7055 #>  [900,] 0.2175 0.1205 0.4655 1.1015 0.0755 #>  [901,] 3.8895 0.9925 3.0165 2.8765 0.6905 #>  [902,] 2.1145 0.5685 0.5865 1.2475 0.4845 #>  [903,] 1.1175 0.8365 1.6055 1.7805 0.2105 #>  [904,] 0.2045 0.3475 0.1405 0.1315 0.4425 #>  [905,] 0.1205 0.0725 0.0765 0.0495 0.0795 #>  [906,] 0.3115 0.1155 0.1025 0.1115 0.1245 #>  [907,] 2.9855 0.7765 1.9755 1.1935 1.4255 #>  [908,] 2.9765 2.0495 2.3645 1.9935 0.8855 #>  [909,] 4.8325 0.8595 3.4505 3.3875 1.3075 #>  [910,] 4.2375 0.7045 2.9285 1.7605 0.3245 #>  [911,] 0.5035 3.3345 1.0915 1.3815 3.8435 #>  [912,] 1.0045 1.8235 0.6515 2.4445 3.8985 #>  [913,] 0.6385 0.5015 0.4915 0.2665 2.2055 #>  [914,] 0.1515 0.7755 0.1705 0.2725 1.0015 #>  [915,] 0.7835 2.1205 4.0685 1.6775 0.6935 #>  [916,] 0.2105 0.3845 0.2625 0.1405 0.5795 #>  [917,] 0.4625 1.5265 1.2785 0.2655 0.7235 #>  [918,] 0.0985 0.2225 0.1275 0.1535 0.5605 #>  [919,] 0.5225 1.2255 0.7055 0.7015 0.9235 #>  [920,] 1.0645 1.0305 0.6775 0.2815 1.1505 #>  [921,] 0.7955 2.4975 0.7985 2.4715 3.0325 #>  [922,] 0.6175 1.2105 1.6245 1.0735 2.4455 #>  [923,] 0.8475 1.2475 1.0025 0.8555 1.1395 #>  [924,] 1.2665 1.4805 0.8975 1.1105 4.1535 #>  [925,] 4.0295 3.3295 3.3965 2.9205 0.8315 #>  [926,] 0.8225 1.9275 1.9945 1.1415 1.6565 #>  [927,] 0.1395 0.2555 0.1575 0.1575 0.2295 #>  [928,] 4.2415 1.1505 3.1455 3.7015 0.8895 #>  [929,] 0.2965 0.3285 0.4215 0.4625 0.4215 #>  [930,] 3.4455 0.4445 0.6885 0.9505 0.8205 #>  [931,] 2.9275 0.3545 1.1195 1.0695 0.9935 #>  [932,] 4.1375 0.9245 1.5195 2.3665 1.1375 #>  [933,] 0.4395 0.5115 0.2465 0.2935 1.0285 #>  [934,] 3.6745 1.3425 3.3375 3.5015 0.7105 #>  [935,] 1.0055 0.7975 0.7785 0.5755 2.9205 #>  [936,] 0.1495 0.0495 0.0445 0.0675 0.0965 #>  [937,] 2.5555 0.7955 1.9775 2.2545 1.7445 #>  [938,] 2.3805 0.7745 2.9715 1.8995 0.3055 #>  [939,] 1.8565 2.8725 1.9525 1.3925 0.5945 #>  [940,] 0.6685 1.7035 3.4585 2.5705 2.5925 #>  [941,] 3.2665 0.3275 0.3115 0.2275 0.3615 #>  [942,] 1.3925 0.8885 0.6475 0.7435 0.9105 #>  [943,] 2.2915 1.2895 1.6945 1.3685 0.7325 #>  [944,] 0.2135 0.3625 0.3315 0.2885 0.4335 #>  [945,] 4.0225 0.2155 0.5575 0.4605 0.2945 #>  [946,] 1.0205 1.8505 1.2265 0.3695 1.7235 #>  [947,] 0.9135 0.4655 0.4545 0.4415 0.9175 #>  [948,] 0.0805 0.2985 0.1105 0.1495 2.1955 #>  [949,] 0.8655 1.3515 0.7375 1.1675 2.0105 #>  [950,] 4.3465 0.5315 0.9165 1.2685 1.1895 #>  [951,] 0.1435 2.3035 0.1865 0.6635 3.1365 #>  [952,] 4.2595 0.3995 1.3795 0.6115 0.2175 #>  [953,] 0.4205 0.3135 1.7555 1.3425 0.9275 #>  [954,] 0.5625 2.1505 0.9785 1.1715 4.1605 #>  [955,] 1.1075 1.9035 1.5785 1.4835 0.6325 #>  [956,] 1.3685 0.7505 1.9635 1.3295 0.2425 #>  [957,] 2.6885 1.8395 2.3235 0.4955 0.4875 #>  [958,] 0.3955 1.9445 1.0265 0.4475 2.3855 #>  [959,] 3.7615 0.6315 0.4435 0.4035 0.3755 #>  [960,] 1.5775 0.3855 0.9905 0.9755 0.8825 #>  [961,] 0.1425 0.2445 0.2085 0.1885 0.2345 #>  [962,] 1.7735 1.5195 0.7095 1.0535 1.7045 #>  [963,] 4.9095 3.0145 4.3965 4.2095 0.7045 #>  [964,] 0.8205 1.3625 0.9115 2.9395 4.0185 #>  [965,] 3.7915 0.7475 0.9925 2.4695 2.6495 #>  [966,] 0.8925 4.5015 3.3675 2.1295 3.3575 #>  [967,] 0.1985 0.3515 0.1845 0.3005 0.2765 #>  [968,] 0.9765 2.6995 0.9305 1.2345 3.7685 #>  [969,] 3.6405 2.6595 3.6865 2.3615 0.7035 #>  [970,] 1.2115 0.7055 1.2185 1.1565 0.6815 #>  [971,] 0.9785 1.0575 0.9615 1.2985 1.7115 #>  [972,] 3.1865 0.8455 1.0165 1.4755 1.2815 #>  [973,] 0.9515 0.3655 0.5115 1.0475 0.7455 #>  [974,] 4.7715 1.3345 3.9675 3.3205 0.9665 #>  [975,] 0.7895 0.1195 0.3515 0.2505 0.9485 #>  [976,] 0.0035 0.0165 0.0045 0.0015 0.0425 #>  [977,] 0.8155 1.3035 1.3965 0.5405 0.7265 #>  [978,] 4.3295 1.1085 3.0225 2.4985 0.8245 #>  [979,] 4.4525 1.0085 1.9595 1.5035 0.6855 #>  [980,] 2.9935 0.7135 1.1335 1.1585 2.9255 #>  [981,] 0.7725 4.6235 1.9765 2.2205 4.6475 #>  [982,] 3.9485 0.9205 1.0045 1.2165 1.8885 #>  [983,] 3.0235 0.6655 2.1445 1.7535 0.4405 #>  [984,] 3.0815 0.9045 1.4455 1.0395 0.4015 #>  [985,] 1.7645 1.0205 1.5945 1.2705 0.4245 #>  [986,] 3.0135 1.6745 4.3615 4.2395 0.9445 #>  [987,] 1.8055 1.7855 1.8845 1.9805 0.9345 #>  [988,] 0.3175 0.8195 0.4855 0.6675 1.4775 #>  [989,] 0.9245 1.1845 4.0035 3.1305 1.2275 #>  [990,] 1.5335 0.2525 0.4045 0.6925 0.4535 #>  [991,] 0.6635 1.8475 3.6325 1.6195 1.5295 #>  [992,] 1.2235 1.1155 1.0385 1.0125 0.6345 #>  [993,] 0.5195 0.7875 0.4955 1.2195 1.3775 #>  [994,] 0.4355 0.5005 0.4315 0.3875 3.1505 #>  [995,] 0.2335 0.9745 0.3155 0.3355 0.8285 #>  [996,] 0.2165 0.1075 0.1075 0.1225 0.1725 #>  [997,] 0.9835 2.6345 1.2485 4.4055 4.2705 #>  [998,] 0.6095 0.7445 0.6815 0.7235 1.2965 #>  [999,] 1.0585 0.6185 0.3745 0.5635 1.2245 #> [1000,] 0.5115 1.3715 0.5705 0.4985 2.7955 #> [1001,] 0.7445 4.7145 1.2465 4.1175 4.9615 #> [1002,] 1.8825 0.8245 2.6345 3.1695 1.4245 #> [1003,] 0.4185 3.2015 1.3225 0.2735 1.8315 #> [1004,] 4.8255 2.6055 4.8245 4.8385 0.9315 #> [1005,] 0.8785 4.3725 3.9625 2.8225 4.6425 #> [1006,] 0.7925 0.3825 0.6985 0.6525 0.6175 #> [1007,] 0.3225 0.1975 0.2195 0.5555 0.2545 #> [1008,] 0.3355 1.8305 0.4475 0.1165 2.1695 #> [1009,] 0.3865 0.2345 0.1545 0.1925 0.4825 #> [1010,] 2.3265 0.8115 0.9135 0.8885 1.6235 #> [1011,] 0.4035 1.5985 0.6255 0.9945 2.9455 #> [1012,] 0.5995 3.5935 1.6065 0.5955 3.5325 #> [1013,] 2.0965 0.8845 2.1275 2.9495 0.2775 #> [1014,] 0.4345 0.3785 0.2225 0.3235 0.3895 #> [1015,] 0.5405 4.3325 1.2705 4.1405 4.7745 #> [1016,] 0.9695 3.9965 1.2755 1.5555 3.9215 #> [1017,] 0.9305 1.4005 0.9025 0.7975 2.8475 #> [1018,] 0.1035 1.3775 0.2255 0.3165 1.0465 #> [1019,] 1.8235 1.5835 1.5625 2.1075 0.7295 #> [1020,] 3.5505 1.2975 1.5505 1.5805 0.2065 #> [1021,] 0.6515 4.3655 1.7015 2.5815 4.1715 #> [1022,] 1.9975 0.7035 0.9845 1.8415 1.5385 #> [1023,] 1.3035 0.4045 0.6395 0.9065 0.2115 #> [1024,] 2.4965 0.7635 0.7035 0.9375 2.9605 #> [1025,] 1.7965 1.3685 2.2365 0.9815 1.0745 #> [1026,] 1.5735 0.4325 1.1465 1.4285 1.2175 #> [1027,] 0.8025 0.5975 0.6305 0.4455 0.5685 #> [1028,] 0.1975 0.7165 0.2435 0.6395 0.8055 #> [1029,] 4.0955 1.1625 2.6235 2.9285 0.4435 #> [1030,] 0.3505 3.7035 0.5585 0.9415 2.0325 #> [1031,] 1.9685 0.6335 0.9665 0.7075 0.4105 #> [1032,] 2.9695 0.5435 0.8055 0.9035 1.0235 #> [1033,] 1.1675 2.7095 2.0885 0.9405 0.4925 #> [1034,] 0.5735 2.9975 1.0075 1.2365 4.2365 #> [1035,] 0.9495 2.1385 1.8865 0.7655 1.0765 #> [1036,] 0.1815 0.7225 0.2565 0.5205 1.5695 #> [1037,] 0.4845 4.5855 1.0405 1.9025 4.8995 #> [1038,] 0.8035 3.7825 1.9805 2.3525 3.2875 #> [1039,] 0.6945 1.1005 0.7105 1.0035 2.6665 #> [1040,] 0.1015 0.8425 0.1925 0.3015 1.3935 #> [1041,] 3.8075 2.8485 4.4435 3.9035 0.7635 #> [1042,] 0.7165 0.7095 0.8035 1.6005 0.9145 #> [1043,] 0.5645 1.9925 0.6045 0.4065 2.6455 #> [1044,] 4.0215 0.8545 2.1085 2.3215 0.8295 #> [1045,] 1.7035 0.5835 1.5595 1.8095 0.3385 #> [1046,] 1.1275 0.7335 0.5165 0.8575 2.6635 #> [1047,] 2.3945 0.9305 4.1275 3.4855 1.8085 #> [1048,] 0.7605 1.2045 1.0755 0.9595 0.3585 #> [1049,] 3.2075 0.7085 4.7695 4.9265 2.9835 #> [1050,] 1.0635 0.0845 0.1905 0.4545 0.1005 #> [1051,] 1.1335 0.2875 0.4225 0.6465 1.1095 #> [1052,] 0.7425 0.2405 0.4465 0.8635 0.8495 #> [1053,] 4.1245 3.3125 4.2245 3.6895 0.9135 #> [1054,] 4.0805 0.8855 1.4315 1.7135 1.1225 #> [1055,] 0.2075 0.1985 0.1585 0.2105 0.2655 #> [1056,] 0.0705 0.0285 0.0375 0.0215 0.0545 #> [1057,] 3.4885 0.9585 2.1305 2.7715 1.8505 #> [1058,] 0.1565 0.3205 0.2105 0.2435 0.2715 #> [1059,] 0.8135 3.4315 1.0175 1.6255 4.6025 #> [1060,] 0.5865 0.4105 1.2205 0.7535 0.6105 #> [1061,] 0.7865 1.3225 1.0465 2.9085 3.7025 #> [1062,] 3.3425 1.4515 1.4835 1.2625 0.7015 #> [1063,] 0.3445 0.8535 0.3075 1.0685 1.0665 #> [1064,] 0.6755 4.3055 1.9965 3.3975 4.7475 #> [1065,] 1.2295 0.6975 0.4825 0.3635 0.9125 #> [1066,] 0.7935 0.2205 0.8735 0.9265 0.3285 #> [1067,] 0.9975 0.8995 1.1815 0.8415 2.1875 #> [1068,] 0.9935 3.7385 3.0375 0.7295 3.4465 #> [1069,] 1.6255 1.0185 1.0475 0.8725 3.3345 #> [1070,] 0.4595 1.7185 0.6685 0.4045 2.4275 #> [1071,] 0.8525 1.2695 1.7185 0.9695 1.9055 #> [1072,] 1.5715 1.2715 0.9975 1.6945 1.5235 #> [1073,] 1.3985 0.5025 1.1845 2.9845 2.8695 #> [1074,] 0.8505 0.5275 1.5605 1.8375 0.9925 #> [1075,] 0.8495 3.1025 1.1175 0.7585 3.1785 #> [1076,] 0.5715 2.4475 0.8905 0.7215 1.0595 #> [1077,] 0.8935 2.9935 1.1475 2.4405 3.1925 #> [1078,] 1.6295 0.5595 1.7995 1.5155 0.4465 #> [1079,] 4.4445 3.4895 4.4905 3.8105 0.8605 #> [1080,] 1.3565 0.9975 0.8945 0.6345 1.0835 #> [1081,] 0.1965 1.0445 0.5415 0.3685 0.3435 #> [1082,] 3.8145 1.3075 3.2975 2.7765 0.5815 #> [1083,] 0.7695 0.3315 0.6735 0.4465 0.3115 #> [1084,] 0.9595 1.2555 1.4395 0.8545 0.7615 #> [1085,] 3.0925 0.9415 1.3125 1.0015 0.7565 #> [1086,] 0.8995 2.4175 1.6325 3.9325 3.7425 #> [1087,] 0.1365 0.0835 0.1615 0.1625 0.0595 #> [1088,] 0.2155 0.1965 0.2995 0.2645 0.1345 #> [1089,] 0.5385 0.6415 0.2535 0.4345 0.6965 #> [1090,] 0.8705 1.1465 1.4255 0.6625 0.6505 #> [1091,] 0.5305 0.3295 0.2915 0.6025 1.8005 #> [1092,] 2.6415 0.5235 0.6385 0.8065 0.2555 #> [1093,] 0.1155 0.1575 0.1975 0.1855 0.1085 #> [1094,] 0.9365 1.4635 0.7385 0.9255 1.9005 #> [1095,] 4.9285 2.5045 4.4985 4.2495 0.8955 #> [1096,] 0.7045 4.7455 1.2545 4.6385 4.9505 #> [1097,] 3.7375 0.1425 0.1455 0.1985 0.1415 #> [1098,] 0.5085 1.7745 0.7405 1.8885 1.4425 #> [1099,] 0.3895 0.1625 0.6645 0.3775 0.1835 #> [1100,] 0.8815 1.6985 1.2915 0.9215 1.5085 #> [1101,] 0.9575 3.6125 1.7075 2.3585 4.4185 #> [1102,] 1.8975 0.6615 1.6285 1.4955 1.0555 #> [1103,] 2.6685 0.9135 1.0925 1.3395 0.5155 #> [1104,] 2.5335 2.6775 1.6595 0.9975 2.4495 #> [1105,] 0.2415 0.1375 0.0855 0.0715 0.0615 #> [1106,] 0.6775 3.6805 1.3695 1.1875 2.7615 #> [1107,] 3.7495 1.2445 1.7405 0.4195 1.2745 #> [1108,] 0.9455 1.1945 0.8715 0.7765 1.7205 #> [1109,] 0.0575 0.3595 0.1055 0.0785 0.1215 #> [1110,] 1.7885 1.9505 1.1305 0.6265 1.5685 #> [1111,] 0.4525 2.1915 0.9375 0.9075 1.3055 #> [1112,] 0.8385 0.7105 0.6025 0.8455 0.6975 #> [1113,] 3.6025 0.4585 2.1925 3.0965 1.0615 #> [1114,] 0.6495 0.2245 0.4815 0.6765 0.1625 #> [1115,] 2.8925 0.9645 2.6825 2.8545 0.6785 #> [1116,] 0.0055 0.0065 0.0145 0.0055 0.0235 #> [1117,] 2.0305 0.4825 0.6545 1.5025 0.8425 #> [1118,] 0.8945 4.1565 0.9985 1.5115 4.2165 #> [1119,] 1.4585 0.4115 0.6225 0.7395 0.5865 #> [1120,] 2.5965 0.7255 2.5035 2.6255 0.4855 #> [1121,] 3.8885 0.6715 1.2275 0.8495 0.8875 #> [1122,] 1.8185 1.2345 1.0995 0.9085 1.4585 #> [1123,] 0.4435 0.1465 0.1535 0.1395 0.0665 #> [1124,] 0.8485 2.6415 0.7445 1.7445 3.9815 #> [1125,] 3.8905 0.6905 0.8335 0.4485 0.2785 #> [1126,] 1.0305 1.1835 0.8775 0.7615 1.2575 #> [1127,] 0.2875 0.2915 0.2145 0.1815 0.5555 #> [1128,] 2.5325 0.4915 1.4965 0.8225 0.3505 #> [1129,] 0.8685 3.4925 1.2045 2.4935 4.1595 #> [1130,] 0.2705 4.3715 0.7265 2.2365 4.4955 #> [1131,] 3.4535 1.0745 1.4065 1.5935 0.9005 #> [1132,] 0.6425 2.1675 1.0005 0.4805 3.7225 #> [1133,] 0.9645 0.4855 1.1425 2.4755 1.4885 #> [1134,] 0.9145 4.2625 1.8885 1.7735 3.9905 #> [1135,] 3.3805 0.7665 2.3135 2.9145 0.4085 #> [1136,] 0.4965 1.1705 0.4135 0.7175 2.8345 #> [1137,] 4.1315 1.4575 1.3465 0.7785 3.3605 #> [1138,] 0.6235 3.4835 1.3385 3.0185 4.2315 #> [1139,] 3.8655 1.6355 2.2065 2.1915 0.7575 #> [1140,] 3.6195 0.6745 1.0425 1.4985 1.8225 #> [1141,] 0.9605 0.5405 0.7955 1.0335 0.5485 #> [1142,] 2.1965 0.8625 0.9325 1.0895 0.3545 #> [1143,] 1.0835 1.4505 0.9345 1.3245 0.8725 #> [1144,] 0.5155 2.4405 0.9865 0.4555 1.8955 #> [1145,] 3.5235 0.8265 1.7385 2.0455 0.3915 #> [1146,] 1.1875 0.7145 1.0725 0.7305 0.4325 #> [1147,] 4.0745 0.6775 2.2465 1.9945 0.5355 #> [1148,] 0.4305 0.2605 0.2495 0.2565 0.1095 #> [1149,] 0.7765 1.1225 1.3275 0.4635 0.1185 #> [1150,] 0.4475 4.6355 1.3095 2.3845 4.6095 #> [1151,] 0.5465 1.6185 0.5335 0.9355 2.9085 #> [1152,] 1.5295 1.0785 0.8085 0.7135 1.5525 #> [1153,] 0.1215 0.5215 0.1655 0.1285 0.3535 #> [1154,] 0.9105 0.5035 0.4585 0.7595 0.4455 #> [1155,] 0.9825 1.8625 2.4565 1.4605 3.1175 #> [1156,] 0.9475 3.4945 1.8275 2.3005 3.7875 #> [1157,] 0.3835 0.9735 1.0315 0.5575 2.7235 #> [1158,] 2.7905 0.9375 3.4195 4.2575 1.5315 #> [1159,] 1.3795 2.0835 3.4685 2.2885 0.9965 #> [1160,] 3.2675 0.2135 1.4485 3.8015 1.2385 #> [1161,] 0.0925 3.1905 0.1985 0.3585 1.5225 #> [1162,] 0.6455 1.0365 0.7585 0.4205 1.2035 #> [1163,] 0.0305 0.0435 0.0245 0.0465 0.0505 #> [1164,] 3.5595 1.0045 1.8805 2.5735 0.9255 #> [1165,] 0.3825 1.9405 0.7775 1.2435 3.0825 #> [1166,] 0.0385 0.5705 0.0885 0.3985 0.7975 #> [1167,] 0.6415 4.9925 1.0065 3.7405 4.9635 #> [1168,] 4.5935 1.0555 2.3015 3.6295 0.2205 #> [1169,] 0.0625 0.0995 0.0965 0.1095 0.0175 #> [1170,] 1.3995 0.7585 0.4035 0.4515 1.4155 #> [1171,] 1.6085 0.4265 3.0655 3.0465 1.1575 #> [1172,] 1.2315 0.6995 0.7285 0.6285 0.4375 #> [1173,] 2.6385 1.2365 1.9395 1.7425 0.6915 #> [1174,] 0.3465 0.1945 0.2025 0.1245 0.1065 #> [1175,] 1.1535 1.6005 0.8545 0.5315 3.5005 #> [1176,] 0.6735 2.3215 1.5465 1.5045 2.9705 #> [1177,] 4.1905 0.7535 1.4105 1.2405 1.1265 #> [1178,] 0.3385 0.5795 0.2895 0.4715 0.9655 #> [1179,] 0.8255 4.1125 1.1995 3.7145 4.1765 #> [1180,] 3.7775 0.9055 1.1115 2.6595 2.9485 #> [1181,] 0.0685 0.4975 0.1625 0.1135 0.4345 #> [1182,] 0.3335 0.6005 0.3025 0.5565 0.7255 #> [1183,] 0.9025 0.9485 1.2055 0.4435 0.4395 #> [1184,] 0.1885 0.4895 0.3345 0.3475 0.6805 #> [1185,] 3.8045 0.8805 1.8555 2.4425 0.3955 #> [1186,] 4.8905 1.1265 2.0935 1.8755 0.5695 #> [1187,] 0.3815 0.1885 0.3395 0.5175 0.3675 #> [1188,] 2.3465 2.0455 4.2635 3.2415 0.8455 #> [1189,] 0.4605 1.8165 0.6125 2.7955 2.8575 #> [1190,] 0.0585 0.1325 0.0565 0.0585 0.0745 #> [1191,] 1.1295 0.3965 0.2275 0.3925 2.1425 #> [1192,] 1.7465 4.0895 1.9365 0.9655 4.4895 #> [1193,] 0.3015 1.7615 0.7425 0.5685 0.7435 #> [1194,] 1.1695 0.5635 0.4685 0.8345 0.7215 #> [1195,] 0.7245 0.3445 0.3805 0.3515 0.1145 #> [1196,] 1.2555 0.5255 1.4175 0.9335 0.9985 #> [1197,] 0.7015 1.1595 0.9045 0.6165 0.7115 #> [1198,] 0.6895 0.8635 0.7295 0.9175 1.3255 #> [1199,] 0.0415 0.0575 0.0815 0.0635 0.0465 #> [1200,] 2.9785 0.3865 0.6525 0.6485 0.8585 #> [1201,] 0.3125 0.0295 0.0845 0.1295 0.0985 #> [1202,] 3.8595 0.9365 3.3435 2.3185 1.1815 #> [1203,] 1.1225 0.4405 0.3965 0.5275 0.3605 #> [1204,] 2.7695 1.3785 0.7245 2.2575 2.9245 #> [1205,] 0.5705 3.6795 1.3915 2.0855 2.9865 #> [1206,] 0.0975 0.2275 0.3015 0.0625 0.1205 #> [1207,] 1.1435 0.8275 0.3895 0.5705 1.1125 #> [1208,] 3.6605 2.3475 1.7575 1.7765 0.9015 #> [1209,] 3.3525 1.0435 1.3665 1.1785 0.6955 #> [1210,] 0.9215 0.7685 1.3645 1.9535 1.0265 #> [1211,] 0.8515 3.3825 1.5775 1.8365 3.5275 #> [1212,] 2.9065 0.9155 4.7065 4.7165 1.9495 #> [1213,] 0.7385 1.0285 1.8195 1.1065 0.2365 #> [1214,] 0.4075 0.8915 0.5445 0.6425 1.7995 #> [1215,] 3.7745 0.8785 0.8475 1.3935 2.5445 #> [1216,] 3.0165 0.9615 2.4965 4.0575 1.7765 #> [1217,] 0.8675 0.4665 0.6425 0.4525 0.3885 #> [1218,] 0.6325 1.1665 0.8435 1.2755 2.8815 #> [1219,] 0.9255 0.9555 0.4525 1.5735 1.4285 #> [1220,] 0.5655 0.6165 0.5525 0.4685 0.3875 #> [1221,] 0.5725 1.1355 0.9275 0.4315 1.8645 #> [1222,] 1.1345 0.8865 0.9415 0.9485 0.1615 #> [1223,] 2.9675 1.4075 0.9245 1.1595 4.0705 #> [1224,] 1.0285 0.7015 1.0565 0.6575 3.8075 #> [1225,] 0.0485 0.0915 0.0485 0.0335 0.1505 #> [1226,] 0.4285 1.8525 0.5935 2.5505 4.2245 #> [1227,] 0.5185 0.8825 0.7475 0.7345 0.4745 #> [1228,] 1.1135 1.2215 0.8145 0.9555 2.5345 #> [1229,] 0.2805 2.2445 0.5875 0.4085 4.1095 #> [1230,] 0.2025 0.5925 0.3795 0.6275 0.1325 #> [1231,] 0.4665 0.5915 0.5785 0.7725 1.1525 #> [1232,] 4.0755 1.5385 3.4315 3.1345 0.6775 #> [1233,] 4.8615 2.8125 4.2765 3.6365 0.4895 #> [1234,] 2.4395 1.2605 4.6775 4.4715 0.5975 #> [1235,] 0.3755 3.2435 0.8215 3.2575 4.0095 #> [1236,] 3.4905 0.5865 3.1025 3.7605 1.5795 #> [1237,] 3.8485 1.1135 1.6935 1.3465 0.7755 #> [1238,] 0.9235 2.9795 1.2395 1.0905 2.8545 #> [1239,] 0.3885 0.0945 0.2795 0.2545 0.0515 #> [1240,] 0.7435 0.5905 0.3565 0.3645 3.0895 #> [1241,] 0.8575 2.2345 0.9955 1.8015 1.0875 #> [1242,] 0.2005 0.1725 0.1385 0.0375 0.1865 #> [1243,] 0.1335 0.8415 0.3145 0.0895 0.1715 #> [1244,] 0.0775 0.1615 0.1495 0.2385 0.5905 #> [1245,] 2.1765 1.1935 1.0785 1.0775 0.9705 #> [1246,] 0.4795 4.1405 1.2685 0.4445 3.7565 #> [1247,] 0.2215 0.1595 0.1515 0.1455 0.1365 #> [1248,] 3.4725 0.6575 0.9385 0.2875 0.2795 #> [1249,] 0.7635 0.3835 1.0085 1.1095 0.7915 #> [1250,] 1.3625 0.9835 1.3545 2.7905 0.7895 #> [1251,] 0.1825 3.2175 0.2955 0.9665 4.8225 #> [1252,] 0.2905 0.8525 0.8575 0.2585 0.4265 #> [1253,] 0.2725 0.4025 0.3835 1.4165 0.4975 #> [1254,] 1.1405 3.2575 2.0225 0.8475 1.0695 #> [1255,] 0.3785 0.7355 0.6055 0.5065 1.1325 #> [1256,] 0.3935 2.7355 0.7175 1.0205 2.9125 #> [1257,] 4.1875 0.9285 1.3235 1.4625 1.6625 #> [1258,] 0.6295 0.1765 0.2325 0.2005 0.1545 #> [1259,] 0.8015 4.6935 1.8935 3.8195 4.8025 #> [1260,] 3.8565 1.1575 4.4775 4.8035 0.4605 #> [1261,] 0.7875 0.4885 0.5295 0.4025 1.0055 #> [1262,] 1.4895 0.9095 1.0655 1.2015 1.0225 #> [1263,] 0.5815 1.0875 0.7115 0.8695 1.0135 #> [1264,] 1.0145 0.4715 1.1125 2.0225 1.4185 #> [1265,] 0.6845 0.5325 0.4345 0.3205 0.4905 #> [1266,] 0.5775 1.7415 0.5225 0.3395 2.7505 #> [1267,] 0.3655 0.7265 0.7725 0.5845 0.5925 #> [1268,] 1.2865 0.4575 0.9175 0.5875 0.4985 #> [1269,] 0.5215 0.4245 1.0015 0.9205 0.6735 #> [1270,] 4.9275 3.8565 4.8015 4.4465 0.8595 #> [1271,] 2.8215 0.9175 1.9615 1.4105 0.3975 #> [1272,] 0.3605 0.2765 0.1995 0.3245 0.7595 #> [1273,] 0.0215 0.0775 0.0525 0.0345 0.0435 #> [1274,] 0.5605 2.5875 0.5345 0.6645 4.6215 #> [1275,] 0.9625 0.2095 0.3425 0.3415 0.2055 #> [1276,] 4.0985 1.0535 2.7765 3.0565 0.6195 #> [1277,] 3.1165 0.3715 0.6785 0.6035 0.0825 #> [1278,] 0.2735 0.3935 0.5205 0.5135 0.4445 #> [1279,] 0.8405 0.4195 1.0355 1.7555 0.3205 #> [1280,] 1.2805 0.6595 1.5825 0.9155 1.0185 #> [1281,] 0.2505 0.4095 0.2295 0.4765 0.7685 #> [1282,] 0.2405 4.6105 0.5755 2.2275 4.2785 #> [1283,] 0.6255 3.2125 0.7685 1.8085 4.5505 #> [1284,] 0.7415 1.7805 0.5465 0.4305 2.7925 #> [1285,] 0.2645 0.2725 0.2155 0.3425 0.2865 #> [1286,] 3.1875 0.6785 0.8295 0.6195 1.1755 #> [1287,] 0.4025 2.1695 0.5535 1.7945 3.9035 #> [1288,] 0.0165 0.1795 0.0255 0.1155 0.9095 #> [1289,] 0.6655 4.5905 0.9805 2.7505 4.3765 #> [1290,] 0.5965 4.5175 1.3455 4.9285 4.7305 #> [1291,] 0.5675 1.0885 0.8535 1.6725 3.5105 #> [1292,] 0.1225 1.4055 0.2285 0.7855 3.0415 #> [1293,] 0.1445 0.0545 0.0905 0.0225 0.0315 #> [1294,] 3.0615 0.2695 0.2585 0.1275 0.1585 #> [1295,] 0.2205 2.4955 0.8765 0.0965 0.5235 #> [1296,] 0.5895 1.0775 0.4285 1.0745 3.9795 #> [1297,] 0.9315 1.4485 0.6205 0.8305 4.0955 #> [1298,] 0.9915 3.5465 1.4045 2.5915 3.5095 #> [1299,] 0.6785 1.7895 1.1495 0.6825 1.5055 #> [1300,] 1.1025 2.3985 3.2385 0.6615 0.2895 #> [1301,] 1.4675 0.3985 0.5615 0.5305 0.4485 #> [1302,] 0.6225 0.8215 0.2765 0.3915 4.0055 #> [1303,] 0.8055 1.9915 1.2945 2.1225 2.9075 #> [1304,] 0.9165 1.6265 0.8815 2.0325 3.1665 #> [1305,] 2.7415 3.3755 3.0385 0.9675 1.8445 #> [1306,] 0.8435 0.3195 0.6795 0.3365 0.7445 #> [1307,] 0.5985 4.7075 1.1025 4.4975 4.7995 #> [1308,] 1.2455 0.7235 0.3455 0.7445 2.0045 #> [1309,] 0.1385 0.1315 0.0715 0.0595 0.4125 #> [1310,] 1.0075 2.1315 1.3535 0.5075 0.5115 #> [1311,] 2.9705 1.4275 0.9455 0.9995 3.3305 #> [1312,] 3.7815 2.7585 2.3685 0.9225 1.7185 #> [1313,] 1.0295 1.2225 0.8525 0.6055 3.4065 #> [1314,] 0.2845 0.5195 0.2975 0.6045 0.9405 #> [1315,] 2.7635 4.9745 4.5825 0.7495 2.9755 #> [1316,] 0.8605 3.4605 1.2035 2.3355 3.2635 #> [1317,] 4.2045 2.0875 4.6055 4.4135 0.8665 #> [1318,] 2.1465 0.9855 1.0705 0.5365 0.8175 #> [1319,] 3.4825 0.5365 1.4405 1.4015 0.6875 #> [1320,] 4.4335 1.8895 2.7565 2.7565 0.3015 #> [1321,] 3.6265 0.5245 1.0205 0.7835 2.5025 #> [1322,] 0.6315 1.0005 0.6605 1.5185 2.0625 #> [1323,] 0.3085 0.2615 0.1715 0.3545 0.9975 #> [1324,] 0.9265 2.6515 0.8235 1.5285 3.1915 #> [1325,] 0.4065 0.1055 0.3785 0.6435 0.0955 #> [1326,] 3.3035 0.8155 2.5355 2.1285 0.7505 #> [1327,] 0.1085 0.2835 0.1745 0.2845 0.5325 #> [1328,] 4.5885 4.2165 4.8035 4.6135 0.9815 #> [1329,] 0.2195 0.0265 0.0695 0.0605 0.0815 #> [1330,] 1.8795 0.8065 0.8855 1.2865 2.4065 #> [1331,] 0.9725 2.3375 0.8705 0.2705 2.5615 #> [1332,] 0.0795 0.1445 0.1135 0.0665 0.8375 #> [1333,] 0.1265 0.1345 0.1255 0.1265 0.2185 #> [1334,] 0.8885 0.9475 1.2825 1.4215 1.2185 #> [1335,] 0.1045 0.0925 0.3465 0.2575 0.0775 #> [1336,] 0.1465 0.2495 0.1815 0.3315 0.2585 #> [1337,] 0.5205 3.5675 1.0635 3.2185 3.6405 #> [1338,] 4.4675 2.5925 3.6305 3.5685 0.9805 #> [1339,] 0.9925 0.6275 0.6275 1.2495 3.7215 #> [1340,] 0.0355 0.0705 0.0415 0.0565 0.0895 #> [1341,] 3.0995 2.4025 1.8965 0.9445 2.3145 #> [1342,] 0.3745 0.1415 0.1175 0.1385 0.4185 #> [1343,] 1.3835 0.9035 0.8635 1.2065 1.3495 #> [1344,] 1.0435 0.4805 0.5485 0.6065 0.8385 #> [1345,] 0.4975 2.4765 0.6505 1.3075 3.1845 #> [1346,] 2.1375 0.4365 0.7885 0.6795 0.8645 #> [1347,] 0.7105 2.4585 1.4595 0.8815 3.5315 #> [1348,] 1.0945 1.9865 0.4445 0.6895 3.8015 #> [1349,] 1.8465 1.2525 2.7245 1.8775 0.3575 #> [1350,] 0.2605 0.4605 0.2805 0.5015 0.5005 #> [1351,] 0.2055 0.0865 0.1035 0.1055 0.1025 #> [1352,] 2.0875 2.1485 1.4495 0.9325 3.8885 #> [1353,] 0.9225 2.1225 1.2515 1.4715 1.9805 #> [1354,] 0.5955 2.4155 0.8315 1.5305 4.2275 #> [1355,] 0.8915 1.6405 0.8075 1.4735 3.8485 #> [1356,] 2.0995 3.0215 3.6465 1.1645 0.7375 #> [1357,] 1.5805 0.7925 0.6005 0.6715 2.4625 #> [1358,] 2.2565 0.5475 0.8505 0.5245 0.9285 #> [1359,] 0.7225 3.3315 1.5955 1.8905 2.8775 #> [1360,] 1.5405 2.5865 1.5235 0.9465 3.4605 #> [1361,] 0.5125 1.1165 0.7345 0.8705 2.1715 #> [1362,] 0.7075 4.7745 1.6465 2.9515 4.7565 #> [1363,] 0.1845 0.2215 0.2635 0.1255 0.0975 #> [1364,] 0.0045 0.0335 0.0155 0.0075 0.0125 #> [1365,] 2.7175 0.4135 1.4685 2.5935 1.6345 #> [1366,] 0.6115 0.6855 0.4895 0.5125 0.3775 #> [1367,] 4.3935 1.7715 3.9015 1.7985 0.9675 #> [1368,] 1.1745 0.2145 0.8325 1.0375 0.2215 #> [1369,] 0.9715 1.0025 0.8805 0.7845 0.6275 #> [1370,] 0.6965 1.7795 1.3705 0.3855 1.1775 #> [1371,] 0.8335 4.6465 2.2765 3.0985 4.4645 #> [1372,] 4.3785 0.7405 1.8655 1.9475 0.3525 #> [1373,] 0.9095 1.4095 1.2835 1.3475 0.8195 #> [1374,] 0.1865 0.0385 0.0615 0.0365 0.0335 #> [1375,] 3.9875 1.3045 4.0895 3.6705 0.9425 #> [1376,] 0.7325 0.8315 0.3255 0.5985 0.7335 #> [1377,] 4.3905 1.0475 1.8855 3.1445 0.3475 #> [1378,] 3.5025 0.7855 0.8925 0.9105 1.2155 #> [1379,] 1.2155 4.2025 3.5685 0.5385 1.7965 #> [1380,] 2.9655 0.9915 1.4915 1.3735 0.1635 #> [1381,] 2.7745 0.4305 0.5035 0.5815 0.2485 #> [1382,] 1.5045 1.4705 0.8405 1.5165 3.5595 #> [1383,] 0.0505 0.0215 0.0585 0.1035 0.0725 #> [1384,] 3.0255 0.9845 3.6295 3.6455 1.6115 #> [1385,] 3.0365 0.8735 1.1835 1.0665 0.6395 #> [1386,] 0.8315 1.1555 0.7465 0.6145 1.1285 #> [1387,] 0.4155 0.2165 0.5655 0.5445 0.1335 #> [1388,] 2.2975 0.4905 0.6325 0.6965 0.6355 #> [1389,] 1.3295 3.2845 2.8365 0.7955 0.8675 #> [1390,] 4.4295 3.2695 4.3955 3.5125 0.8345 #> [1391,] 1.6425 1.5655 1.9225 0.5525 0.9075 #> [1392,] 0.5265 0.9955 0.5765 0.6565 2.0525 #> [1393,] 2.7685 0.6095 2.7455 3.4765 0.8075 #> [1394,] 0.9705 0.9265 0.9485 0.7665 0.9115 #> [1395,] 0.6445 1.0395 0.9525 2.7975 1.3105 #> [1396,] 0.0835 0.1555 0.0675 0.0845 0.1305 #> [1397,] 1.1385 1.4715 1.8535 0.8915 1.5865 #> [1398,] 0.6645 0.6445 0.6615 0.5675 0.6225 #> [1399,] 1.1635 2.3285 0.8355 2.2015 2.2245 #> [1400,] 3.3795 1.2395 0.6865 1.6175 3.2685 #> [1401,] 0.0375 0.0905 0.0655 0.1025 0.1855 #> [1402,] 0.2515 0.5945 0.3215 0.4705 0.4775 #> [1403,] 0.3995 0.5265 0.4195 0.2345 0.3305 #> [1404,] 4.2065 2.7025 3.5565 2.9975 0.7085 #> [1405,] 1.9505 0.9825 1.5005 1.8395 1.3885 #> [1406,] 1.1765 0.1045 0.3445 0.3075 0.1925 #> [1407,] 0.9735 1.3725 0.9605 0.6725 1.4705 #> [1408,] 0.7285 1.0805 0.5405 0.2625 1.3675 #> [1409,] 1.4875 1.0195 0.7805 1.2615 1.8275 #> [1410,] 2.3445 1.9335 2.4205 0.8925 4.5175 #> [1411,] 2.6095 0.3645 0.4795 0.5285 0.4935 #> [1412,] 0.8425 4.9795 1.5275 4.4315 4.9525 #> [1413,] 2.7555 0.6055 2.2625 1.1315 0.0945 #> [1414,] 0.0565 0.3255 0.1115 0.1425 0.5385 #> [1415,] 3.9865 4.8295 4.4105 0.8115 4.1955 #> [1416,] 0.5835 0.0405 0.0775 0.0395 0.0475 #> [1417,] 2.6445 1.3115 1.1105 0.5295 0.5075 #> [1418,] 0.1285 0.0175 0.0285 0.0245 0.0355 #> [1419,] 1.9675 0.5645 4.0605 4.4695 0.5195 #> [1420,] 3.2325 2.0585 3.6625 1.8505 0.5755 #> [1421,] 0.0225 0.0235 0.0175 0.0125 0.0265 #> [1422,] 2.9085 0.0745 0.1185 0.1075 0.2735 #> [1423,] 0.1275 1.9155 0.2745 0.1795 0.9765 #> [1424,] 0.8345 1.0945 1.0935 0.9825 1.0275 #> [1425,] 0.6665 3.7585 1.3425 1.8835 4.6615 #> [1426,] 4.5315 0.4385 0.6155 0.6125 0.4075 #> [1427,] 0.4735 0.9945 0.7185 1.3065 0.8085 #> [1428,] 1.2045 2.0335 0.9195 1.0435 3.7315 #> [1429,] 0.7295 0.8435 0.4255 0.6595 1.5145 #> [1430,] 0.0285 0.0085 0.0025 0.0085 0.0215 #> [1431,] 0.0445 0.1755 0.0685 0.0925 0.0785 #> [1432,] 0.5495 1.3885 0.8915 0.6995 1.4435 #> [1433,] 0.9545 0.1665 0.8205 0.6665 0.1875 #> [1434,] 0.9015 1.7325 1.5405 0.6455 3.6615 #> [1435,] 0.2265 1.3925 0.5745 0.7335 2.1015 #> [1436,] 1.0995 1.0735 0.9715 0.4005 0.4715 #> [1437,] 3.1565 0.8005 2.5015 2.6875 1.4955 #> [1438,] 0.0915 0.1125 0.0535 0.0525 0.1845 #> [1439,] 1.1665 0.5095 3.9595 4.5305 2.9425 #> [1440,] 0.0145 0.0425 0.0225 0.0175 0.0625 #> [1441,] 1.3845 1.1975 0.9475 2.5955 3.6325 #> [1442,] 2.1585 2.8745 2.6355 0.7945 2.0345 #> [1443,] 3.8665 2.2925 1.3445 1.3335 0.7315 #> [1444,] 4.5545 1.0275 2.4085 2.1905 0.9055 #> [1445,] 0.9435 1.7545 0.9295 1.6145 2.3965 #> [1446,] 0.4745 0.5875 0.5625 0.4105 1.2025 #> [1447,] 0.7005 4.2845 1.4935 2.7225 3.5355 #> [1448,] 3.8315 1.0145 1.4185 1.7565 0.3865 #> [1449,] 1.5615 2.4335 2.0285 1.3305 0.6585 #> [1450,] 3.5155 0.6455 4.5725 4.7825 2.7825 #> [1451,] 1.4655 0.3495 3.4945 4.6295 0.2385 #> [1452,] 0.6215 2.7885 1.2355 1.6485 4.0405 #> [1453,] 1.4355 1.6775 2.1825 1.5775 0.8755 #> [1454,] 2.6505 2.1625 1.0745 0.5455 2.7085 #> [1455,] 1.7555 1.4835 1.8285 0.8875 1.1335 #> [1456,] 4.6965 2.9505 3.3535 3.4465 0.5935 #> [1457,] 1.9635 0.4275 0.6215 0.5465 1.9585 #> [1458,] 0.7305 4.0775 1.6445 1.3095 3.1525 #> [1459,] 2.4725 0.6205 2.4595 2.9235 0.4505 #> [1460,] 0.7825 2.4015 1.5495 1.1165 2.2355 #> [1461,] 3.7475 0.6025 1.5925 1.1265 0.2885 #> [1462,] 0.3945 1.1645 1.0295 0.8055 1.6185 #> [1463,] 0.0875 0.2365 0.1195 0.0735 0.8465 #> [1464,] 0.3555 1.9955 0.6085 2.1515 2.0465 #> [1465,] 0.7115 0.5545 0.7525 0.8075 0.3965 #> [1466,] 0.6725 1.2865 1.3945 1.0815 0.6865 #> [1467,] 0.0525 0.0645 0.0865 0.0615 0.0495 #> [1468,] 0.4985 1.0105 0.9645 1.1125 1.9255 #> [1469,] 0.9995 3.1045 1.8235 2.0595 3.0515 #> [1470,] 4.7935 3.1735 4.5255 4.7255 0.4755 #> [1471,] 1.3475 0.4565 0.9225 0.6775 0.3655 #> [1472,] 2.7865 0.1365 0.2405 0.2415 0.3065 #> [1473,] 0.0955 0.1935 0.1475 0.1675 0.2445 #> [1474,] 0.9345 1.4865 0.7395 0.9455 2.2915 #> [1475,] 0.5885 0.6135 0.3045 0.7695 0.5625 #> [1476,] 1.8265 4.5225 4.3375 0.8325 2.0555 #> [1477,] 0.0825 0.2065 0.2865 0.1045 0.2375 #> [1478,] 1.1095 0.5165 0.4695 0.6865 1.0405 #> [1479,] 3.1745 0.9295 3.0635 4.2435 0.6375 #> [1480,] 0.0005 0.0005 0.0005 0.0005 0.0005 #> [1481,] 2.8935 0.3765 0.9655 0.8995 0.9755 #> [1482,] 0.3375 0.5045 1.2665 0.7865 0.8805 #> [1483,] 2.0805 0.7365 0.7795 0.8745 0.9455 #> [1484,] 3.6355 0.4615 1.7065 1.8515 0.7855 #> [1485,] 0.0605 0.2175 0.0995 0.0955 0.2315 #> [1486,] 3.9625 1.2505 3.2925 3.6395 0.5245 #> [1487,] 0.8375 0.9595 1.3675 1.9695 3.0255 #> [1488,] 0.5855 3.6425 1.3585 0.6315 3.1715 #> [1489,] 1.2705 1.3295 1.1965 0.9165 1.9395 #> [1490,] 0.1415 1.1735 0.2245 0.2325 1.0935 #> [1491,] 0.9285 3.8115 1.2655 1.9675 2.4775 #> [1492,] 0.6885 0.1515 0.2335 0.1145 0.2155 #> [1493,] 0.4005 0.1085 0.1305 0.1585 0.2135 #> [1494,] 0.1115 0.0625 0.0755 0.0865 0.0305 #> [1495,] 4.5305 0.5335 1.4295 1.0755 1.0155 #> [1496,] 1.5305 1.8425 3.0945 2.0395 0.9065 #> [1497,] 1.1115 1.7775 1.3995 0.7675 1.1785 #> [1498,] 2.8655 1.2115 1.7685 0.5195 3.0295 #> [1499,] 1.3635 1.3835 2.5565 1.7485 0.7645 #> [1500,] 0.8545 0.6865 0.5065 0.7575 1.8845 #> [1501,] 0.2375 0.5425 0.1795 0.3225 2.0515 #> [1502,] 0.9805 0.9505 0.7165 0.8895 1.0855 #> [1503,] 2.9365 1.8175 3.4565 1.5355 0.5535 #> [1504,] 3.0435 1.5725 1.0895 0.5155 0.8475 #> [1505,] 0.1745 0.2505 0.1685 0.1175 0.1375 #> [1506,] 0.6375 0.3675 0.4745 0.3745 0.5775 #> [1507,] 2.8835 2.0315 2.3165 1.6705 0.5135 #> [1508,] 4.4025 1.1685 2.0505 2.1655 0.3735 #> [1509,] 0.8175 0.5495 0.3905 0.6885 0.6185 #> [1510,] 0.0105 0.0765 0.0275 0.0435 0.2225 #> [1511,] 0.8835 1.0335 1.2635 0.7915 1.1845 #> [1512,] 0.7175 4.7725 1.3595 1.8615 4.7545 #> [1513,] 0.2665 1.5475 0.5825 1.8725 3.1485 #> [1514,] 0.2245 0.1785 0.1895 0.8465 2.9015 #> [1515,] 0.4145 1.8915 0.7275 3.0825 4.3135 #> [1516,] 2.1135 0.8765 1.5415 1.1925 0.7285 #> [1517,] 0.2145 3.1765 0.5835 2.3335 4.4455 #> [1518,] 0.4565 0.4545 0.2555 0.5255 2.9915 #> [1519,] 0.1655 0.8355 0.2505 0.2745 0.8485 #> [1520,] 0.2935 0.7825 0.4905 0.6605 1.1205 #> [1521,] 2.8795 0.3875 2.3525 3.5215 3.4195 #> [1522,] 0.1355 0.2755 0.1375 0.1305 0.3815 #> [1523,] 0.8295 3.1675 1.0415 0.6215 4.2895 #> [1524,] 3.2965 0.8685 1.7525 3.8075 1.5165 #> [1525,] 0.8455 1.3915 1.2245 0.8835 1.1565 #> [1526,] 1.6545 0.7315 0.9405 1.1685 0.8235 #> [1527,] 0.3255 0.1115 0.0945 0.1735 0.3405 #> [1528,] 1.6955 0.6065 1.1645 1.8635 0.9515 #> [1529,] 0.5545 1.2935 2.5475 1.3515 1.2785 #> [1530,] 3.8465 1.4815 3.4405 1.3795 0.8985 #> [1531,] 0.1955 0.1335 0.2125 0.1435 0.0885 #> [1532,] 0.7795 0.4775 0.5885 0.3465 1.0115 #> [1533,] 0.3065 0.2375 0.2475 0.2945 0.7745 #> [1534,] 2.7755 1.4875 2.9585 2.6065 0.4965 #> [1535,] 0.6805 4.8625 1.4415 4.9875 4.8075 #> [1536,] 0.0545 0.6635 0.1125 0.2035 1.3565 #> [1537,] 3.5655 2.4195 3.3475 3.6925 0.7475 #> [1538,] 0.6355 0.0805 0.1015 0.1665 0.0855 #> [1539,] 4.1575 0.9785 1.5155 1.9815 0.9195 #> [1540,] 0.4265 0.7865 0.3955 0.9865 1.7955 #> [1541,] 1.1195 0.0525 0.1045 0.2045 0.1405 #> [1542,] 0.2525 0.6195 0.4665 0.7165 1.1385 #> [1543,] 3.5975 1.6345 2.3265 2.7465 0.6925 #> [1544,] 0.4725 2.7755 0.9535 2.7655 3.9915 #> [1545,] 0.0935 0.1565 0.1145 0.2905 0.3275 #> [1546,] 3.7235 0.4735 1.3615 0.7605 1.2395 #> [1547,] 3.6675 0.1505 0.1675 0.2485 0.3715 #> [1548,] 0.5335 0.7395 0.8095 1.2505 0.7405 #> [1549,] 4.2165 1.5415 3.0315 3.1715 0.6305 #> [1550,] 4.7365 0.7995 1.7335 2.1985 1.6715 #> [1551,] 1.9475 0.4595 0.7495 1.9425 0.4305 #> [1552,] 1.7025 0.8655 2.5175 1.5955 0.4115 #> [1553,] 1.2885 0.2425 0.4515 0.4055 0.7675 #> [1554,] 0.4545 0.7485 1.2795 0.7375 0.2075 #> [1555,] 0.5255 1.0065 0.6535 1.1505 1.3695 #> [1556,] 0.0465 0.0465 0.0635 0.0275 0.0685 #> [1557,] 0.3215 0.7695 0.5815 0.3765 0.8975 #> [1558,] 1.6885 1.3335 1.0985 1.9225 0.8885 #> [1559,] 1.9785 1.0825 1.6555 1.4155 0.7025 #> [1560,] 1.3535 1.5805 2.5555 1.0725 0.9725 #> [1561,] 2.0505 0.6355 0.9745 0.9775 1.1455 #> [1562,] 4.1625 0.9885 4.7415 4.2715 3.6255 #> [1563,] 1.4455 0.5765 0.4265 0.4285 1.0925 #> [1564,] 1.6395 2.6005 1.1635 2.5845 0.5395 #> [1565,] 0.8095 1.7305 0.8845 0.7085 0.4765 #> [1566,] 0.4945 0.3535 0.5425 0.3885 0.3125 #> [1567,] 0.1735 4.2505 0.2575 3.3245 4.8195 #> [1568,] 0.0335 0.0755 0.0435 0.0555 0.0485 #> [1569,] 3.6815 2.1415 1.8735 0.6855 1.8975 #> [1570,] 2.7845 1.7345 3.4205 3.3615 0.7165 #> [1571,] 0.6245 0.9635 0.7765 0.7325 1.4115 #> [1572,] 0.7645 2.5095 0.8165 2.2085 3.5775 #> [1573,] 1.8245 0.2475 0.3845 0.2975 0.9635 #> [1574,] 0.6825 0.1875 0.2655 0.2525 0.4495 #> [1575,] 2.7985 0.6145 1.6705 2.4895 0.3255 #> [1576,] 1.6975 0.9345 0.7225 0.6385 3.3625 #> [1577,] 1.0875 2.2885 0.7255 0.7455 1.5415 #> [1578,] 3.3505 1.6975 0.9635 1.1705 2.1195 #> [1579,] 0.8645 4.4515 1.6525 4.6185 4.2645 #> [1580,] 2.1335 1.0675 1.0545 1.9995 0.9495 #> [1581,] 1.5365 0.3725 0.8135 0.7775 0.6835 #> [1582,] 0.1405 0.2575 0.1955 0.2135 0.7095 #> [1583,] 2.1175 0.9275 0.5025 0.5775 2.6975 #> [1584,] 1.1065 0.7435 1.3135 1.2255 1.5375 #> [1585,] 0.9485 3.9275 2.1215 2.4835 1.6785 #> [1586,] 0.6465 0.3165 0.2355 0.1975 0.1795 #> [1587,] 0.1915 0.7605 0.2675 0.5885 0.2095 #> [1588,] 0.4955 0.7725 0.3655 0.0885 0.7495 #> [1589,] 0.3725 3.1115 0.6185 0.8685 4.0315 #> [1590,] 0.8145 1.5645 0.9235 0.9875 2.9855 #> [1591,] 2.2015 1.5175 1.4865 0.7035 1.3435 #> [1592,] 4.1065 3.9745 4.6645 3.7545 0.6125 #> [1593,] 0.8265 1.4315 0.8885 1.8385 2.8055 #> [1594,] 4.2885 1.1655 4.4265 3.6475 0.5375 #> [1595,] 1.0345 1.7145 1.4285 1.9375 0.8705 #> [1596,] 0.1605 0.1015 0.0975 0.1185 0.0555 #> [1597,] 3.8455 1.0895 1.2155 0.8735 0.7765 #> [1598,] 1.4365 0.4295 0.5015 0.5115 0.4315 #> [1599,] 0.4425 0.7185 0.7695 0.3805 0.6645 #> [1600,] 0.0405 0.9525 0.0605 0.1335 0.7135 #> [1601,] 0.5665 1.0835 0.6495 0.9395 2.7455 #> [1602,] 0.4825 1.8055 0.7735 0.4535 2.9875 #> [1603,] 3.6705 0.7805 0.9215 0.7565 1.1235 #> [1604,] 0.0615 0.0035 0.0215 0.0165 0.0095 #> [1605,] 3.5985 1.3405 1.8795 1.8425 0.5995 #> [1606,] 0.6555 0.8035 0.5855 0.6225 0.6285 #> [1607,] 0.0135 0.1905 0.0165 0.1605 0.5405 #> [1608,] 0.2815 0.5075 0.4595 0.5595 0.6235 #> [1609,] 0.3275 1.1675 0.5695 0.6935 1.3465 #> [1610,] 0.0395 0.0375 0.0185 0.0135 0.0075 #> [1611,] 0.4775 4.2945 0.7305 0.6075 4.7765 #> [1612,] 4.4115 1.4545 2.7105 2.7195 0.8515 #> [1613,] 3.9815 0.9935 0.8795 3.2285 3.9775 #> [1614,] 4.1425 0.5855 1.8675 1.1575 0.2925 #> [1615,] 0.5565 0.6375 0.5515 0.7225 0.3185 #> [1616,] 3.7385 0.8465 1.0345 1.4465 2.8015 #> [1617,] 3.4115 0.5455 2.3995 2.7695 0.2825 #> [1618,] 0.2095 0.3055 0.1315 0.2715 1.3905 #> [1619,] 0.1935 0.1805 0.2075 0.1545 0.1995 #> [1620,] 0.7255 4.0795 1.1215 2.3955 4.1015 #> [1621,] 0.9045 3.6305 1.2585 3.3885 4.3835 #> [1622,] 0.8305 1.6615 2.4025 0.6555 0.6635 #> [1623,] 0.1175 0.0735 0.1235 0.1065 0.0765 #> [1624,] 0.2275 0.8515 0.7555 0.7355 2.9335 #> [1625,] 1.7475 0.3035 2.2935 3.0025 1.4085 #> [1626,] 2.4335 4.3745 4.1925 0.8445 3.9855 #> [1627,] 4.7135 1.1525 2.2235 1.5585 0.8965 #> [1628,] 3.6785 0.9315 2.9465 1.6595 1.5025 #> [1629,] 1.2105 0.5105 0.3385 0.4015 0.7525 #> [1630,] 1.9385 1.2665 1.2505 0.7475 0.4885 #> [1631,] 0.9175 1.2805 1.1185 0.8595 1.7295 #> [1632,] 2.3485 1.8245 2.7045 0.9715 1.0525 #> [1633,] 4.3025 0.9875 4.4635 4.3175 3.2895 #> [1634,] 0.5005 0.3325 0.7325 0.2985 0.4625 #> [1635,] 4.3395 1.2875 2.7295 1.5005 0.8935 #> [1636,] 3.5035 0.4955 2.6985 2.5665 0.3555 #> [1637,] 0.1835 1.1715 0.4625 0.6545 0.8795 #> [1638,] 2.8105 1.2785 1.5755 1.3655 0.8685 #> [1639,] 0.6025 4.2735 1.0155 2.6665 4.4355 #> [1640,] 3.6565 0.2385 2.5065 2.6765 0.0835 #> [1641,] 0.2495 0.5935 0.4985 0.2305 0.3045 #> [1642,] 1.0825 1.8275 1.4385 0.6915 1.0145 #> [1643,] 3.6385 1.1195 2.9615 2.3315 0.9365 #> [1644,] 0.0855 0.0515 0.1875 0.2265 0.1035 #> [1645,] 3.7705 1.4325 1.9605 2.0925 0.6895 #> [1646,] 3.1735 1.5135 1.8915 1.6745 0.9625 #> [1647,] 0.9055 1.4125 1.4895 1.2875 3.3525 #> [1648,] 1.8145 0.3525 0.8265 0.8135 0.1045 #> [1649,] 0.1705 1.0705 0.2695 0.7795 3.3865 #> [1650,] 0.9395 2.6875 1.7945 0.9725 3.0225 #> [1651,] 3.6615 1.0465 0.8935 0.6205 2.7695 #> [1652,] 0.7625 0.7515 1.4745 2.0635 2.8715 #> [1653,] 0.4705 1.0415 2.1745 0.6005 0.6415 #> [1654,] 1.6135 0.8285 1.7285 0.7105 1.2065 #> [1655,] 3.9545 0.5955 0.8895 1.7215 0.5595 #> [1656,] 0.5355 1.6565 1.0875 1.0055 1.5575 #> [1657,] 0.2625 0.8875 0.3915 0.5735 1.7735 #> [1658,] 0.2955 4.4195 0.9255 1.4025 3.9295 #> [1659,] 0.9335 1.2735 0.6165 0.5395 3.2455 #> [1660,] 1.8585 0.8955 0.6995 0.5545 1.2985 #> [1661,] 0.8565 2.2365 0.8745 2.3285 2.8285 #> [1662,] 0.2715 0.2665 0.2005 0.3155 0.1565 #> [1663,] 0.5555 1.7935 1.0275 1.1895 1.5445 #> [1664,] 0.5805 3.2855 0.9625 2.9575 2.2145 #> [1665,] 0.8825 4.0935 1.6755 1.5565 4.7195 #> [1666,] 0.3635 1.6945 0.5945 0.5225 2.5685 #> [1667,] 0.0965 0.1485 0.1165 0.1775 0.1455 #> [1668,] 2.2555 1.0405 1.8075 0.9135 1.0095 #> [1669,] 0.6595 0.5525 0.4835 0.3715 0.5705 #> [1670,] 0.4815 0.4685 0.4455 0.4215 0.2815 #> [1671,] 1.2095 0.2635 0.2605 0.9095 0.4695 #> [1672,] 2.8235 2.2015 3.8995 4.3775 0.5955 #> [1673,] 1.2085 3.8295 3.1345 0.9025 3.0925 #> [1674,] 1.5975 0.7065 0.6715 0.7635 1.3035 #> [1675,] 0.5935 0.1705 0.6845 0.6105 0.3745 #> [1676,] 0.3515 0.1185 0.1695 0.0905 0.1745 #> [1677,] 1.4625 0.8345 1.4625 1.5415 0.8565 #> [1678,] 1.7975 0.2045 0.1525 0.1635 0.2635 #> [1679,] 0.4375 1.5585 0.6435 0.6955 3.2045 #> [1680,] 2.7775 0.6675 3.5675 4.1395 1.8265 #> [1681,] 0.8285 4.3405 1.7495 3.3095 4.0455 #> [1682,] 0.2595 0.2485 0.6765 0.3105 0.0645 #> [1683,] 0.1095 0.2785 0.1205 0.1875 0.8005 #> [1684,] 0.1315 0.4845 0.1915 0.3535 0.6825 #> [1685,] 1.6035 1.0135 0.7535 1.0265 0.7305 #> [1686,] 2.4085 0.4215 0.7965 1.0005 0.4045 #> [1687,] 0.8115 3.2645 1.5375 0.8565 3.3175 #> [1688,] 0.9295 0.3895 0.6195 0.4915 0.1785 #> [1689,] 0.5275 1.1245 0.7205 0.6185 0.9615 #> [1690,] 3.0675 0.4995 0.6065 0.3755 0.7345 #> [1691,] 0.7065 0.8075 0.5675 0.7405 0.5205 #> [1692,] 0.3105 0.1495 0.3705 0.2025 0.2705 #> [1693,] 4.3045 0.8505 3.5525 2.7515 3.1895 #> [1694,] 0.3295 0.2035 0.1335 0.1725 0.1915 #> [1695,] 3.2555 0.6105 1.2065 1.9955 2.3595 #> [1696,] 0.4495 0.2025 0.2905 0.2925 0.1955 #> [1697,] 4.8875 2.5265 4.4175 3.6795 0.8505 #> [1698,] 3.0525 3.6735 1.9835 2.0605 0.8445 #> [1699,] 0.2305 1.2835 0.3095 1.4965 2.1245 #> [1700,] 1.1445 0.8755 1.0645 0.3865 0.3215 #> [1701,] 0.4455 0.2655 0.6825 1.1225 0.6795 #> [1702,] 0.9655 1.6575 1.6775 2.1685 0.9695 #> [1703,] 2.7705 1.3395 1.6965 1.5675 0.8655 #> [1704,] 0.9155 0.5965 0.5355 0.6475 2.9505 #> [1705,] 1.0925 1.4885 0.9515 2.8925 0.5295 #> [1706,] 4.9405 1.3735 3.9435 1.5345 0.8335 #> [1707,] 0.7355 0.7965 1.5685 1.1345 0.6685 #> [1708,] 2.4275 0.6425 2.9805 1.7075 0.2165 #> [1709,] 3.5725 1.4285 4.6045 4.9715 0.7275 #> [1710,] 0.1505 1.0715 0.2485 0.3975 1.9965 #> [1711,] 0.1535 0.0965 0.1285 0.0765 0.0565 #> [1712,] 0.6675 0.7565 1.6585 0.5695 0.1905 #> [1713,] 1.0395 0.8615 0.7065 0.5165 3.1015 #> [1714,] 3.0465 0.7125 1.2425 0.9565 0.7125 #> [1715,] 2.8305 0.2005 0.3635 0.5235 0.9305 #> [1716,] 0.6055 0.5285 0.5215 0.4775 0.8025 #> [1717,] 0.5415 0.1745 0.2825 0.3185 0.2235 #> [1718,] 3.7355 0.5225 0.5365 0.8625 1.0795 #> [1719,] 3.8645 0.4875 1.7725 1.4595 0.3995 #> [1720,] 0.3285 1.2305 0.4335 0.5785 0.5675 #> [1721,] 2.7545 3.4035 2.8945 1.9915 0.4005 #> [1722,] 3.9655 2.0365 4.2665 3.7375 0.3935 #> [1723,] 0.3925 0.6485 3.2075 0.7715 0.2875 #> [1724,] 0.1375 1.8095 0.2445 0.8385 3.3545 #> [1725,] 1.3615 0.7205 1.3345 0.7925 0.3705 #> [1726,] 2.7125 2.0695 2.2175 1.1235 0.9865 #> [1727,] 1.2025 1.4305 0.8115 1.1005 1.9105 #> [1728,] 0.6005 0.1815 0.3055 0.3115 0.1705 #> [1729,] 0.2115 0.1895 0.2265 0.1845 0.4805 #> [1730,] 0.7775 4.4145 1.2525 4.7445 4.1505 #> [1731,] 0.9195 3.7215 1.6815 1.2815 1.4855 #> [1732,] 4.0605 1.2655 4.3155 4.2645 0.8305 #> [1733,] 1.1035 0.8905 0.4845 0.7125 1.0375 #> [1734,] 1.0115 0.3775 0.6135 0.2785 0.5275 #> [1735,] 4.2255 2.5415 4.0185 3.2215 0.9165 #> [1736,] 3.4795 2.0595 4.4755 4.3435 0.7515 #> [1737,] 0.2295 1.5225 0.4105 1.0355 3.6095 #> [1738,] 0.9325 0.7575 0.7815 1.0635 0.7725 #> [1739,] 0.0125 0.0785 0.0235 0.0575 0.0655 #> [1740,] 0.2655 1.7625 0.4425 0.5835 3.6285 #> [1741,] 0.6765 0.3335 0.3235 0.3305 0.2325 #> [1742,] 2.1655 1.0585 2.6405 2.6555 0.3565 #> [1743,] 4.0995 0.9085 2.8985 1.7865 0.8865 #> [1744,] 0.2985 0.6435 0.3715 0.2195 0.3005 #> [1745,] 0.5045 1.1865 0.6235 0.6985 1.8795 #> [1746,] 4.6015 0.6925 2.9745 3.9345 0.4815 #> [1747,] 0.2545 0.8665 0.5055 0.4245 0.4945 #> [1748,] 0.9845 4.7265 1.4665 3.9065 4.6145 #> [1749,] 0.4575 3.0285 1.2455 0.9905 3.8615 #> [1750,] 3.9165 0.4515 1.2775 2.3645 0.5615 #> [1751,] 1.5515 3.8305 2.8375 0.6495 1.6985 #> [1752,] 1.2135 0.6755 0.7865 0.9245 0.3625 #> [1753,] 0.4325 0.1775 0.3175 0.2095 0.1815 #> [1754,] 2.8905 0.4795 1.0835 0.9005 0.4055 #> [1755,] 3.5405 1.3085 1.1545 0.9705 1.3485 #> [1756,] 0.3315 3.4425 0.9795 3.2885 2.0825 #> [1757,] 1.8225 0.6505 2.5675 3.6625 1.4545 #> [1758,] 0.2015 0.3605 0.1645 0.0995 2.5265 #> [1759,] 3.4955 3.0155 4.7855 4.3695 0.4595 #> [1760,] 1.1475 0.5205 0.6465 0.6945 1.0515 #> [1761,] 0.9555 1.7755 1.7175 1.6865 2.5785 #> [1762,] 0.9115 1.1145 1.2855 0.4855 0.4705 #> [1763,] 4.1795 0.8555 3.8745 4.5205 0.3825 #> [1764,] 1.7455 0.2845 0.5925 1.4475 0.5165 #> [1765,] 0.8215 0.5155 0.3595 0.3725 1.6385 #> [1766,] 1.0215 0.5815 0.4735 0.8585 0.6765 #> [1767,] 2.1015 1.5005 0.8425 1.0885 2.8915 #> [1768,] 0.3545 0.1135 0.3875 0.6335 0.5465 #> [1769,] 3.4385 0.3695 1.5635 2.4155 2.1645 #> [1770,] 1.4575 1.7255 2.2475 1.4585 0.9825 #> [1771,] 1.4615 0.2055 0.8225 0.6445 0.0415 #> [1772,] 0.0905 0.0505 0.0915 0.0805 0.0605 #> [1773,] 1.3055 0.1735 0.3355 0.4495 0.0735 #> [1774,] 2.8085 0.6835 0.8695 1.9755 0.9565 #> [1775,] 3.0625 2.4295 2.9485 2.5675 0.8135 #> [1776,] 0.4245 0.8835 0.5265 0.2555 0.3105 #> [1777,] 0.3875 0.9465 0.4185 1.5085 1.9155 #> [1778,] 0.8275 4.5245 1.4945 3.5585 4.8885 #> [1779,] 1.4435 1.2495 2.9975 3.2645 0.8045 #> [1780,] 0.4805 0.1995 0.3525 0.4375 0.1515 #> [1781,] 3.1505 0.6695 0.8515 0.8175 3.2525 #> [1782,] 3.3565 0.3925 0.5805 0.8395 0.8395 #> [1783,] 0.9075 2.2375 1.3055 1.7955 4.2145 #> [1784,] 0.9085 3.4485 1.5325 2.7305 3.3895 #> [1785,] 3.1085 1.1395 1.3005 1.4135 0.5895 #> [1786,] 0.7655 1.6115 1.4525 0.5795 0.5145 #> [1787,] 1.1415 0.9905 0.5635 0.9625 1.7695 #> [1788,] 4.3475 0.9435 3.6035 4.3745 2.8165 #> [1789,] 0.4675 0.9385 0.7215 0.6515 0.2845 #> [1790,] 0.1125 0.5825 0.1735 0.1235 0.7385 #> [1791,] 1.0265 0.2675 0.9075 1.7655 1.0755 #> [1792,] 3.6845 0.8105 0.8285 1.1535 0.7865 #> [1793,] 1.2425 0.3505 0.6265 0.4145 0.1695 #> [1794,] 2.4035 0.4695 1.9205 0.8355 0.2195 #> [1795,] 1.5785 0.3355 0.5095 0.2895 0.2455 #> [1796,] 0.2255 0.1865 0.3975 0.2425 0.6155 #> [1797,] 4.7585 0.5145 1.5645 2.3815 1.1465 #> [1798,] 4.7805 1.2645 2.8745 1.3805 0.7775 #> [1799,] 0.6395 2.4445 0.8685 0.5945 3.4365 #> [1800,] 3.3085 1.3455 4.8635 4.7945 0.2965 #> [1801,] 0.3195 0.8675 0.2935 0.6375 1.1005 #> [1802,] 1.7075 0.9725 1.4755 1.7745 1.9205 #> [1803,] 0.0015 0.0275 0.0065 0.0095 0.1805 #> [1804,] 0.1905 0.1535 0.2185 0.1005 0.4575 #> [1805,] 0.8415 2.0505 1.4245 1.4805 1.7265 #> [1806,] 3.5885 0.6605 2.5965 0.8295 0.2575 #> [1807,] 1.7635 0.4505 1.0975 0.5145 0.5215 #> [1808,] 2.5995 0.2265 0.8755 0.8785 0.1315 #> [1809,] 0.8395 1.3655 0.7935 0.6845 1.8195 #> [1810,] 0.0555 0.1035 0.0425 0.0915 0.2145 #> [1811,] 0.5235 1.8075 0.7045 2.9665 3.1395 #> [1812,] 0.2385 2.2005 0.5505 0.4815 2.5305 #> [1813,] 0.5515 2.7035 1.2025 0.3045 1.5045 #> [1814,] 0.7195 2.0485 0.8985 2.7385 3.8125 #> [1815,] 0.0865 1.1035 0.1665 0.4325 1.2425 #> [1816,] 2.8065 0.5615 1.3505 0.7905 0.6255 #> [1817,] 3.3455 1.2015 4.2955 4.0235 0.9385 #> [1818,] 1.1325 0.7005 0.3415 0.8605 2.0855 #> [1819,] 0.6535 2.7235 1.2405 1.8255 1.4095 #> [1820,] 1.3895 1.6625 1.5395 1.7775 0.7205 #> [1821,] 0.4855 0.6815 0.3815 0.3125 0.4135 #> [1822,] 1.1945 1.9705 0.7755 0.8005 2.2925 #> [1823,] 0.7235 0.8815 0.5005 0.7625 3.1335 #> [1824,] 0.9565 4.4155 2.2655 4.0265 4.7295 #> [1825,] 2.3695 1.2885 0.9095 0.9275 1.4675 #> [1826,] 1.0665 3.2105 3.3235 0.7415 3.1865 #> [1827,] 0.4175 2.4945 0.6875 0.3625 2.1475 #> [1828,] 2.6655 0.7885 1.6865 0.6735 0.6215 #> [1829,] 0.0495 0.0455 0.0505 0.0445 0.0135 #> [1830,] 0.4875 3.4725 1.0845 1.1485 3.4055 #> [1831,] 0.7965 2.8755 0.9585 0.9685 4.2575 #> [1832,] 0.0595 0.3885 0.0955 0.0415 0.1575 #> [1833,] 0.9405 4.4795 1.6485 2.2955 4.1285 #> [1834,] 2.5005 0.9455 3.6045 4.2595 2.3405"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/PseudoCop.html","id":null,"dir":"Reference","previous_headings":"","what":"Redefining the conditional distribution function of pair-copulas — PseudoCop","title":"Redefining the conditional distribution function of pair-copulas — PseudoCop","text":"PseudoCop recalculates conditional distribution function pair-copulas conditioning variables conditioning set less 1. calculation based recursive approaches tree tree sequentially \\(T_3\\) \\(T_{d-1}\\). details, refer Kiriliouk, ., Lee, J., & Segers, J. (2023)","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/PseudoCop.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Redefining the conditional distribution function of pair-copulas — PseudoCop","text":"","code":"PseudoCop(j, cind, data, StrMtx, fam, MaxMtr, Par)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/PseudoCop.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Redefining the conditional distribution function of pair-copulas — PseudoCop","text":"j Integer; number conditioning variables conditioning set \\(D(e)\\) cind Integer; stands column index corresponding \\(\\)th column. Given \\(\\)th column, subset data given variables \\(D(e)\\) less 1. data \\(N\\times d\\) data matrix either pseudo-observations random samples inverted-Pareto distribution StrMtx \\(d \\times d\\) specified structure matrix fam \\(d \\times d\\) specified family matrix MaxMtr \\(d\\times d\\) max-matrix Par \\(d\\times d\\) recursively estimated parameter matrix previous trees","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/PseudoCop.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Redefining the conditional distribution function of pair-copulas — PseudoCop","text":"list two numeric vectors, including two conditional distribution functions pair-copulas: VdirC VindirC","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/PseudoCop.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Redefining the conditional distribution function of pair-copulas — PseudoCop","text":"Kiriliouk, ., Lee, J., & Segers, J. (2023). X-Vine Models Multivariate Extremes. arXiv preprint arXiv:2312.15205.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSeqEst.html","id":null,"dir":"Reference","previous_headings":"","what":"Sequential parameter estimation for X-Vine models — XVineSeqEst","title":"Sequential parameter estimation for X-Vine models — XVineSeqEst","text":"XVineSeqEst estimates parameters associated bivariate (tail) copula densities tree tree sequentially \\(T_1\\) \\(T_{d-1}\\). Information X-Vine specification contained object XVineSpec().","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSeqEst.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sequential parameter estimation for X-Vine models — XVineSeqEst","text":"","code":"XVineSeqEst(data, Rank = T, qt = 0.2, XVS, method = \"mle\")"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSeqEst.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sequential parameter estimation for X-Vine models — XVineSeqEst","text":"data \\(n\\times d\\) data matrix inverted Pareto distribution. case, Rank=T recommended rank transformation properly work data already uniform scale. either original data samples multivariate Pareto distribution Pareto scale used, Rank=T required. Rank Logical; whether rank transformation performed (Rank=T; default). switches Pareto scale uniform scale. qt Numeric; lower threshold rank transformation. XVS list consisting three components: reconstructed structure matrices, family matrices, parameter matrices, see:XVineSpec(). method Character; indicates parameter estimation method (method=\"mle\"; default).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSeqEst.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sequential parameter estimation for X-Vine models — XVineSeqEst","text":"list four components: matrix sequentially estimated parameters stored Params, estimated dependence measures stored matrix DepMeasure first row empirical Chi values subsequent trees empirical Kendall's Tau, , effective sample size edge vine tree stored matrix EffectSamp, log-likelihood value edge tree stored matrix logLik.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSeqEst.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sequential parameter estimation for X-Vine models — XVineSeqEst","text":"","code":"StrMtx <- matrix(c(1, 1, 2, 2, 4, 0, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 0, 4, 1, 0, 0, 0, 0, 5),5,byrow = TRUE) ParMtx <- matrix(c(0, 1.5, 2, 2.5, 2,                 0, 0, 2, 2.5, 0.7,                 0, 0, 0, 0.4, -0.3,                 0, 0, 0, 0, 0.1,                 0, 0, 0, 0, 0),5,byrow = TRUE) FamMtx <- matrix(c(0, 1, 2, 3, 4,                    0, 0, 3, 4, 1,                    0, 0, 0, 3, 1,                    0, 0, 0, 0, 1,                    0, 0, 0, 0, 0),5,byrow = TRUE) # X-vine speicification XVS=XVineSpec(M = StrMtx, Mmod = FamMtx, Mpar = ParMtx) # Pareto random samples Dat_P=ParetoSim(n = 5000, XVS = XVS) # Pareto scale # Sequential parameter estimation SeqEstOut=XVineSeqEst(data = Dat_P, Rank = TRUE, qt = 0.05, XVS=XVS, method = 'mle')"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation from X-Vine models — XVineSim","title":"Simulation from X-Vine models — XVineSim","text":"XVineSim() generates multivariate samples X-Vine models given one variables less 1. simulation algorithm selects X-vine specification associated conditioned variable uses recursive approaches return \\(N \\times d\\) data matrix. details simulation algorithms, refer Kiriliouk, ., Lee, J., & Segers, J. (2023)","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation from X-Vine models — XVineSim","text":"","code":"XVineSim(N, XVS, k)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation from X-Vine models — XVineSim","text":"N Integer; number samples simulate. XVS list three matrix components conditioning variable: reproduced structure matrices family matrices parameter matrices. specify argument XVS, see XVineSpec(). k Integer; \\(k\\)th, \\(k\\{1,\\ldots,d}\\), conditioning index condition .","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation from X-Vine models — XVineSim","text":"\\(N\\times d\\) data matrix used calculate extremal functions ParetoSim().","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSim.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulation from X-Vine models — XVineSim","text":"Kiriliouk, ., Lee, J., & Segers, J. (2023). X-Vine Models Multivariate Extremes. arXiv preprint arXiv:2312.15205.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation from X-Vine models — XVineSim","text":"","code":"##  A 5-dim X-vine model StrMtx <- matrix(c(1, 1, 2, 2, 4,                   0, 2, 1, 3, 2,                   0, 0, 3, 1, 3,                   0, 0, 0, 4, 1,                   0, 0, 0, 0, 5),5,byrow = TRUE) ParMtx <- matrix(c(0, 1.5, 2, 2.5, 2,                    0, 0, 2, 2.5, 0.7,                    0, 0, 0, 0.4, -0.3,                    0, 0, 0, 0, 0.1,                    0, 0, 0, 0, 0),5,byrow = TRUE) FamMtx <- matrix(c(0, 1, 2, 3, 4,                    0, 0, 3, 4, 1,                    0, 0, 0, 3, 1,                    0, 0, 0, 0, 1,                    0, 0, 0, 0, 0),5,byrow = TRUE) ##  X-Vine specification XVS=XVineSpec(M = StrMtx, Mmod = FamMtx, Mpar = ParMtx) ##  Simulate from X-vine model when X_1 is less than 1. XVineSim(N = 100, XVS = XVS, k = 1) #>                [,1]         [,2]         [,3]         [,4]         [,5] #>   [1,] 3.812795e-01 3.463828e+00 7.245930e-01 1.236626e+00 4.600108e+00 #>   [2,] 4.841271e-01 5.661966e+00 1.324210e+00 2.825996e+00 1.447557e+01 #>   [3,] 1.507756e-01 1.689485e+00 3.959396e-01 2.615363e-01 1.991233e+00 #>   [4,] 1.457990e-01 3.931829e-02 8.879508e-02 5.051165e-02 1.853415e-02 #>   [5,] 2.030867e-01 6.749885e+00 4.584993e-01 1.040717e+00 3.622614e+00 #>   [6,] 9.640652e-02 1.556948e-01 1.041895e-01 1.051846e-01 1.201132e-01 #>   [7,] 6.105853e-01 9.676404e+00 1.828047e+00 2.014300e+00 8.387636e+00 #>   [8,] 4.394550e-01 3.240305e+00 1.168491e+00 1.190056e+00 1.893608e+00 #>   [9,] 1.958126e-01 1.117370e-01 3.285735e-01 4.500074e-01 3.023840e-01 #>  [10,] 6.362581e-01 1.246823e+00 1.095887e+00 2.127027e+00 1.279339e+00 #>  [11,] 7.024254e-01 1.025728e+00 7.747789e-01 1.239441e+00 1.286231e+00 #>  [12,] 1.601753e-01 2.199739e+00 2.706545e-01 1.062811e+00 7.905504e+00 #>  [13,] 1.341145e-01 1.323764e+00 1.786702e-01 4.291945e-01 2.817141e+00 #>  [14,] 9.736768e-01 2.496505e+00 1.112656e+00 1.017795e+00 1.764464e+00 #>  [15,] 7.464616e-01 8.223944e-01 9.396934e-01 1.143910e+00 9.579540e-01 #>  [16,] 2.643491e-01 7.844720e-01 5.914461e-01 9.937703e-01 7.710502e-01 #>  [17,] 1.200943e-01 2.509252e-01 1.607031e-01 2.230337e-01 2.703364e-01 #>  [18,] 4.645512e-01 2.207273e-01 3.408672e-01 4.326773e-01 2.847413e-01 #>  [19,] 5.809018e-01 1.147199e+00 1.104275e+00 8.072741e-01 3.646179e-01 #>  [20,] 2.432190e-01 2.667678e-01 1.615687e-01 1.853409e-01 1.458760e-01 #>  [21,] 7.655927e-01 1.711430e+00 1.141874e+00 8.858552e-01 1.066214e+00 #>  [22,] 7.769781e-01 2.155598e+00 1.371820e+00 1.327467e+00 6.807417e-01 #>  [23,] 9.307347e-01 5.068581e-01 4.605381e-01 6.630144e-01 7.341453e-01 #>  [24,] 8.828291e-01 2.254414e+00 2.595902e+00 1.514965e+00 4.088239e+00 #>  [25,] 1.590578e-01 8.628374e-02 7.373753e-02 4.716869e-02 8.480539e-02 #>  [26,] 5.595851e-01 1.129088e+00 8.213218e-01 8.614734e-01 3.277107e+00 #>  [27,] 7.416368e-01 1.154468e+01 2.083357e+00 4.120520e-01 4.220332e+00 #>  [28,] 3.538569e-01 7.324287e-01 5.885410e-01 5.499558e-01 4.790253e-01 #>  [29,] 7.611129e-01 9.660052e-01 7.075016e-01 9.945798e-01 7.819312e+00 #>  [30,] 7.249422e-01 2.302803e-01 6.778524e+00 1.622397e+01 1.175805e+00 #>  [31,] 1.123310e-01 8.545161e-01 2.246622e-01 4.832887e-01 4.798539e-01 #>  [32,] 8.005051e-01 2.163144e+00 9.768173e-01 8.484171e-01 1.401933e+00 #>  [33,] 5.455400e-01 6.643034e-01 4.228672e-01 7.579568e-01 1.058527e+00 #>  [34,] 3.730622e-02 8.651941e-02 4.078991e-02 6.891714e-02 2.645176e-01 #>  [35,] 2.387145e-03 6.195657e-03 3.181048e-03 2.752926e-03 3.146512e-03 #>  [36,] 4.702233e-01 1.901136e-01 1.892694e-01 1.139419e-01 1.153088e-01 #>  [37,] 8.772867e-01 6.975180e-01 5.955770e-01 1.187113e+00 1.499920e+00 #>  [38,] 6.114469e-01 3.009416e+00 1.633743e+00 1.171785e+00 2.103373e+00 #>  [39,] 6.729626e-01 9.124595e-01 5.579844e-01 8.915893e-01 3.616278e-01 #>  [40,] 7.124934e-01 6.750094e-01 5.198001e-01 4.719587e-01 3.761430e+00 #>  [41,] 5.907805e-01 2.755703e+00 7.114179e-01 5.391647e-01 1.255305e+00 #>  [42,] 7.376564e-01 3.864045e+00 9.482551e-01 2.133165e+00 1.271361e+01 #>  [43,] 1.182511e-02 1.447960e-02 9.290825e-03 1.154980e-02 1.449923e-02 #>  [44,] 6.254409e-01 4.201630e+01 1.863732e+00 2.628995e+00 6.702504e+01 #>  [45,] 7.250368e-01 1.931124e+00 4.693417e-01 1.427298e+00 3.493052e+00 #>  [46,] 9.563482e-01 7.753288e+00 2.272151e+00 2.500022e+00 1.114299e+01 #>  [47,] 7.019033e-01 8.920184e-01 8.768972e-01 3.726833e+00 1.687729e+00 #>  [48,] 3.303150e-01 2.474305e+00 4.188942e-01 1.347830e+00 9.140827e+00 #>  [49,] 9.628367e-02 1.247845e-01 2.406149e-01 6.824659e-01 2.354196e-01 #>  [50,] 2.946856e-01 1.809336e+00 4.343932e-01 9.308515e-01 5.738720e+00 #>  [51,] 1.290298e-01 1.633829e-01 1.795643e-01 2.014472e-01 1.955912e-01 #>  [52,] 4.204740e-01 3.411793e-01 4.981228e-01 4.083216e-01 3.770695e-01 #>  [53,] 9.804396e-01 9.490378e-01 6.477839e-01 9.936106e-01 5.913878e-01 #>  [54,] 5.449985e-01 1.459285e-01 1.996607e-01 2.922525e-01 3.137908e-01 #>  [55,] 8.973099e-01 2.814354e+00 1.341022e+00 3.035015e+00 9.877321e+00 #>  [56,] 7.336473e-01 2.439146e+00 8.152245e-01 1.847508e+00 1.069642e+00 #>  [57,] 7.273740e-01 1.385827e+00 8.582463e-01 1.015944e+00 3.415557e-01 #>  [58,] 8.367754e-01 1.032272e+00 1.054852e+00 1.198777e+00 1.119622e+00 #>  [59,] 6.981086e-01 8.209032e+00 1.200446e+00 3.672967e+00 1.288954e+01 #>  [60,] 3.512984e-01 3.827600e-01 3.021127e-01 6.293116e-01 2.661403e-01 #>  [61,] 3.303900e-01 1.352265e+00 6.706874e-01 1.063207e+00 1.749665e+00 #>  [62,] 1.087319e-05 3.926006e-04 2.572793e-05 6.622784e-05 2.264063e-03 #>  [63,] 1.144538e-01 2.895095e-01 2.003286e-01 1.965440e-01 1.196602e+00 #>  [64,] 2.771464e-01 1.526730e+00 4.579813e-01 1.642689e+00 5.582117e-01 #>  [65,] 4.299043e-01 7.361917e-02 7.507332e-02 1.603435e-01 1.083507e-01 #>  [66,] 9.782891e-01 1.899606e+00 1.736318e+00 1.094448e+00 1.285100e+00 #>  [67,] 1.616360e-01 6.256796e-03 2.587783e-02 1.008073e-01 1.739143e-03 #>  [68,] 6.148587e-01 3.818539e+00 8.137386e-01 1.873511e+00 3.971179e+00 #>  [69,] 7.482703e-01 7.224086e+00 2.225647e+00 2.204689e+00 8.913937e+00 #>  [70,] 1.742793e-01 1.111494e-01 1.287304e-01 8.412939e-02 1.531196e-01 #>  [71,] 3.834225e-01 6.862518e-02 2.042341e-01 1.077222e-01 8.958672e-03 #>  [72,] 6.333837e-01 5.236176e-01 6.218749e-01 1.597524e-01 5.843397e-02 #>  [73,] 6.780073e-01 1.249825e+00 4.749413e-01 1.366832e+00 1.578131e+00 #>  [74,] 3.610049e-01 2.937000e+00 3.051553e-01 2.029285e+00 6.398488e+00 #>  [75,] 6.453225e-02 1.246633e-01 1.034624e-01 1.076435e-01 3.668857e-01 #>  [76,] 3.307222e-01 6.631948e+00 9.601850e-01 1.549957e+00 3.099511e+00 #>  [77,] 2.771883e-02 1.026403e-01 5.069140e-02 5.343802e-02 3.037544e-01 #>  [78,] 5.595222e-01 3.140472e-01 4.445395e-01 3.920632e-01 3.719874e-01 #>  [79,] 9.156636e-01 2.888134e+00 1.432699e+00 1.743758e+00 4.325033e+00 #>  [80,] 4.646573e-01 9.151668e-01 3.828651e-01 1.168072e+00 2.036780e+00 #>  [81,] 1.519615e-01 4.600915e-02 8.666679e-02 7.967529e-02 7.140875e-02 #>  [82,] 5.087515e-01 6.534000e-01 7.485068e-01 4.095745e-01 3.925055e+00 #>  [83,] 6.878062e-01 2.363418e+00 1.403120e+00 1.586217e+00 7.662843e+00 #>  [84,] 9.507496e-01 2.067873e+00 5.378563e+00 7.829989e-01 4.412196e+00 #>  [85,] 8.997425e-01 6.807735e+00 1.609009e+00 1.465651e+00 3.992150e+00 #>  [86,] 4.772772e-01 1.035808e+01 6.616727e-01 5.585669e+00 1.256270e+02 #>  [87,] 4.683716e-01 1.987361e-01 2.870204e-01 1.903144e-01 2.783056e-01 #>  [88,] 6.269295e-01 1.011881e+00 2.185723e-01 6.853201e-01 2.779682e+00 #>  [89,] 8.241438e-01 3.345187e+00 1.016902e+00 1.311852e+00 4.136092e+00 #>  [90,] 2.681968e-01 1.304037e+00 4.047504e-01 1.342113e+00 2.374557e+00 #>  [91,] 4.646048e-01 1.509680e+00 1.080317e+00 2.893702e-01 1.603906e-01 #>  [92,] 3.202654e-01 3.622168e-01 7.781119e-01 4.469964e-01 7.478822e-01 #>  [93,] 3.912385e-01 5.102267e-01 4.955986e-01 2.987344e-01 3.629455e-01 #>  [94,] 6.873063e-01 4.417374e-01 5.159208e-01 9.400593e-01 2.052978e-01 #>  [95,] 5.033228e-01 3.846994e-01 1.520432e+00 1.363153e+00 1.948037e-01 #>  [96,] 3.255916e-01 9.402826e-01 1.059400e+00 6.423385e-01 9.285965e-01 #>  [97,] 6.176547e-01 3.005255e+00 1.177592e+00 9.170180e-01 5.473195e+00 #>  [98,] 6.043822e-01 8.950080e-01 6.532677e-01 1.009703e+00 7.141152e-01 #>  [99,] 1.114656e-02 4.604022e-03 6.213047e-03 5.645136e-03 6.236923e-03 #> [100,] 4.657457e-01 8.484610e-01 5.523621e-01 4.741693e-01 1.250180e+00"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSpec.html","id":null,"dir":"Reference","previous_headings":"","what":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","title":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","text":"Given initial X-vine matrix specification (structure matrix, family matrix, parameter matrix), XVineSpec() generates list redefined X-vine specifications conditioning variable. Preserving vine structure, function reconstructs structure matrices first diagonal element , denoted \\(m_{11}\\[d]\\), corresponds conditioning variable. Additionally, XVineSpec() includes associated parameter family matrices based given structure matrices.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSpec.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","text":"","code":"XVineSpec(M, Mmod, Mpar)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSpec.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","text":"M \\(d \\times d\\) upper triangular structure matrix. Mmod \\(d \\times d\\) strict upper triangular family matrix identifying bivariate (tail) copulas. Mpar \\(d \\times d\\) strict upper triangular parameter matrix associated family matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSpec.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","text":"list arrays includes: xmat: array dimension \\(d \\times d \\times d\\) containing rearranged X-vine structure matrices. fmat: array dimension \\(d \\times d \\times d\\) containing family matrices associated structure matrices. pmat: array dimension \\(d \\times d \\times d\\) containing parameter matrices associated structure matrices. xedge: list edges corresponding initial structure matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSpec.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","text":"use exact simulation algorithm multivariate Pareto distribution Engelke Hitz (2020) Kiriliouk et al. (2023), condition variable calculate extremal functions. conditioning variable, index conditioning variable placed first diagonal element structure matrix. Specifically, \\(d \\times d\\) structure matrix, element \\(m_{jj}\\[d]\\) corresponds index conditioning variable \\(X_j\\) \\(j=1,\\ldots,d\\). reproduced structure matrices maintain vine tree structure. corresponding parameter matrices contain parameter values bivariate (tail) copulas. family matrices, first row specifies bivariate tail copulas remaining rows specify bivariate copulas.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSpec.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","text":"Kiriliouk, ., Lee, J., & Segers, J. (2023). X-Vine Models Multivariate Extremes. arXiv preprint arXiv:2312.15205. Engelke, S., & Hitz, . S. (2020). Graphical models extremes. Journal Royal Statistical Society Series B: Statistical Methodology, 82(4), 871-932.","code":""},{"path":[]},{"path":"https://jeongjinlee88.github.io/Xvine/reference/XVineSpec.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reproduce the given X-vine matrix specification depending on each conditioning variable — XVineSpec","text":"","code":"##  A 6 x 6 structure matrix M <- cbind(c(1,0,0,0,0,0), c(1,4,0,0,0,0), c(4,1,6,0,0,0),           c(4,1,6,3,0,0), c(6,4,1,3,5,0), c(3,4,1,6,5,2)) ##  A 6 x 6 family matrix Mmod <- cbind(rep(0,6),c(\"neglog\", rep(0,5)),               c(\"hr\", \"clayton\",  rep(0,4)),               c(\"log\", \"gumbel\", \"joe\", rep(0,3)),               c(\"dir\", \"frank\", \"clayton\", \"gumbel\", 0, 0),               c(\"neglog\", \"joe\", \"frank\", \"clayton\", \"gumbel\", 0)) ##  A 6 x 6 parameter matrix Mpar <- cbind(rep(0,6),c(0.25, rep(0,5)), c(0.3, 0.7,  rep(0,4)),               c(0.5,0.7,0.1, rep(0,3)), c(0.2,0.8,0.3,0.55, 0, 0),               c(0.1,0.9,0.75,0.3,0.45, 0)) ##  Permute the given X-vine specification PermXVineSpec <- XVineSpec(M,Mmod,Mpar) PermXVineSpec[[1]] #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    4    4    6    3 #> [2,]    0    4    1    1    4    4 #> [3,]    0    0    6    6    1    1 #> [4,]    0    0    0    3    3    6 #> [5,]    0    0    0    0    5    5 #> [6,]    0    0    0    0    0    2 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    2    2    3    4    4    6 #> [2,]    0    3    2    3    1    4 #> [3,]    0    0    4    2    3    1 #> [4,]    0    0    0    1    2    3 #> [5,]    0    0    0    0    6    2 #> [6,]    0    0    0    0    0    5 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    3    3    4    3    4    6 #> [2,]    0    4    3    4    1    4 #> [3,]    0    0    1    1    3    1 #> [4,]    0    0    0    2    2    3 #> [5,]    0    0    0    0    6    2 #> [6,]    0    0    0    0    0    5 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    4    4    4    3    4    6 #> [2,]    0    1    1    4    1    4 #> [3,]    0    0    3    1    3    1 #> [4,]    0    0    0    2    2    3 #> [5,]    0    0    0    0    6    2 #> [6,]    0    0    0    0    0    5 #>  #> , , 5 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    5    5    6    4    4    3 #> [2,]    0    6    5    6    1    4 #> [3,]    0    0    4    5    6    1 #> [4,]    0    0    0    1    5    6 #> [5,]    0    0    0    0    3    5 #> [6,]    0    0    0    0    0    2 #>  #> , , 6 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    6    6    4    4    3    6 #> [2,]    0    4    6    1    4    4 #> [3,]    0    0    1    6    1    1 #> [4,]    0    0    0    3    6    3 #> [5,]    0    0    0    0    2    2 #> [6,]    0    0    0    0    0    5 #>  cbind(PermXVineSpec[[1]][,,5],PermXVineSpec[[2]][,,5]) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]  [,9]    [,10]     [,11]    #> [1,] \"5\"  \"5\"  \"6\"  \"4\"  \"4\"  \"3\"  \"0\"  \"dir\" \"hr\"    \"neglog\"  \"log\"    #> [2,] \"0\"  \"6\"  \"5\"  \"6\"  \"1\"  \"4\"  \"0\"  \"0\"   \"frank\" \"clayton\" \"gumbel\" #> [3,] \"0\"  \"0\"  \"4\"  \"5\"  \"6\"  \"1\"  \"0\"  \"0\"   \"0\"     \"clayton\" \"joe\"    #> [4,] \"0\"  \"0\"  \"0\"  \"1\"  \"5\"  \"6\"  \"0\"  \"0\"   \"0\"     \"0\"       \"gumbel\" #> [5,] \"0\"  \"0\"  \"0\"  \"0\"  \"3\"  \"5\"  \"0\"  \"0\"   \"0\"     \"0\"       \"0\"      #> [6,] \"0\"  \"0\"  \"0\"  \"0\"  \"0\"  \"2\"  \"0\"  \"0\"   \"0\"     \"0\"       \"0\"      #>      [,12]     #> [1,] \"neglog\"  #> [2,] \"joe\"     #> [3,] \"frank\"   #> [4,] \"clayton\" #> [5,] \"gumbel\"  #> [6,] \"0\"       ##  Compare with cbind(M,Mmod): looks ok! ##  Truncated X-vine specification at tree level 3 M <- cbind(c(1,0,0,0,0,0), c(1,4,0,0,0,0), c(4,1,6,0,0,0),            c(4,1,6,3,0,0), c(6,4,1,0,5,0), c(3,4,1,0,0,2)) Mmod <- cbind(rep(0,6),c(\"neglog\", rep(0,5)), c(\"hr\", \"clayton\",  rep(0,4)),             c(\"log\", \"gumbel\", \"joe\", rep(0,3)), c(\"dir\", \"frank\", \"clayton\", 0, 0, 0),            c(\"neglog\", \"joe\", \"frank\", 0,0, 0)) Mpar <- cbind(rep(0,6),c(0.25, rep(0,5)), c(0.3, 0.7,  rep(0,4)),                c(0.5,0.7,0.1, rep(0,3)), c(0.2,0.8,0.3,0, 0, 0),               c(0.1,0.9,0.75,0,0, 0)) PermTrucXVine <- XVineSpec(M,Mmod,Mpar) PermTrucXVine[[1]] #> , , 1 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    1    1    4    4    6    3 #> [2,]    0    4    1    1    4    4 #> [3,]    0    0    6    6    1    1 #> [4,]    0    0    0    3    0    0 #> [5,]    0    0    0    0    5    0 #> [6,]    0    0    0    0    0    2 #>  #> , , 2 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    2    2    3    4    4    6 #> [2,]    0    3    2    3    1    4 #> [3,]    0    0    4    2    3    1 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    6    0 #> [6,]    0    0    0    0    0    5 #>  #> , , 3 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    3    3    4    3    4    6 #> [2,]    0    4    3    4    1    4 #> [3,]    0    0    1    1    3    1 #> [4,]    0    0    0    2    0    0 #> [5,]    0    0    0    0    6    0 #> [6,]    0    0    0    0    0    5 #>  #> , , 4 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    4    4    4    3    4    6 #> [2,]    0    1    1    4    1    4 #> [3,]    0    0    3    1    3    1 #> [4,]    0    0    0    2    0    0 #> [5,]    0    0    0    0    6    0 #> [6,]    0    0    0    0    0    5 #>  #> , , 5 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    5    5    6    4    4    3 #> [2,]    0    6    5    6    1    4 #> [3,]    0    0    4    5    6    1 #> [4,]    0    0    0    1    0    0 #> [5,]    0    0    0    0    3    0 #> [6,]    0    0    0    0    0    2 #>  #> , , 6 #>  #>      [,1] [,2] [,3] [,4] [,5] [,6] #> [1,]    6    6    4    4    3    6 #> [2,]    0    4    6    1    4    4 #> [3,]    0    0    1    6    1    1 #> [4,]    0    0    0    3    0    0 #> [5,]    0    0    0    0    2    0 #> [6,]    0    0    0    0    0    5 #>  cbind(PermTrucXVine[[1]][,,5],PermTrucXVine[[2]][,,5]) #compare with cbind(M,Mmod): looks ok! #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8]  [,9]    [,10]     [,11]    #> [1,] \"5\"  \"5\"  \"6\"  \"4\"  \"4\"  \"3\"  \"0\"  \"dir\" \"hr\"    \"neglog\"  \"log\"    #> [2,] \"0\"  \"6\"  \"5\"  \"6\"  \"1\"  \"4\"  \"0\"  \"0\"   \"frank\" \"clayton\" \"gumbel\" #> [3,] \"0\"  \"0\"  \"4\"  \"5\"  \"6\"  \"1\"  \"0\"  \"0\"   \"0\"     \"clayton\" \"joe\"    #> [4,] \"0\"  \"0\"  \"0\"  \"1\"  \"0\"  \"0\"  \"0\"  \"0\"   \"0\"     \"0\"       \"0\"      #> [5,] \"0\"  \"0\"  \"0\"  \"0\"  \"3\"  \"0\"  \"0\"  \"0\"   \"0\"     \"0\"       \"0\"      #> [6,] \"0\"  \"0\"  \"0\"  \"0\"  \"0\"  \"2\"  \"0\"  \"0\"   \"0\"     \"0\"       \"0\"      #>      [,12]    #> [1,] \"neglog\" #> [2,] \"joe\"    #> [3,] \"frank\"  #> [4,] \"0\"      #> [5,] \"0\"      #> [6,] \"0\""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/Xvine-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Xvine: Statistical Modelling for Multivariate Extremes via Vine Structures — Xvine-package","title":"Xvine: Statistical Modelling for Multivariate Extremes via Vine Structures — Xvine-package","text":"Modeling multivariate extremes via vine structures provides flexibility sparse structures high dimensions. Using recursive approaches, perform parameter estimation, select bivariate (tail) copulas, determine sequence vine tree.","code":""},{"path":[]},{"path":"https://jeongjinlee88.github.io/Xvine/reference/Xvine-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Xvine: Statistical Modelling for Multivariate Extremes via Vine Structures — Xvine-package","text":"Maintainer: Jeongjin Lee stecophil88@gmail.com (ORCID) Authors: Anna Kiriliouk anna.kiriliouk@unamur.(ORCID) Johan Segers johan.segers@uclouvain.(ORCID)","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/createMaxMtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a maximum matrix from a structure matrix with diagonal elements in ascending order — createMaxMtx","title":"Create a maximum matrix from a structure matrix with diagonal elements in ascending order — createMaxMtx","text":"createMaxMtx() creates max-matrix structure matrix diagonal elements put increasing order. max-matrix used sequential parameter estimation determine appropriate argument conditional pair-copulas. details, refer Chapter 6 Czado (2019).","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/createMaxMtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a maximum matrix from a structure matrix with diagonal elements in ascending order — createMaxMtx","text":"","code":"createMaxMtx(Matrix)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/createMaxMtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a maximum matrix from a structure matrix with diagonal elements in ascending order — createMaxMtx","text":"Matrix Numeric \\(d \\times d\\) upper triangular matrix specifies regular vine structure.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/createMaxMtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a maximum matrix from a structure matrix with diagonal elements in ascending order — createMaxMtx","text":"Numeric \\(d \\times d\\) upper triangular max-matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/createMaxMtx.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Create a maximum matrix from a structure matrix with diagonal elements in ascending order — createMaxMtx","text":"Czado, C. (2019). Analyzing dependent data vine copulas. Lecture Notes Statistics, Springer, 222.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/createMaxMtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a maximum matrix from a structure matrix with diagonal elements in ascending order — createMaxMtx","text":"","code":"##  Create a 5 x 5 upper triangular structure matrix StrMtx <- matrix(c(1, 1, 2, 2, 4, 0, 2, 1, 3, 2, 0, 0, 3, 1, 3, 0, 0, 0, 4, 1, 0, 0, 0, 0, 5),5,byrow = TRUE) ##  Derive the corresponding 5 x 5 upper triangular max-matrix MaxMtx <- createMaxMtx(StrMtx)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/mleBiTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Maximum likelihood estimates for bivariate (tail) copula densities — mleBiTC","title":"Maximum likelihood estimates for bivariate (tail) copula densities — mleBiTC","text":"mleBiTC returns ML estimates bivariate tail copula densities mleBiCop returns ML estimates bivariate copula densities.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/mleBiTC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Maximum likelihood estimates for bivariate (tail) copula densities — mleBiTC","text":"","code":"mleBiTC(ft, family, data, range)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/mleBiTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Maximum likelihood estimates for bivariate (tail) copula densities — mleBiTC","text":"ft log-likelihood function (see: BiLoglik()) family integer; indicates type bivariate (tail) copula densities. Possible tail copula families include: 1=Husler-Reiss 2=Negative Logistic 3=Logistic 4=Dirichlet Possible copula families include: 0=Independence 1=Gaussian 3=Clayton 4=Gumbel 5=Frank 6=Joe 13=Survival Clayton 14=Survival Gumbel 16=Survival Joe data \\(N\\times 2\\) data matrix bivariate inverted Pareto samples second column less 1 range numeric vector; indicates range parameters","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/mleBiTC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Maximum likelihood estimates for bivariate (tail) copula densities — mleBiTC","text":"numeric; ML estimate(s)","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/revert.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert a lower (or upper) vine structure matrix — revert","title":"Convert a lower (or upper) vine structure matrix — revert","text":"revert() transforms lower (upper) triangular vine structure matrix corresponding upper (lower) triangular matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/revert.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert a lower (or upper) vine structure matrix — revert","text":"","code":"revert(m)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/revert.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert a lower (or upper) vine structure matrix — revert","text":"m numeric \\(d\\times d\\) lower (upper) triangular matrix specifying regular vine structure.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/revert.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert a lower (or upper) vine structure matrix — revert","text":"numeric \\(d\\times d\\) upper triangular matrix input matrix lower triangular; otherwise, lower triangular matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/revert.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert a lower (or upper) vine structure matrix — revert","text":"","code":"##  A 5 x 5 lower triangular structure matrix LowerStrMtx <- matrix(c(5, 2, 3, 1, 4,  0, 2, 3, 4, 1,  0, 0, 3, 4, 1,  0, 0, 0, 4, 1,  0, 0, 0, 0, 1),5,5)   ##  Convert to the upper triangular matrix revert(LowerStrMtx) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    4 #> [2,]    0    4    4    4    1 #> [3,]    0    0    3    3    3 #> [4,]    0    0    0    2    2 #> [5,]    0    0    0    0    5"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/standardStrMtx.html","id":null,"dir":"Reference","previous_headings":"","what":"Reconstruct a structure matrix with diagonal elements put in ascending order — standardStrMtx","title":"Reconstruct a structure matrix with diagonal elements put in ascending order — standardStrMtx","text":"standardStrMtx() reconstructs given structure matrix ensure diagonal elements structure matrix arranged ascending order. advantage reconstruction can create -called max-matrix (see:createMaxMtx()) , making easier algorithm find correct argument conditional pair-copulas recursive relationships used.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/standardStrMtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Reconstruct a structure matrix with diagonal elements put in ascending order — standardStrMtx","text":"","code":"standardStrMtx(Matrix, oldOrder = NULL)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/standardStrMtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Reconstruct a structure matrix with diagonal elements put in ascending order — standardStrMtx","text":"Matrix numeric \\(d \\times d\\) structure matrix oldOrder Logical; NULL (default), function uses order diagonal elements structure matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/standardStrMtx.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Reconstruct a structure matrix with diagonal elements put in ascending order — standardStrMtx","text":"numeric \\(d \\times d\\) structure matrix diagonal elements arranged ascending order.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/standardStrMtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Reconstruct a structure matrix with diagonal elements put in ascending order — standardStrMtx","text":"","code":"##  A 5 x 5 structure matrix where diagonal elements are not arranged in ascending order. StrMtx <- cbind(c(2,0,0,0,0),c(2,4,0,0,0),c(4,2,5,0,0),c(2,4,5,3,0),c(2,3,4,5,1))  ##  A 5 x 5 structure matrix with diagonal elements arranged in increasing order. standardStrMtx(StrMtx) #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    2    1    1 #> [2,]    0    2    1    2    4 #> [3,]    0    0    3    3    2 #> [4,]    0    0    0    4    3 #> [5,]    0    0    0    0    5"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/varIndexloc.html","id":null,"dir":"Reference","previous_headings":"","what":"Store the order of variable indices \\((1,\\ldots,d)\\) placed on the diagonals of a structure matrix — varIndexloc","title":"Store the order of variable indices \\((1,\\ldots,d)\\) placed on the diagonals of a structure matrix — varIndexloc","text":"varIndexloc() stores order variable indices \\((1,\\ldots,d)\\) placed diagonals \\(d \\times d\\) structure matrix. sequence diagonal elements \\((m_{11},\\ldots,m_{dd})\\) corresponds one indices variables. instance, \\((m_{11},m_{22},m_{33},m_{44},m_{55})=(5,4,2,3,1)\\), indicates order variable indices \\((5,3,4,2,1)\\). stored order used rearrange data matrix generated XVineSim() ascending order.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/varIndexloc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Store the order of variable indices \\((1,\\ldots,d)\\) placed on the diagonals of a structure matrix — varIndexloc","text":"","code":"varIndexloc(Diag)"},{"path":"https://jeongjinlee88.github.io/Xvine/reference/varIndexloc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Store the order of variable indices \\((1,\\ldots,d)\\) placed on the diagonals of a structure matrix — varIndexloc","text":"Diag numeric vector diagonal elements structure matrix.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/varIndexloc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Store the order of variable indices \\((1,\\ldots,d)\\) placed on the diagonals of a structure matrix — varIndexloc","text":"numeric vector returning corresponding order diagonal elements.","code":""},{"path":"https://jeongjinlee88.github.io/Xvine/reference/varIndexloc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Store the order of variable indices \\((1,\\ldots,d)\\) placed on the diagonals of a structure matrix — varIndexloc","text":"","code":"##  A structure matrix StrMtx=matrix(c(5,5,4,2,2, 0,4,5,4,3, 0,0,2,5,4, 0,0,0,3,5, 0,0,0,0,1),5,5,byrow=TRUE) ##  Save diagonal elements Delements=diag(StrMtx) ##  Return the corresponding order of the diagonal elements varIndexloc(Delements) #> [1] 5 3 4 2 1"}]
